<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>计算机基础 on Tyritic</title>
        <link>https://Tyritic.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</link>
        <description>Recent content in 计算机基础 on Tyritic</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Tyritic</copyright><atom:link href="https://Tyritic.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>操作系统的IO模型</title>
        <link>https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84io%E6%A8%A1%E5%9E%8B/</link>
        <pubDate>Sun, 16 Mar 2025 14:47:26 +0800</pubDate>
        
        <guid>https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84io%E6%A8%A1%E5%9E%8B/</guid>
        <description>&lt;h2 id=&#34;常见的io模型&#34;&gt;常见的IO模型
&lt;/h2&gt;&lt;h3 id=&#34;同步io型&#34;&gt;同步IO型
&lt;/h3&gt;&lt;h4 id=&#34;阻塞型io模型&#34;&gt;阻塞型IO模型
&lt;/h4&gt;&lt;p&gt;应用程序发起I/O操作后会被阻塞，直到操作完成才返回结果。期间调用方会被挂起，不能继续执行其他任务，直到请求的操作完成&lt;/p&gt;
&lt;p&gt;此时 阻塞等待的是 &lt;strong&gt;内核数据准备好&lt;/strong&gt; 和 &lt;strong&gt;数据从内核态拷贝到用户态&lt;/strong&gt; 这两个过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84io%E6%A8%A1%E5%9E%8B/os-f06db5ff-661c-4ddf-9115-4ed9c9a21d01.png&#34;
	width=&#34;816&#34;
	height=&#34;485&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;阻塞I/O&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;168&#34;
		data-flex-basis=&#34;403px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;非阻塞型io模型&#34;&gt;非阻塞型IO模型
&lt;/h4&gt;&lt;p&gt;I/O操作不会阻塞进程，在非阻塞操作中，调用方在发出请求后立即返回，即使操作未完成，调用方可以继续执行其他任务。若数据未准备好，操作会返回一个状态而不是阻塞。此时应⽤程序不断轮询内核，直到数据准备好。&lt;/p&gt;
&lt;p&gt;但是 &lt;strong&gt;从内核拷贝到用户空间这一步，用户线程还是会被阻塞的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84io%E6%A8%A1%E5%9E%8B/os-771e014e-7ed9-4101-8bb5-4413b8069fd6.png&#34;
	width=&#34;813&#34;
	height=&#34;676&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;非阻塞I/O&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;120&#34;
		data-flex-basis=&#34;288px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;io复用模型&#34;&gt;IO复用模型
&lt;/h4&gt;&lt;p&gt;使用&lt;code&gt;select&lt;/code&gt;、&lt;code&gt;poll&lt;/code&gt;、&lt;code&gt;epoll&lt;/code&gt;等系统调用，允许程序同时等待多个I/O操作，当其中任意一个就绪时进行处理。当其中任何一个I/O操作准备就绪时，应用程序会被通知。通常使用select线程 ，我们可以往 select 线程注册需要被监听的连接，由 select 线程来监控它所管理的连接是否有数据已就绪，如果有则可以通知别的线程来 read 读取数据。&lt;/p&gt;
&lt;p&gt;但是 &lt;strong&gt;从内核拷贝到用户空间这一步，用户线程还是会被阻塞的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84io%E6%A8%A1%E5%9E%8B/os-86e54fa3-ad36-43c7-9d2d-5a68139c310f.png&#34;
	width=&#34;843&#34;
	height=&#34;667&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;基于非阻塞的I/O多路复用&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;126&#34;
		data-flex-basis=&#34;303px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;异步io型&#34;&gt;异步IO型
&lt;/h3&gt;&lt;p&gt;应用程序发起I/O操作后可以立即做其他事情，当I/O操作完成时，应用程序会得到通知。异步I/O模型由操作系统内核完成I/O操作，应用程序只需等待通知即可。&lt;/p&gt;
&lt;p&gt;异步 I/O 是 &lt;strong&gt;内核数据准备好&lt;/strong&gt; 和 &lt;strong&gt;数据从内核态拷贝到用户态&lt;/strong&gt; 这两个过程都不⽤等待。&lt;/p&gt;
&lt;p&gt;与多路复用模型的区别就是让内核直接把数据拷贝到用户空间之后再告知用户线程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84io%E6%A8%A1%E5%9E%8B/os-869021ed-5e4e-4490-9174-7291d8ddf55c.png&#34;
	width=&#34;781&#34;
	height=&#34;614&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;异步/IO&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;127&#34;
		data-flex-basis=&#34;305px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;同步和异步的区别&#34;&gt;同步和异步的区别
&lt;/h3&gt;&lt;p&gt;同步和异步（Asynchronous） 是两种不同的任务执行方式，主要区别在于任务的执行是否需要等待其他任务完成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;同步&lt;/strong&gt; ：在同步操作中，任务需要等待前一个任务完成后才能继续。调用者发起请求后，会被阻塞，直到任务完成并返回结果。调用者必须等待结果才能进行后续操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步&lt;/strong&gt; ：在异步操作中，任务在发出请求后可以立即继续执行，不需要等待请求的完成。请求的结果会通过回调机制在任务完成后通知调用者。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;零拷贝技术&#34;&gt;零拷贝技术
&lt;/h2&gt;&lt;h3 id=&#34;解放cpu的技术-dma技术&#34;&gt;解放CPU的技术-DMA技术
&lt;/h3&gt;&lt;p&gt;传统的IO流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户进程调用 read 方法，向操作系统发出 I/O 请求，请求读取数据到自己的内存缓冲区中，进程进入阻塞状态&lt;/li&gt;
&lt;li&gt;CPU 发出对应的指令给磁盘控制器，然后返回&lt;/li&gt;
&lt;li&gt;磁盘控制器收到指令后，于是就开始准备数据，会把数据放入到磁盘控制器的内部缓冲区中，然后产生一个 &lt;strong&gt;中断&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;CPU 收到中断信号后，停下手头的工作，接着把磁盘控制器的缓冲区的数据一次一个字节地读进自己的寄存器，然后再把寄存器里的数据写入到内存，而在数据传输的期间 CPU 是无法执行其他任务的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;![传统IO中断](I_O 中断.png)&lt;/p&gt;
&lt;p&gt;整个数据的传输过程，都要需要 CPU 亲自参与搬运数据的过程，而且这个过程，CPU 是不能做其他事情的。&lt;/p&gt;
&lt;p&gt;DMA（直接内存访问技术）：&lt;strong&gt;在进行 I/O 设备和内存的数据传输的时候，数据搬运的工作全部交给 DMA 控制器，而 CPU 不再参与任何与数据搬运相关的事情，这样 CPU 就可以去处理别的事务&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;DMA的工作流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户进程调用 read 方法，向操作系统发出 I/O 请求，请求读取数据到自己的内存缓冲区中，进程进入阻塞状态&lt;/li&gt;
&lt;li&gt;CPU收到请求后，进一步将 I/O 请求发送 DMA，然后让 CPU 执行其他任务&lt;/li&gt;
&lt;li&gt;DMA 进一步将 I/O 请求发送给磁盘；&lt;/li&gt;
&lt;li&gt;磁盘收到 DMA 的 I/O 请求，把数据从磁盘读取到磁盘控制器的缓冲区中&lt;/li&gt;
&lt;li&gt;DMA 收到磁盘的信号，将磁盘控制器缓冲区中的数据拷贝到内核缓冲区中，此时不占用 CPU，CPU 可以执行其他任务&lt;/li&gt;
&lt;li&gt;当 DMA 读取了足够多的数据，就会发送中断信号给 CPU；&lt;/li&gt;
&lt;li&gt;CPU 收到 DMA 的信号，知道数据已经准备好，于是将数据从内核拷贝到用户空间，系统调用返回&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;![DMA过程](DRM I_O 过程.png)&lt;/p&gt;
&lt;p&gt;CPU 不再参与将数据从 &lt;strong&gt;磁盘控制器缓冲区搬运到内核空间&lt;/strong&gt; 的工作，这部分工作全程由 DMA 完成。&lt;/p&gt;
&lt;h3 id=&#34;传统文件传输技术&#34;&gt;传统文件传输技术
&lt;/h3&gt;&lt;p&gt;传统 I/O 的工作方式是，数据读取和写入是从用户空间到内核空间来回复制，而内核空间的数据是通过操作系统层面的 I/O 接口从磁盘读取或写入&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84io%E6%A8%A1%E5%9E%8B/%E4%BC%A0%E7%BB%9F%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93.png&#34;
	width=&#34;1100&#34;
	height=&#34;678&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;传统文件传输&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;162&#34;
		data-flex-basis=&#34;389px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;期间共 &lt;strong&gt;发生了 4 次用户态与内核态的上下文切换&lt;/strong&gt; ，因为发生了两次系统调用，一次是 &lt;code&gt;read()&lt;/code&gt; ，一次是 &lt;code&gt;write()&lt;/code&gt;，每次系统调用都得先从用户态切换到内核态，等内核完成任务后，再从内核态切换回用户态。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一次上下文切换：把磁盘上的数据拷贝到操作系统内核的缓冲区里，这个拷贝的过程是通过 DMA 搬运的。&lt;/li&gt;
&lt;li&gt;第二次上下文切换：把内核缓冲区的数据拷贝到用户的缓冲区里，于是我们应用程序就可以使用这部分数据了，这个拷贝到过程是由 CPU 完成的。&lt;/li&gt;
&lt;li&gt;第三次拷贝：把刚才拷贝到用户的缓冲区里的数据，再拷贝到内核的 socket 的缓冲区里，这个过程依然还是由 CPU 搬运的。&lt;/li&gt;
&lt;li&gt;第四次拷贝：把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程又是由 DMA 搬运的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;零拷贝技术-1&#34;&gt;零拷贝技术
&lt;/h3&gt;&lt;h4 id=&#34;mmap--write&#34;&gt;mmap + write
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;mmap()&lt;/code&gt; 系统调用函数会直接把内核缓冲区里的数据「&lt;strong&gt;映射&lt;/strong&gt;」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用进程调用了 &lt;code&gt;mmap()&lt;/code&gt; 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核共享这个缓冲区；&lt;/li&gt;
&lt;li&gt;应用进程再调用 &lt;code&gt;write()&lt;/code&gt;，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；&lt;/li&gt;
&lt;li&gt;最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sendfile&#34;&gt;sendfile
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;sendfile()&lt;/code&gt; 可以替代前面的 &lt;code&gt;read()&lt;/code&gt; 和 &lt;code&gt;write()&lt;/code&gt; 这两个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。&lt;/p&gt;
&lt;p&gt;这个系统调用可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84io%E6%A8%A1%E5%9E%8B/senfile-3%E6%AC%A1%E6%8B%B7%E8%B4%9D.png&#34;
	width=&#34;1100&#34;
	height=&#34;686&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;sendfile&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;384px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;对于支持网卡支持 SG-DMA 技术的情况下， &lt;code&gt;sendfile()&lt;/code&gt; 系统调用的过程得到优化，具体过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；&lt;/li&gt;
&lt;li&gt;缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84io%E6%A8%A1%E5%9E%8B/senfile-%E9%9B%B6%E6%8B%B7%E8%B4%9D.png&#34;
	width=&#34;1160&#34;
	height=&#34;686&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;SG-DMA&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;169&#34;
		data-flex-basis=&#34;405px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;网络模型&#34;&gt;网络模型
&lt;/h2&gt;&lt;h3 id=&#34;基本的socket模型&#34;&gt;基本的Socket模型
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84io%E6%A8%A1%E5%9E%8B/tcp_socket.png&#34;
	width=&#34;407&#34;
	height=&#34;722&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;socket模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;56&#34;
		data-flex-basis=&#34;135px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;服务端&#34;&gt;服务端
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;服务端首先调用 &lt;code&gt;socket()&lt;/code&gt; 函数，创建网络协议为 IPv4，以及传输协议为 TCP 的 Socket&lt;/li&gt;
&lt;li&gt;接着调用 &lt;code&gt;bind()&lt;/code&gt; 函数，给这个 Socket 绑定一个 &lt;strong&gt;IP 地址&lt;/strong&gt; 和 &lt;strong&gt;端口&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;绑定端口的目的：当内核收到 TCP 报文，通过 TCP 头里面的端口号，来找到应用程序，然后把数据传递给我们。&lt;/li&gt;
&lt;li&gt;绑定 IP 地址的目的：一台机器是可以有多个网卡的，每个网卡都有对应的 IP 地址，当绑定一个网卡时，内核在收到该网卡上的包，才会发给我们&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;listen()&lt;/code&gt; 函数进行监听&lt;/li&gt;
&lt;li&gt;服务端进入了监听状态后，通过调用 &lt;code&gt;accept()&lt;/code&gt; 函数，来从内核获取客户端的连接，如果没有客户端连接，则会阻塞等待客户端连接的到来。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 TCP 连接的过程中，服务器的内核实际上为每个 Socket 维护了两个队列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个是「还没完全建立」连接的队列，称为 &lt;strong&gt;TCP 半连接队列&lt;/strong&gt; ，这个队列都是没有完成三次握手的连接，此时服务端处于 &lt;code&gt;syn_rcvd&lt;/code&gt; 的状态；&lt;/li&gt;
&lt;li&gt;一个是「已经建立」连接的队列，称为 &lt;strong&gt;TCP 全连接队列&lt;/strong&gt; ，这个队列都是完成了三次握手的连接，此时服务端处于 &lt;code&gt;established&lt;/code&gt; 状态；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当 TCP 全连接队列不为空后，服务端的 &lt;code&gt;accept()&lt;/code&gt; 函数，就会从内核中的 TCP 全连接队列里拿出一个已经完成连接的 Socket 返回应用程序，后续数据传输都用这个 Socket。&lt;/p&gt;
&lt;h4 id=&#34;客户端&#34;&gt;客户端
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;客户端创建好 Socket 后&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;connect()&lt;/code&gt; 函数发起连接，指明服务端的 IP 地址和端口号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;连接建立后，客户端和服务端就开始相互传输数据了，双方都可以通过 &lt;code&gt;read()&lt;/code&gt; 和 &lt;code&gt;write()&lt;/code&gt; 函数来读写数据。&lt;/p&gt;
&lt;h4 id=&#34;模型的限制&#34;&gt;模型的限制
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件描述符&lt;/strong&gt; ：Socket 实际上是一个文件，也就会对应一个文件描述符。在 Linux 下，单个进程打开的文件描述符数是有限制的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统内存&lt;/strong&gt; ：每个 TCP 连接在内核中都有对应的数据结构，意味着每个连接都是会占用一定内存的；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多进程模型&#34;&gt;多进程模型
&lt;/h3&gt;&lt;p&gt;服务器的主进程负责监听客户的连接，一旦与客户端连接完成，accept() 函数就会返回一个「已连接 Socket」，这时就通过 &lt;code&gt;fork()&lt;/code&gt; 函数创建一个子进程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子进程会 &lt;strong&gt;复制父进程的文件描述符&lt;/strong&gt; ，于是就可以直接使用已连接 Socket 和客户端通信了&lt;/li&gt;
&lt;li&gt;父进程将客户端服务交给子进程来处理，因此父进程不需要关心已连接 Socket，只需要关心监听 Socket&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84io%E6%A8%A1%E5%9E%8B/%E5%A4%9A%E8%BF%9B%E7%A8%8B.png&#34;
	width=&#34;977&#34;
	height=&#34;407&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;多进程模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;240&#34;
		data-flex-basis=&#34;576px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;多线程模型&#34;&gt;多线程模型
&lt;/h3&gt;&lt;p&gt;当服务器与客户端 TCP 完成连接后，通过 &lt;code&gt;pthread_create()&lt;/code&gt; 函数创建线程，然后将已连接 Socket的文件描述符传递给线程函数，接着在线程里和客户端进行通信，从而达到并发处理的目的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84io%E6%A8%A1%E5%9E%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0.png&#34;
	width=&#34;1382&#34;
	height=&#34;452&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;线程池&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;305&#34;
		data-flex-basis=&#34;733px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程池&lt;/strong&gt; 可以避免线程的频繁创建和销毁，所谓的线程池，就是提前创建若干个线程，这样当由新连接建立时，将这个已连接的 Socket 放入到一个队列里，然后线程池里的线程负责从队列中取出「已连接 Socket 」进行处理。&lt;/p&gt;
&lt;h3 id=&#34;io多路复用模型&#34;&gt;IO多路复用模型
&lt;/h3&gt;&lt;h4 id=&#34;selectpoll模型&#34;&gt;select/poll模型
&lt;/h4&gt;&lt;p&gt;将已连接的 Socket 都放到一个 文件描述符集合 ，然后调用函数将文件描述符集合拷贝到内核里，让内核来检查是否有网络事件产生。&lt;/p&gt;
&lt;p&gt;检查的方式，就是通过 &lt;strong&gt;遍历&lt;/strong&gt; 文件描述符集合的方式，当检查到有事件产生后，将此 Socket 标记为可读或可写， 接着再把整个文件描述符集合 &lt;strong&gt;拷贝&lt;/strong&gt; 回用户态里，然后用户态还需要再通过 &lt;strong&gt;遍历&lt;/strong&gt; 的方法找到可读或可写的 Socket，然后再对其处理。&lt;/p&gt;
&lt;p&gt;poll模型和select模型没有本质区别，都是使用线性结构存储socket&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;select 使用固定长度的 BitsMap，表示文件描述符集合，而且所支持的文件描述符的个数是有限制的，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;poll 使用动态数组，以链表形式来组织，突破了 select 的文件描述符个数限制&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;epoll模型&#34;&gt;epoll模型
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;epoll&lt;/code&gt;是Linux系统对&lt;code&gt;select&lt;/code&gt;和&lt;code&gt;poll&lt;/code&gt;的优化。优化在以下方面。&lt;/p&gt;
&lt;p&gt;红黑树的使用：epoll 在内核里使用  &lt;strong&gt;红黑树&lt;/strong&gt; 代替线性结构跟踪进程所有待检测的文件描述符。红黑树的增删改一般时间复杂度是 &lt;code&gt;O(logn)&lt;/code&gt;。相较于select/poll 每次操作时都传入整个 socket 集合给内核，而 epoll 因为在内核维护了红黑树，可以保存所有待检测的 socket ，所以只需要传入一个待检测的 socket，减少了内核和用户空间大量的数据拷贝和内存分配。&lt;/p&gt;
&lt;p&gt;事件驱动的机制： epoll 使用 &lt;strong&gt;事件驱动&lt;/strong&gt; 的机制，内核里 &lt;strong&gt;维护了一个链表来记录就绪事件&lt;/strong&gt; ，当某个 socket 有事件发生时，通过 &lt;strong&gt;回调函数&lt;/strong&gt; 内核会将其加入到这个就绪事件列表中，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。&lt;/p&gt;
&lt;p&gt;epoll提供了两种事件触发机制 &lt;strong&gt;边缘触发&lt;/strong&gt; 和 &lt;strong&gt;水平触发&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;边缘触发：当被监控的 Socket 描述符上有可读事件发生时， &lt;strong&gt;服务器端只会从 epoll_wait 中苏醒一次&lt;/strong&gt; ，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；&lt;/li&gt;
&lt;li&gt;水平触发：当被监控的 Socket 上有可读事件发生时，&lt;strong&gt;服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束&lt;/strong&gt; ，目的是告诉我们有数据需要读取；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;高性能网络模式&#34;&gt;高性能网络模式
&lt;/h2&gt;&lt;h3 id=&#34;reactor模式&#34;&gt;Reactor模式
&lt;/h3&gt;&lt;p&gt;Reactor模式是对 I/O 多路复用作了一层封装，让使用者不用考虑底层网络 API 的细节，只需要关注应用代码的编写。&lt;/p&gt;
&lt;p&gt;Reactor模式的核心思想是 &lt;strong&gt;将I/O事件与相应的处理程序解耦&lt;/strong&gt; ，并通过 &lt;strong&gt;事件分发器&lt;/strong&gt; 来管理事件和响应操作。&lt;/p&gt;
&lt;h4 id=&#34;组成部分&#34;&gt;组成部分
&lt;/h4&gt;&lt;p&gt;Reactor 模式主要由 Reactor 和处理资源池这两个核心部分组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reactor： 负责监听和分发事件，它通常封装了一个多路复用器（如&lt;code&gt;select&lt;/code&gt;、&lt;code&gt;epoll&lt;/code&gt;），在事件到达时将其分发给相应的事件处理器。&lt;/li&gt;
&lt;li&gt;Handler：负责处理事件，每个事件处理器与一个具体的I/O事件绑定，定义了在事件发生时应该执行的逻辑。&lt;/li&gt;
&lt;li&gt;Acceptor：在服务器端，&lt;code&gt;Acceptor&lt;/code&gt;用于接受新的客户端连接，并为每个新连接分配一个Handler进行后续的数据处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;工作流程&#34;&gt;工作流程
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reactor&lt;/strong&gt; 通过多路复用器监听多个通道，等待事件（如连接到达、数据可读等）的发生。&lt;/li&gt;
&lt;li&gt;当某个通道有事件发生时，Reactor将事件分发给相应的 &lt;strong&gt;Handler&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Handler&lt;/strong&gt; 根据事件类型执行相应的操作，如读取数据、写入数据或处理业务逻辑。&lt;/li&gt;
&lt;li&gt;事件处理完成后，Reactor继续监听其他事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;proactor模式&#34;&gt;Proactor模式
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Proactor 是异步网络模式， 感知的是已完成的读写事件&lt;/strong&gt; 。在发起异步读写请求时，需要传入数据缓冲区的地址（用来存放结果数据）等信息，这样系统内核才可以自动帮我们把数据的读写工作完成，这里的读写工作全程由操作系统来做，并不需要像 Reactor 那样还需要应用进程主动发起 read/write 来读写数据，操作系统完成读写工作后，就会通知应用进程直接处理数据。&lt;/p&gt;
&lt;h4 id=&#34;工作流程-1&#34;&gt;工作流程
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Proactor Initiator 负责创建 Proactor 和 Handler 对象，并将 Proactor 和 Handler 都通过 Asynchronous Operation Processor 注册到内核；&lt;/li&gt;
&lt;li&gt;Asynchronous Operation Processor 负责处理注册请求，并处理 I/O 操作&lt;/li&gt;
&lt;li&gt;Asynchronous Operation Processor 完成 I/O 操作后通知 Proactor&lt;/li&gt;
&lt;li&gt;Proactor 根据不同的事件类型回调不同的 Handler 进行业务处理&lt;/li&gt;
&lt;li&gt;Handler 完成业务处理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84io%E6%A8%A1%E5%9E%8B/Proactor.png&#34;
	width=&#34;1427&#34;
	height=&#34;654&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Proactor模式&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;218&#34;
		data-flex-basis=&#34;523px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;reactor模式和proactor模式的区别&#34;&gt;Reactor模式和Proactor模式的区别
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reactor 是非阻塞同步网络模式，感知的是就绪可读写事件&lt;/strong&gt; ：在每次感知到有事件发生（比如可读就绪事件）后，就需要应用进程主动调用 read 方法来完成数据的读取，也就是要应用进程主动将 socket 接收缓存中的数据读到应用进程内存中，这个过程是同步的，读取完数据后应用进程才能处理数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Proactor 是异步网络模式， 感知的是已完成的读写事件&lt;/strong&gt; ：在发起异步读写请求时，需要传入数据缓冲区的地址（用来存放结果数据）等信息，这样系统内核才可以自动帮我们把数据的读写工作完成，这里的读写工作全程由操作系统来做，并不需要像 Reactor 那样还需要应用进程主动发起 read/write 来读写数据，操作系统完成读写工作后，就会通知应用进程直接处理数据。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>操作系统的文件系统</title>
        <link>https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</link>
        <pubDate>Fri, 14 Mar 2025 17:35:09 +0800</pubDate>
        
        <guid>https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</guid>
        <description>&lt;h2 id=&#34;文件系统的概念&#34;&gt;文件系统的概念
&lt;/h2&gt;&lt;p&gt;文件系统是操作系统中负责管理持久数据的子系统&lt;/p&gt;
&lt;p&gt;文件系统的基本数据单位是文件，它的目的是对磁盘上的文件进行组织管理，那组织的方式不同，就会形成不同的文件系统。&lt;/p&gt;
&lt;p&gt;对于Linux系统 &lt;strong&gt;一切皆文件&lt;/strong&gt;，除了普通的文件和目录，就连块设备、管道、socket 等，也都是统一交给文件系统管理的。&lt;/p&gt;
&lt;h2 id=&#34;文件的结构&#34;&gt;文件的结构
&lt;/h2&gt;&lt;p&gt;Linux 文件系统会为每个文件分配两个数据结构：索引节点（index node）和目录项（directory entry），它们主要用来记录文件的元信息和目录层次结构。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;索引节点：用来记录文件的元信息，比如文件大小、访问权限、创建时间、修改时间、 &lt;strong&gt;数据在磁盘的位置&lt;/strong&gt; 等等。索引节点是文件的 &lt;strong&gt;唯一&lt;/strong&gt; 标识，它们之间一一对应，也同样都会被存储在硬盘中，所以 &lt;strong&gt;索引节点同样占用磁盘空间&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;目录项：用来记录文件的名字、&lt;strong&gt;索引节点指针&lt;/strong&gt; 以及与其他目录项的层级关联关系。多个目录项关联起来，就会形成目录结构，但它与索引节点不同的是， &lt;strong&gt;目录项是由内核维护的一个数据结构，不存放于磁盘，而是缓存在内存&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目录项和索引节点的关系是多对一，一个文件可以有多个别名&lt;/p&gt;
&lt;style type=&#34;text/css&#34;&gt;
   
  .notice {
    --title-color: #fff;
    --title-background-color: #6be;
    --content-color: #444;
    --content-background-color: #e7f2fa;
  }

  .notice.info {
    --title-background-color: #fb7;
    --content-background-color: #fec;
  }

  .notice.tip {
    --title-background-color: #5a5;
    --content-background-color: #efe;
  }

  .notice.warning {
    --title-background-color: #c33;
    --content-background-color: #fee;
  }

   
  @media (prefers-color-scheme: dark) {
    .notice {
      --title-color: #fff;
      --title-background-color: #069;
      --content-color: #ddd;
      --content-background-color: #023;
    }

    .notice.info {
      --title-background-color: #a50;
      --content-background-color: #420;
    }

    .notice.tip {
      --title-background-color: #363;
      --content-background-color: #121;
    }

    .notice.warning {
      --title-background-color: #800;
      --content-background-color: #400;
    }
  }

  body.dark .notice {
    --title-color: #fff;
    --title-background-color: #069;
    --content-color: #ddd;
    --content-background-color: #023;
  }

  body.dark .notice.info {
    --title-background-color: #a50;
    --content-background-color: #420;
  }

  body.dark .notice.tip {
    --title-background-color: #363;
    --content-background-color: #121;
  }

  body.dark .notice.warning {
    --title-background-color: #800;
    --content-background-color: #400;
  }

   
  .notice {
    width: 100%;  
    max-width: 600px;  
    padding: 18px;
    line-height: 24px;
    margin-bottom: 24px;
    border-radius: 4px;
    color: var(--content-color);
    background: var(--content-background-color);
  }

  .notice p:last-child {
    margin-bottom: 0;
  }

   
  .notice-title {
    margin: -18px -18px 12px;
    padding: 4px 18px;
    border-radius: 4px 4px 0 0;
    font-weight: 700;
    color: var(--title-color);
    background: var(--title-background-color);
  }

   
  .icon-notice {
    display: inline-flex;
    align-self: center;
    margin-right: 8px;
  }

  .icon-notice img,
  .icon-notice svg {
    height: 1em;
    width: 1em;
    fill: currentColor;
  }

  .icon-notice img,
  .icon-notice.baseline svg {
    top: 0.125em;
    position: relative;
  }
&lt;/style&gt;&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;目录项和目录的关系和区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;目录是个文件，持久化存储在磁盘&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目录项是内核维护数据结构，缓存在内存。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果查询目录频繁从磁盘读，效率会很低，所以内核会把已经读过的目录用目录项这个数据结构缓存在内存，下次再次读到相同的目录时，只需从内存读就可以，大大提高了文件系统的效率。&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/%E7%9B%AE%E5%BD%95%E9%A1%B9%E5%92%8C%E7%B4%A2%E5%BC%95%E5%85%B3%E7%B3%BB%E5%9B%BE.png&#34;
	width=&#34;1172&#34;
	height=&#34;842&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;目录项和索引节点&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;139&#34;
		data-flex-basis=&#34;334px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;虚拟文件系统&#34;&gt;虚拟文件系统
&lt;/h2&gt;&lt;p&gt;操作系统 &lt;strong&gt;对用户提供一个统一的接口&lt;/strong&gt; ，于是在用户层与文件系统层引入了虚拟文件系统作为中间层&lt;/p&gt;
&lt;p&gt;虚拟文件系统定义了一组所有文件系统都支持的数据结构和标准接口&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f%e7%9a%84%e6%96%87%e4%bb%b6%e7%b3%bb%e7%bb%9f%5c%e8%99%9a%e6%8b%9f%e6%96%87%e4%bb%b6%e7%b3%bb%e7%bb%9f.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;虚拟文件系统&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;磁盘的文件系统：直接把数据存储在磁盘中&lt;/li&gt;
&lt;li&gt;内存的文件系统：数据不是存储在硬盘的，而是占用内存空间，我们经常用到的 &lt;code&gt;/proc&lt;/code&gt; 和 &lt;code&gt;/sys&lt;/code&gt; 文件系统都属于这一类，读写这类文件，实际上是读写内核中相关的数据。&lt;/li&gt;
&lt;li&gt;网络的文件系统：用来访问其他计算机主机数据的文件系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文件系统首先要先挂载到某个目录才可以正常使用&lt;/p&gt;
&lt;h2 id=&#34;linux系统的目录树&#34;&gt;Linux系统的目录树
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Linux%E7%9B%AE%E5%BD%95%E6%A0%91-DzjzZEII.png&#34;
	width=&#34;823&#34;
	height=&#34;315&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Linux的目录结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;261&#34;
		data-flex-basis=&#34;627px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;目录树由根目录（/）作为起始点，向下延伸，形成一系列的目录和子目录。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;/bin：&lt;/strong&gt; 存放二进制可执行文件(ls、cat、mkdir 等)，常用命令一般都在这里；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/etc：&lt;/strong&gt; 存放系统管理和配置文件；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/home：&lt;/strong&gt; 存放所有用户文件的根目录，是用户主目录的基点，比如用户 user 的主目录就是/home/user，可以用~user 表示；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/usr：&lt;/strong&gt; 用于存放系统应用程序；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/opt：&lt;/strong&gt; 额外安装的可选应用程序包所放置的位置。一般情况下，我们可以把 tomcat 等都安装到这里；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/proc：&lt;/strong&gt; 虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/root：&lt;/strong&gt; 超级用户（系统管理员）的主目录（特权阶级^o^）；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/sbin:&lt;/strong&gt; 存放二进制可执行文件，只有 root 才能访问。这里存放的是系统管理员使用的系统级别的管理命令和程序。如 ifconfig 等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/dev：&lt;/strong&gt; 用于存放设备文件；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/mnt：&lt;/strong&gt; 系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/boot：&lt;/strong&gt; 存放用于系统引导时使用的各种文件；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/lib 和/lib64：&lt;/strong&gt; 存放着和系统运行相关的库文件 ；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/tmp：&lt;/strong&gt; 用于存放各种临时文件，是公用的临时文件存储点；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/var：&lt;/strong&gt; 用于存放运行时需要改变数据的文件，也是某些大文件的溢出区，比方说各种服务的日志文件（系统启动日志等。）等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/lost+found：&lt;/strong&gt; 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows 下叫什么.chk）就在这里。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;软链接和硬链接&#34;&gt;软链接和硬链接
&lt;/h2&gt;&lt;p&gt;在 Linux系统上，文件链接是一种特殊的文件类型，可以在文件系统中指向另一个文件。&lt;/p&gt;
&lt;h3 id=&#34;硬链接&#34;&gt;硬链接
&lt;/h3&gt;&lt;p&gt;硬链接是为 &lt;strong&gt;同一个文件创建多个目录项&lt;/strong&gt; ，也就是指向同一个索引节点。由于多个目录项都是指向一个索引节点，那么 &lt;strong&gt;只有删除文件的所有硬链接以及源文件时，系统才会彻底删除该文件。&lt;/strong&gt; 硬链接具有一些限制，不能对目录以及不存在的文件创建硬链接，并且，硬链接也不能跨越文件系统。&lt;/p&gt;
&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;为什么硬链接不能跨域文件系统&lt;/p&gt;
&lt;p&gt;硬链接是 &lt;strong&gt;多个目录项中的索引节点指向一个文件&lt;/strong&gt; ，也就是指向同一个索引节点。索引节点是不可能跨越文件系统的，每个文件系统都有各自的索引节点数据结构和列表，所以&lt;strong&gt;硬链接是不可用于跨文件系统的&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/%E7%A1%AC%E9%93%BE%E6%8E%A5-2.png&#34;
	width=&#34;1154&#34;
	height=&#34;624&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;硬链接&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;184&#34;
		data-flex-basis=&#34;443px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;软链接&#34;&gt;软链接
&lt;/h3&gt;&lt;p&gt;软链接本质上是一个特殊类型的文件，这个文件有 &lt;strong&gt;独立的索引节点&lt;/strong&gt; ，但是这个 &lt;strong&gt;文件的内容是另外一个文件的路径&lt;/strong&gt; ，类似于Windows系统的快捷方式，所以访问软链接的时候，实际上相当于访问到了另外一个文件，所以 &lt;strong&gt;软链接是可以跨文件系统的&lt;/strong&gt; ，即使&lt;strong&gt;目标文件被删除了，链接文件还是在的，只不过指向的文件找不到了而已。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/%E8%BD%AF%E9%93%BE%E6%8E%A5.png&#34;
	width=&#34;1232&#34;
	height=&#34;642&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;软链接&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;460px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>操作系统的内存管理</title>
        <link>https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
        <pubDate>Fri, 14 Mar 2025 14:46:12 +0800</pubDate>
        
        <guid>https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
        <description>&lt;h2 id=&#34;虚拟内存&#34;&gt;虚拟内存
&lt;/h2&gt;&lt;h3 id=&#34;虚拟内存的定义&#34;&gt;虚拟内存的定义
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;虚拟内存&lt;/strong&gt; 是计算机系统内存管理非常重要的一个技术，本质上来说它只是逻辑存在的，是一个假想出来的内存空间，主要作用是作为进程访问主存（物理内存）的桥梁并简化内存管理。每个程序在运行时认为自己拥有的内存空间就是虚拟内存，其大小可以远远大于物理内存的大小。&lt;/p&gt;
&lt;h3 id=&#34;虚拟内存的存在意义&#34;&gt;虚拟内存的存在意义
&lt;/h3&gt;&lt;p&gt;如果直接操作物理地址的话，存在以下的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户程序可以访问任意内存，寻址内存的每个字节，这样就很容易破坏操作系统，造成操作系统崩溃。&lt;/li&gt;
&lt;li&gt;同时运行多个程序会特别困难，当两个用户程序引用同一个物理地址时会导致程序崩溃&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而在进程和物理内存之间添加一个中间层虚拟地址，就可以解决这个问题。因为进程不会直接操作物理地址，导致多个进程不会同时引用同一个物理地址&lt;/p&gt;
&lt;h3 id=&#34;虚拟地址的原理&#34;&gt;虚拟地址的原理
&lt;/h3&gt;&lt;p&gt;虚拟地址作为中间层把进程所使用的地址隔离开来（让操作系统为每个进程分配独立的一套 &lt;strong&gt;虚拟地址&lt;/strong&gt; ），进程之间的地址是隔离的，互不干涉。前提每个进程都不能访问物理地址。至于虚拟地址最终怎么映射到物理内存里，对进程来说是透明的，操作系统将决定虚拟地址和物理地址的映射关系&lt;/p&gt;
&lt;p&gt;程序要访问虚拟地址的时候，由操作系统转换成不同的物理地址，这样不同的进程运行的时候，写入的是不同的物理地址，这样就不会冲突了。&lt;/p&gt;
&lt;style type=&#34;text/css&#34;&gt;
   
  .notice {
    --title-color: #fff;
    --title-background-color: #6be;
    --content-color: #444;
    --content-background-color: #e7f2fa;
  }

  .notice.info {
    --title-background-color: #fb7;
    --content-background-color: #fec;
  }

  .notice.tip {
    --title-background-color: #5a5;
    --content-background-color: #efe;
  }

  .notice.warning {
    --title-background-color: #c33;
    --content-background-color: #fee;
  }

   
  @media (prefers-color-scheme: dark) {
    .notice {
      --title-color: #fff;
      --title-background-color: #069;
      --content-color: #ddd;
      --content-background-color: #023;
    }

    .notice.info {
      --title-background-color: #a50;
      --content-background-color: #420;
    }

    .notice.tip {
      --title-background-color: #363;
      --content-background-color: #121;
    }

    .notice.warning {
      --title-background-color: #800;
      --content-background-color: #400;
    }
  }

  body.dark .notice {
    --title-color: #fff;
    --title-background-color: #069;
    --content-color: #ddd;
    --content-background-color: #023;
  }

  body.dark .notice.info {
    --title-background-color: #a50;
    --content-background-color: #420;
  }

  body.dark .notice.tip {
    --title-background-color: #363;
    --content-background-color: #121;
  }

  body.dark .notice.warning {
    --title-background-color: #800;
    --content-background-color: #400;
  }

   
  .notice {
    width: 100%;  
    max-width: 600px;  
    padding: 18px;
    line-height: 24px;
    margin-bottom: 24px;
    border-radius: 4px;
    color: var(--content-color);
    background: var(--content-background-color);
  }

  .notice p:last-child {
    margin-bottom: 0;
  }

   
  .notice-title {
    margin: -18px -18px 12px;
    padding: 4px 18px;
    border-radius: 4px 4px 0 0;
    font-weight: 700;
    color: var(--title-color);
    background: var(--title-background-color);
  }

   
  .icon-notice {
    display: inline-flex;
    align-self: center;
    margin-right: 8px;
  }

  .icon-notice img,
  .icon-notice svg {
    height: 1em;
    width: 1em;
    fill: currentColor;
  }

  .icon-notice img,
  .icon-notice.baseline svg {
    top: 0.125em;
    position: relative;
  }
&lt;/style&gt;&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;虚拟内存地址&lt;/strong&gt; ：程序所使用的内存地址，由CPU生成，用于内存的访问和操作。逻辑地址在程序编写和编译时使用，并由操作系统通过地址转换机制（如页表）映射到物理地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;物理内存地址&lt;/strong&gt; ：实际存在硬件里面的空间地址，由内存管理单元（MMU）直接访问。它表示数据在物理内存中的实际存储位置，是由硬件层面决定的。物理地址直接对应到内存芯片上的某个位置，它是CPU在访问内存时经过地址转换后的实际地址&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;p&gt;操作系统引入了虚拟内存，进程持有的虚拟地址会通过 CPU 芯片中的内存管理单元（MMU）的映射关系，来转换变成物理地址，然后再通过物理地址访问内存&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/72ab76ba697e470b8ceb14d5fc5688d9.png&#34;
	width=&#34;831&#34;
	height=&#34;539&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;虚拟内存的使用&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;154&#34;
		data-flex-basis=&#34;370px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;虚拟内存的优点&#34;&gt;虚拟内存的优点
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内存扩展能力：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚拟内存允许程序运行在比实际物理内存大的地址空间上。即使物理内存不足，系统也可以通过交换（swapping）将不常用的内存页移到磁盘中，使得多个程序能够同时运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;进程隔离：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每个进程拥有独立的虚拟地址空间，防止进程间的内存访问冲突，提高系统稳定性和安全性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用虚拟内存，操作系统可以通过页面表设置访问权限，防止非法访问。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;简化内存管理：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;操作系统可以更灵活地分配和回收内存，无需手动考虑物理内存布局问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚拟内存可以将程序逻辑地址与物理地址解耦。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;物理地址和虚拟地址的映射管理方式&#34;&gt;物理地址和虚拟地址的映射管理方式
&lt;/h2&gt;&lt;h3 id=&#34;分段管理&#34;&gt;分段管理
&lt;/h3&gt;&lt;p&gt;将程序视为若干个逻辑分段组成的，如可由代码分段、数据分段、栈段、堆段组成。不同的段是有不同的属性的，同时具有实际意义和逻辑信息。将程序以段的形式进行划分，&lt;strong&gt;连续&lt;/strong&gt; 的物理内存的形式管理/分配物理内存&lt;/p&gt;
&lt;h4 id=&#34;分段管理下的虚拟地址&#34;&gt;分段管理下的虚拟地址
&lt;/h4&gt;&lt;p&gt;分段机制下的虚拟地址由两部分组成：&lt;strong&gt;段选择因子&lt;/strong&gt; 和 &lt;strong&gt;段内偏移量&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;段选择因子&lt;/strong&gt; ：保存在段寄存器里面
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;段号&lt;/strong&gt; ：用作段表的索引，标识这个段在虚拟地址的哪一段&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;段标志位&lt;/strong&gt; ：某些特权位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;段内偏移量&lt;/strong&gt; ：相对于该段的起始地址的偏移量，位于 0 和段界限之间，如果段内偏移量是合法的，就将段基地址加上段内偏移量得到物理内存地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/a9ed979e2ed8414f9828767592aadc21.png&#34;
	width=&#34;1382&#34;
	height=&#34;1004&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;虚拟地址的结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;137&#34;
		data-flex-basis=&#34;330px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;分段管理下的地址映射&#34;&gt;分段管理下的地址映射
&lt;/h4&gt;&lt;p&gt;虚拟地址是通过 &lt;strong&gt;段表&lt;/strong&gt; 与物理地址进行映射的。&lt;strong&gt;段表&lt;/strong&gt; 里面保存的是这个 &lt;strong&gt;段的基地址、段的界限和特权等级&lt;/strong&gt; 等。&lt;/p&gt;
&lt;p&gt;分段机制会把程序的虚拟地址分成 4 个段，每个段在段表中有一个项，由MMU进行地址翻译&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MMU 首先解析得到虚拟地址中的段号；&lt;/li&gt;
&lt;li&gt;通过段号去该应用程序的段表中取出对应的段信息（找到对应的段表项）；&lt;/li&gt;
&lt;li&gt;从段信息中取出该段的起始地址（物理地址）加上虚拟地址中的段内偏移量得到最终的物理地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/c5e2ab63e6ee4c8db575f3c7c9c85962.png&#34;
	width=&#34;1055&#34;
	height=&#34;651&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;地址映射过程&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;162&#34;
		data-flex-basis=&#34;388px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;分段管理的缺点&#34;&gt;分段管理的缺点
&lt;/h4&gt;&lt;p&gt;分段管理会产生 &lt;strong&gt;外部碎片&lt;/strong&gt;  。每个段的长度不固定，所以多个段未必能恰好使用所有的内存空间，会产生了多个不连续的小物理内存，导致新的程序无法被装载&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/6142bc3c917e4a6298bdb62936e0d332.png&#34;
	width=&#34;1518&#34;
	height=&#34;806&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;外部碎片&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;188&#34;
		data-flex-basis=&#34;452px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;解决方法：&lt;strong&gt;内存交换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以通过将整块的内存先写入硬盘然后在读入内存，但是读入内存时不会占据原来的内存位置而是尽量和其他的整块内存相连，使得原来碎片化的内存合并起来。&lt;/p&gt;
&lt;h3 id=&#34;分页管理&#34;&gt;分页管理
&lt;/h3&gt;&lt;p&gt;分页管理是把整个虚拟和物理内存空间切成⼀段段连续且尺寸固定的内存空间。其中在虚拟内存称为 &lt;strong&gt;页&lt;/strong&gt; ，在物理内存的称为 &lt;strong&gt;页框&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;页和页框的大小相同，在Linux系统中大小为4KB。页表保存了页和页框之间的映射关系&lt;/p&gt;
&lt;h4 id=&#34;分页管理下的虚拟地址&#34;&gt;分页管理下的虚拟地址
&lt;/h4&gt;&lt;p&gt;在分页机制下，虚拟地址分为两部分，&lt;strong&gt;页号&lt;/strong&gt; 和 &lt;strong&gt;页内偏移&lt;/strong&gt; 。页号作为页表的索引，&lt;strong&gt;页表&lt;/strong&gt; 包含物理页每页所在 &lt;strong&gt;物理内存的基地址&lt;/strong&gt; ，这个基地址与页内偏移的组合就形成了物理内存地址。地址翻译依然由MMU完成&lt;/p&gt;
&lt;h4 id=&#34;分页管理下的地址映射&#34;&gt;分页管理下的地址映射
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;MMU 首先解析得到虚拟地址中的虚拟页号；&lt;/li&gt;
&lt;li&gt;通过虚拟页号去该应用程序的页表中取出对应的物理页号（找到对应的页表项）；&lt;/li&gt;
&lt;li&gt;用该物理页号对应的物理页起始地址（物理地址）加上虚拟地址中的页内偏移量得到最终的物理地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/7884f4d8db4949f7a5bb4bbd0f452609.png&#34;
	width=&#34;1067&#34;
	height=&#34;797&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;地址翻译过程&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;321px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;当页表中的页表项未被命中时，代表物理内存中没有对应的物理页或者物理内存中有对应的物理页但虚拟页还未和物理页建立映射（对应的页表项不存在）就会抛出缺页异常。此时系统进入内核态，针对不同类型的缺页中断进行操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;硬性页缺失&lt;/strong&gt; ：物理内存中没有对应的物理页。于是，Page Fault Handler 会指示 CPU 从已经打开的磁盘文件中读取相应的内容到物理内存，而后交由 MMU 建立相应的虚拟页和物理页的映射关系。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;软性页缺失&lt;/strong&gt; ：物理内存中有对应的物理页，但虚拟页还未和物理页建立映射。于是，Page Fault Handler 会指示 MMU 建立相应的虚拟页和物理页的映射关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果没有空闲的物理内存，那么内核就会开始进行 &lt;strong&gt;回收内存&lt;/strong&gt; 的工作，回收的方式主要是两种：直接内存回收和后台内存回收。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;后台内存回收&lt;/strong&gt; ：在物理内存紧张的时候，会唤醒 kswapd 内核线程来回收内存，这个回收内存的过程&lt;strong&gt;异步&lt;/strong&gt;的，不会阻塞进程的执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;直接内存回收&lt;/strong&gt; ：如果后台异步回收跟不上进程内存申请的速度，就会开始直接回收，这个回收内存的过程是&lt;strong&gt;同步&lt;/strong&gt;的，会阻塞进程的执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分页管理下的内存交换&#34;&gt;分页管理下的内存交换
&lt;/h4&gt;&lt;p&gt;当系统的物理内存不够用的时候，就需要将物理内存中的一部分空间释放出来，以供当前运行的程序使用。那些被释放的空间可能来自一些很长时间没有什么操作的程序，这些被释放的空间会被临时保存到磁盘，等到那些程序要运行时，再从磁盘中恢复保存的数据到内存中。&lt;/p&gt;
&lt;p&gt;内存交换 就是把一块磁盘空间或者本地文件，当成内存来使用，它包含换出和换入两个过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;换出&lt;/strong&gt; ：把进程暂时不用的内存数据存储到磁盘中，并释放这些数据占用的内存&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;换入&lt;/strong&gt; ：在进程再次访问这些内存的时候，把它们从磁盘读到内存中来&lt;/li&gt;
&lt;/ul&gt;
&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;
  &lt;p&gt;当内存资源不足时，Linux 把某些页的内容转移至磁盘上的一块空间上，以释放内存空间。磁盘上的那块空间叫做交换空间(swap space)，而这一过程被称为交换。物理内存和交换空间的总容量就是虚拟内存的可用容量。&lt;/p&gt;
  &lt;/div&gt;

&lt;h4 id=&#34;分页管理的优缺点&#34;&gt;分页管理的优缺点
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;优点
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;解决了外部碎片的问题&lt;/strong&gt; ：由于页和页框大小固定，可以有效避免分段方式中段间未使用内存造成的外部碎片问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存管理灵活&lt;/strong&gt;：页表支持页的按需加载和交换（如虚拟内存机制），可以将不常用的页交换到磁盘上，从而扩大进程的可用内存空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内部碎片&lt;/strong&gt; ：如果程序使用的内存量不足一个页的大小，会造成页内未使用部分的浪费，即内部碎片问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;页表管理开销大&lt;/strong&gt; ：每个进程都需要维护自己的页表，页表的大小与逻辑地址空间成正比。多级页表虽然节省了内存，但增加了地址转换的复杂性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;页面置换算法&#34;&gt;页面置换算法
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;先进先出置换算法&lt;/strong&gt; ：基本思路是，优先淘汰最早进入内存的页面。FIFO 算法维护一个队列，新来的页面加入队尾，当发生页面置换时，队头的页面（即最早进入内存的页面）被移出。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最少使用页面置换算法（LFU，Least Frequently Used）&lt;/strong&gt; : 置换算法选择的是之前一段时间内使用最少的页面作为淘汰页。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时钟页面置换算法&lt;/strong&gt; ：LRU 的一种近似和实现简单的形式。它通过一个循环列表（类似时钟的指针）遍历页面，每个页面有一个使用位，当页面被访问时，使用位设置为 1。当需要页面置换时，时钟指针会顺时针移动，直到找到使用位为 0 的页面进行置换。这个过程类似于给每个页面一个二次机会。算法执行时，会先将使用位从 1 清零，如果该页面再次被访问，它的使用位再次被设置为 1。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最近最久未使用页面置换算法（LRU ）&lt;/strong&gt; ：LRU 算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间 T，当须淘汰一个页面时，选择现有页面中其 T 值最大的，即最近最久未使用的页面予以淘汰。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>网络层协议</title>
        <link>https://Tyritic.github.io/p/%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8D%8F%E8%AE%AE/</link>
        <pubDate>Tue, 25 Feb 2025 19:32:28 +0800</pubDate>
        
        <guid>https://Tyritic.github.io/p/%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8D%8F%E8%AE%AE/</guid>
        <description>&lt;h2 id=&#34;网际协议-ip地址&#34;&gt;网际协议-IP地址
&lt;/h2&gt;&lt;h3 id=&#34;作用&#34;&gt;作用
&lt;/h3&gt;&lt;h4 id=&#34;在tcpip参考模型的作用&#34;&gt;在TCP/IP参考模型的作用
&lt;/h4&gt;&lt;p&gt;IP协议 在 TCP/IP 参考模型中处于第三层，也就是&lt;strong&gt;网络层&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;网络层的主要作用是：&lt;strong&gt;实现主机与主机之间的通信，也叫点对点（end to end）通信。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;寻址&lt;/strong&gt; ：每个连接到网络的设备都有一个唯一的 IP 地址。IP 协议使用这些地址来标识数据包的源地址和目的地址，确保数据包能够准确地传输到目标设备。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由&lt;/strong&gt; ：IP 协议负责决定数据包在网络传输中的路径。比如说路由器使用路由表和 IP 地址信息来确定数据包的最佳传输路径。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分片和重组&lt;/strong&gt; ：当数据包过大无法在某个网络上传输时，IP 协议会将数据包分成更小的片段进行传输。接收端会根据头部信息将这些片段重新组装成完整的数据包。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;与数据链路层的关系&#34;&gt;与数据链路层的关系
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;MAC 的作用则是实现&lt;strong&gt;直连&lt;/strong&gt;的两个设备之间通信&lt;/li&gt;
&lt;li&gt;IP 则负责在&lt;strong&gt;没有直连&lt;/strong&gt;的两个网络之间进行通信传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;style type=&#34;text/css&#34;&gt;
   
  .notice {
    --title-color: #fff;
    --title-background-color: #6be;
    --content-color: #444;
    --content-background-color: #e7f2fa;
  }

  .notice.info {
    --title-background-color: #fb7;
    --content-background-color: #fec;
  }

  .notice.tip {
    --title-background-color: #5a5;
    --content-background-color: #efe;
  }

  .notice.warning {
    --title-background-color: #c33;
    --content-background-color: #fee;
  }

   
  @media (prefers-color-scheme: dark) {
    .notice {
      --title-color: #fff;
      --title-background-color: #069;
      --content-color: #ddd;
      --content-background-color: #023;
    }

    .notice.info {
      --title-background-color: #a50;
      --content-background-color: #420;
    }

    .notice.tip {
      --title-background-color: #363;
      --content-background-color: #121;
    }

    .notice.warning {
      --title-background-color: #800;
      --content-background-color: #400;
    }
  }

  body.dark .notice {
    --title-color: #fff;
    --title-background-color: #069;
    --content-color: #ddd;
    --content-background-color: #023;
  }

  body.dark .notice.info {
    --title-background-color: #a50;
    --content-background-color: #420;
  }

  body.dark .notice.tip {
    --title-background-color: #363;
    --content-background-color: #121;
  }

  body.dark .notice.warning {
    --title-background-color: #800;
    --content-background-color: #400;
  }

   
  .notice {
    width: 100%;  
    max-width: 600px;  
    padding: 18px;
    line-height: 24px;
    margin-bottom: 24px;
    border-radius: 4px;
    color: var(--content-color);
    background: var(--content-background-color);
  }

  .notice p:last-child {
    margin-bottom: 0;
  }

   
  .notice-title {
    margin: -18px -18px 12px;
    padding: 4px 18px;
    border-radius: 4px 4px 0 0;
    font-weight: 700;
    color: var(--title-color);
    background: var(--title-background-color);
  }

   
  .icon-notice {
    display: inline-flex;
    align-self: center;
    margin-right: 8px;
  }

  .icon-notice img,
  .icon-notice svg {
    height: 1em;
    width: 1em;
    fill: currentColor;
  }

  .icon-notice img,
  .icon-notice.baseline svg {
    top: 0.125em;
    position: relative;
  }
&lt;/style&gt;&lt;div
  class=&#34;notice ip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      
    &lt;/span&gt;&lt;/p&gt;&lt;p&gt;MAC地址&lt;/p&gt;
&lt;p&gt;MAC称为物理地址，也叫硬件地址，用来定义网络设备的位置，MAC地址是网卡出厂时设定的，是固定的（但可以通过在设备管理器中或注册表等方式修改，同一网段内的MAC地址必须唯一）。&lt;/p&gt;
&lt;p&gt;MAC地址采用十六进制数表示，长度是6个字节（48位），分为前24位和后24位。&lt;/p&gt;&lt;/div&gt;

&lt;h3 id=&#34;ip数据报&#34;&gt;IP数据报
&lt;/h3&gt;&lt;h4 id=&#34;ipv4报文格式&#34;&gt;IPV4报文格式
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8D%8F%E8%AE%AE/7f3a337b8d87d12aed267798c2552c7f.png&#34;
	width=&#34;814&#34;
	height=&#34;440&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;IP数据报格式&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;185&#34;
		data-flex-basis=&#34;444px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首部
&lt;ul&gt;
&lt;li&gt;版本号：指定IP协议版本&lt;/li&gt;
&lt;li&gt;首部长度：确定IP数据报中的载荷的实际开始位置&lt;/li&gt;
&lt;li&gt;服务类型：指定不同类型的IP数据报&lt;/li&gt;
&lt;li&gt;数据报长度&lt;/li&gt;
&lt;li&gt;标识：用于分片后重新组装数据报&lt;/li&gt;
&lt;li&gt;标志：决定是否进行分片&lt;/li&gt;
&lt;li&gt;片偏移：较长的IP报文在分片后，某片在原分组中的相对位置&lt;/li&gt;
&lt;li&gt;生存时间（TTL）：数据报在网络中的寿命。&lt;/li&gt;
&lt;li&gt;协议：占8位，协议字段指出此数据报携带的数据是使用何种协议&lt;/li&gt;
&lt;li&gt;首部检验和：帮助路由器检测收到的IP数据报中的比特错误&lt;/li&gt;
&lt;li&gt;源IP地址&lt;/li&gt;
&lt;li&gt;目的IP地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;载荷&lt;/li&gt;
&lt;/ul&gt;
&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;IPV6的改进&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;取消了首部校验和字段。&lt;/strong&gt; 因为在数据链路层和传输层都会校验，因此 IPv6 直接取消了 IP 的校验。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;取消了分片/重新组装相关字段。&lt;/strong&gt; 分片与重组是耗时的过程，IPv6 不允许在中间路由器进行分片与重组，这种操作只能在源与目标主机，这将大大提高了路由器转发的速度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;取消选项字段。&lt;/strong&gt; 选项字段不再是标准 IP 首部的一部分了，但它并没有消失，而是可能出现在 IPv6 首部中的「下一个首部」指出的位置上。删除该选项字段使的 IPv6 的首部成为固定长度的 &lt;code&gt;40&lt;/code&gt; 字节。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;h4 id=&#34;数据报分片&#34;&gt;数据报分片
&lt;/h4&gt;&lt;p&gt;通常将链路层帧可以承载的最大数据量称为MTU。当IP数据报长度大于MTU会进行数据报分片，并使用单独的链路层帧进行封装。然后端系统接收后会进行重新组装&lt;/p&gt;
&lt;h3 id=&#34;ip地址&#34;&gt;IP地址
&lt;/h3&gt;&lt;p&gt;在 TCP/IP 网络通信时，为了保证能正常通信，每个设备都需要配置正确的 IP 地址，否则无法实现正常的通信。&lt;/p&gt;
&lt;p&gt;IP 地址（IPv4 地址）由 &lt;code&gt;32&lt;/code&gt; 位正整数来表示，IP 地址在计算机是以二进制的方式处理的。&lt;/p&gt;
&lt;h4 id=&#34;ip地址的分类&#34;&gt;IP地址的分类
&lt;/h4&gt;$$
最大主机数=2^{主机号}-2
$$&lt;p&gt;
其中要去除两个特殊的IP地址，主机号全为 1 和 全为 0 地址&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8D%8F%E8%AE%AE/10.jpg&#34;
	width=&#34;963&#34;
	height=&#34;485&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;特殊IP地址&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;198&#34;
		data-flex-basis=&#34;476px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机号全为 1 指定某个网络下的所有主机，用于广播
&lt;ul&gt;
&lt;li&gt;广播地址用于在 &lt;strong&gt;同一个链路中相互连接的主机之间发送数据包&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主机号全为 0 指定某个网络&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;无分类ip地址cidr&#34;&gt;无分类IP地址CIDR
&lt;/h4&gt;&lt;p&gt;IP地址由 &lt;strong&gt;网络号和主机号&lt;/strong&gt; 构成&lt;/p&gt;
&lt;p&gt;表示形式 &lt;code&gt;a.b.c.d/x&lt;/code&gt;，其中 &lt;code&gt;/x&lt;/code&gt; 表示前 x 位属于&lt;strong&gt;网络号&lt;/strong&gt;， x 的范围是 &lt;code&gt;0 ~ 32&lt;/code&gt;，&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8D%8F%E8%AE%AE/15.jpg&#34;
	width=&#34;648&#34;
	height=&#34;837&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;CIDR地址&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;77&#34;
		data-flex-basis=&#34;185px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;子网掩码用于指示IP地址的网络部分。&lt;strong&gt;将子网掩码和 IP 地址按位计算 AND，就可得到网络号。&lt;/strong&gt; 两台主机要通信，首先要判断是否处于同一网段，即网络地址是否相同。&lt;/p&gt;
&lt;p&gt;如果相同，那么可以把数据包直接发送到目标主机，否则就需要路由网关将数据包转发送到目的地。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/IP/16.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;子网掩码&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;子网划分&#34;&gt;子网划分
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;子网划分实际上是将主机号分为两个部分：子网号和子网主机号&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8D%8F%E8%AE%AE/19.jpg&#34;
	width=&#34;804&#34;
	height=&#34;393&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;子网划分&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;204&#34;
		data-flex-basis=&#34;490px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;ip协议的相关应用&#34;&gt;IP协议的相关应用
&lt;/h2&gt;&lt;h3 id=&#34;arp协议&#34;&gt;ARP协议
&lt;/h3&gt;&lt;h4 id=&#34;作用-1&#34;&gt;作用
&lt;/h4&gt;&lt;p&gt;将 IP 地址转换为 MAC 地址，它工作在 &lt;strong&gt;网络层&lt;/strong&gt; 和 &lt;strong&gt;数据链路层&lt;/strong&gt; 之间，主要用于在局域网中确定一个特定 IP 地址对应的物理地址（MAC 地址）。因为最终需要找到 MAC 地址才能跟具体的设备通信。&lt;/p&gt;
&lt;h4 id=&#34;工作流程&#34;&gt;工作流程
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ARP 请求&lt;/strong&gt;：主机 A 需要发送数据包给主机 B，但只有主机 B 的 IP 地址，没有它的 MAC 地址。主机 A 发送一个 ARP 请求广播到网络。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ARP 响应&lt;/strong&gt;：当同个链路中的所有设备收到 ARP 请求时，会去拆开 ARP 请求包里的内容，如果 ARP 请求包中的目标 IP 地址与自己的 IP 地址一致，回复一个 ARP 响应，告知主机 A 自己的 MAC 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更新 ARP 表&lt;/strong&gt;：主机 A 将主机 B 的 IP 和 MAC 地址的映射关系保存到 ARP 表中，以便以后使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dhcp协议&#34;&gt;DHCP协议
&lt;/h3&gt;&lt;p&gt;DHCP全称为动态主机配置协议，通过配置DHCP协议保证给定主机每次连接得到相同的IP地址或者分配到临时的IP地址&lt;/p&gt;
&lt;h4 id=&#34;工作流程-1&#34;&gt;工作流程
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DHCP服务器发现&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;客户端首先发起 &lt;strong&gt;DHCP 发现报文（DHCP DISCOVER）&lt;/strong&gt; 的 IP 数据报，由于客户端没有 IP 地址，也不知道 DHCP 服务器的地址，所以使用的是 UDP &lt;strong&gt;广播&lt;/strong&gt; 通信，其使用的广播目的地址是 255.255.255.255（端口 67） 并且使用 0.0.0.0（端口 68） 作为源 IP 地址。DHCP 客户端将该 IP 数据报传递给链路层，链路层然后将帧广播到所有的网络中设备。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DHCP服务器提供&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;DHCP 服务器收到 DHCP 发现报文时，用 &lt;strong&gt;DHCP 提供报文（DHCP OFFER）&lt;/strong&gt; 向客户端做出响应。该报文仍然使用 IP 广播地址 255.255.255.255，该报文信息携带服务器提供可租约的 IP 地址、子网掩码、默认网关、DNS 服务器以及 &lt;strong&gt;IP 地址租用期&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DHCP请求&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;客户端收到一个或多个服务器的 DHCP 提供报文后，从中选择一个服务器，并向选中的服务器发送 &lt;strong&gt;DHCP 请求报文（DHCP REQUEST&lt;/strong&gt; 进行响应，回显配置的参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DHCP ACK&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;服务端用 &lt;em&gt;DHCP ACK 报文&lt;/em&gt;对 DHCP 请求报文进行响应，应答所要求的参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;再次租用&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;如果租约的 DHCP IP 地址快期后，客户端会向服务器发送 DHCP 请求报文：
&lt;ul&gt;
&lt;li&gt;服务器如果同意继续租用，则用 DHCP ACK 报文进行应答，客户端就会延长租期。&lt;/li&gt;
&lt;li&gt;服务器如果不同意继续租用，则用 DHCP NACK 报文，客户端就要停止使用租约的 IP 地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nat协议&#34;&gt;NAT协议
&lt;/h3&gt;&lt;p&gt;网络地址转换协议，将私有IP地址转换为公有IP地址&lt;/p&gt;
&lt;p&gt;NAT将IP地址和端口号一起转换，保证所有离开专有网络的设备具有相同的源IP地址，所有进入专有网络的报文具有相同的目的IP地址&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8D%8F%E8%AE%AE/39.jpg&#34;
	width=&#34;1541&#34;
	height=&#34;834&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;NAPT&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;184&#34;
		data-flex-basis=&#34;443px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;两个私有 IP 地址都被路由器转换 IP 地址为公有地址 120.229.175.121，但是以不同的端口号作为区分。&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>操作系统的进程管理和线程管理</title>
        <link>https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/</link>
        <pubDate>Thu, 13 Feb 2025 15:10:49 +0800</pubDate>
        
        <guid>https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/</guid>
        <description>&lt;h2 id=&#34;进程&#34;&gt;进程
&lt;/h2&gt;&lt;p&gt;在系统中正在运行的一个应用程序；程序一旦运行会被载入内存。进程是资源分配的最小单位。在操作系统中能同时运行多个进程；&lt;/p&gt;
&lt;p&gt;进程可以分成以下两类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户态进程&lt;/strong&gt; ：通常是应用程序的副本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内核态进程&lt;/strong&gt; ：内核本身的进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果用户态进程需要申请资源，比如内存，可以通过系统调用向内核申请。&lt;/p&gt;
&lt;p&gt;每个进程都有独立的内存空间，存放代码和数据段等，程序之间的切换会有较大的开销&lt;/p&gt;
&lt;h3 id=&#34;并发和并行&#34;&gt;并发和并行
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;并发：在一段时间内，多个任务都会被处理；但在某一时刻，只有一个任务在执行。
&lt;ul&gt;
&lt;li&gt;单核处理器做到的并发，其实是利用时间片的轮转，例如有两个进程 A 和 B，A 运行一个时间片之后，切换到 B，B 运行一个时间片之后又切换到 A。因为切换速度足够快，所以宏观上表现为在一段时间内能同时运行多个程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;并行：在同一时刻，有多个任务在执行。这个需要多核处理器才能完成，在微观上就能同时执行多条指令，不同的程序被放到不同的处理器上运行，这个是物理上的多个进程同时进行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/5-%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C.jpg&#34;
	width=&#34;672&#34;
	height=&#34;548&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;并发与并行&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;122&#34;
		data-flex-basis=&#34;294px&#34;
	
&gt;行&lt;/p&gt;
&lt;p&gt;进程之间是独立和隔离的，一个进程崩溃不会导致所有进程崩溃&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;进程隔离性&lt;/strong&gt;：每个进程都有自己独立的内存空间，当一个进程崩溃时，其内存空间会被操作系统回收，不会影响其他进程的内存空间。这种进程间的隔离性保证了一个进程崩溃不会直接影响其他进程的执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程独立性&lt;/strong&gt;：每个进程都是独立运行的，它们之间不会共享资源，如文件、网络连接等。因此，一个进程的崩溃通常不会对其他进程的资源产生影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进程的状态&#34;&gt;进程的状态
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建状态（&lt;em&gt;new&lt;/em&gt;）：进程正在被创建时的状态；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;就绪状态（&lt;em&gt;Ready&lt;/em&gt;）：进程处于可运行，进程获得了除了处理器之外的一切所需资源，一旦得到处理器资源(处理器分配的时间片)即可运行。由于其他进程处于运行状态而暂时停止运行；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行状态（&lt;em&gt;Running&lt;/em&gt;）：进程正在处理器上运行(单核 CPU 下任意时刻只有一个进程处于运行状态)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阻塞状态（&lt;em&gt;Blocked&lt;/em&gt;）：该进程正在等待某一事件发生（如等待输入/输出操作的完成）而暂时停止运行，这时，即使给它CPU控制权，它也无法运行；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结束状态（&lt;em&gt;Exit&lt;/em&gt;）：进程正在从系统中消失时的状态&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/8-%E8%BF%9B%E7%A8%8B%E4%BA%94%E4%B8%AA%E7%8A%B6%E6%80%81.jpg&#34;
	width=&#34;1007&#34;
	height=&#34;332&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;进程状态的变迁&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;303&#34;
		data-flex-basis=&#34;727px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;进程挂起&#34;&gt;进程挂起
&lt;/h4&gt;&lt;p&gt;如果有大量处于阻塞状态的进程，进程可能会占用着物理内存空间，出现浪费物理内存的行为。所以，在虚拟内存管理的操作系统中，通常会把阻塞状态的进程的物理内存空间换出到硬盘，等需要再次运行的时候，再从硬盘换入到物理内存。&lt;/p&gt;
&lt;p&gt;挂起状态用来描述 &lt;strong&gt;进程没有占用实际的物理内存空间的情况&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阻塞挂起状态：进程在外存（硬盘）并等待某个事件的出现&lt;/li&gt;
&lt;li&gt;就绪挂起状态：进程在外存（硬盘），但只要进入内存，即刻立刻运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;僵尸进程&#34;&gt;僵尸进程
&lt;/h4&gt;&lt;p&gt;僵尸进程是已完成且处于终止状态，但在进程表中却仍然存在的进程。（进程已经终止，但其父进程未对其进行回收）&lt;/p&gt;
&lt;p&gt;僵尸进程占用系统的进程表项，但不再消耗其他资源。&lt;/p&gt;
&lt;p&gt;僵尸进程一般发生有父子关系的进程中，一个子进程的进程描述符在子进程退出时不会释放，只有当父进程通过 wait() 或 waitpid() 获取了子进程信息后才会释放。如果子进程退出，而父进程并没有调用 wait() 或 waitpid()，那么子进程的进程描述符仍然保存在系统中。&lt;/p&gt;
&lt;h4 id=&#34;孤儿进程&#34;&gt;孤儿进程
&lt;/h4&gt;&lt;p&gt;父进程提前终止，子进程继续运行，这些子进程就成为孤儿进程。操作系统会将孤儿进程托管给&lt;code&gt;init&lt;/code&gt;进程（Linux系统中的PID为1的进程），由&lt;code&gt;init&lt;/code&gt;进程来收养并清理这些孤儿进程。&lt;/p&gt;
&lt;h3 id=&#34;进程控制块pcb&#34;&gt;进程控制块PCB
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;PCB 是进程存在的唯一标识&lt;/strong&gt; 。一个进程的存在，必然会有一个 PCB，如果进程消失了，那么 PCB 也会随之消失。&lt;/p&gt;
&lt;h4 id=&#34;pcb的结构&#34;&gt;PCB的结构
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;进程描述信息：&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程标识符：标识各个进程，每个进程都有一个并且唯一的标识符；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户标识符：进程归属的用户，用户标识符主要为共享和保护服务；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;进程控制和管理信息：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进程当前状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程优先级：进程抢占 CPU 时的优先级；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;资源分配清单：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有关内存地址空间或虚拟地址空间的信息&lt;/li&gt;
&lt;li&gt;所打开文件的列表和所使用的 I/O 设备信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CPU 相关信息：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU 中各个寄存器的值，当进程被切换时，CPU 的状态信息都会被保存在相应的 PCB 中，以便进程重新执行时，能从断点处继续执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pcb之间的组织&#34;&gt;PCB之间的组织
&lt;/h4&gt;&lt;p&gt;通常是通过 &lt;strong&gt;链表&lt;/strong&gt; 的方式进行组织。&lt;strong&gt;相同状态的进程会被链接在一起，组成各种队列&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;进程的控制&#34;&gt;进程的控制
&lt;/h3&gt;&lt;h4 id=&#34;创建进程&#34;&gt;创建进程
&lt;/h4&gt;&lt;p&gt;操作系统提供了 &lt;strong&gt;&lt;code&gt;fork&lt;/code&gt;&lt;/strong&gt; 指令，允许一个进程创建另一个进程，而且允许子进程继承父进程所拥有的资源。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87%E7%BC%96%E8%BE%91_20250313154646.jpg&#34;
	width=&#34;847&#34;
	height=&#34;824&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;fork进程&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;102&#34;
		data-flex-basis=&#34;246px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fork&lt;/code&gt;函数用于创建一个与当前进程一样的子进程，所创建的子进程将复制父进程的代码段、数据段、堆、栈等所有用户空间信息，在内核中操作系统会重新为其申请一个子进程执行的位置。但是会有自己的进程空间&lt;/p&gt;
&lt;p&gt;fork函数被调用一次但返回两次，两次返回的唯一区别是子进程中返回0而父进程中返回子进程ID。&lt;/p&gt;
&lt;style type=&#34;text/css&#34;&gt;
   
  .notice {
    --title-color: #fff;
    --title-background-color: #6be;
    --content-color: #444;
    --content-background-color: #e7f2fa;
  }

  .notice.info {
    --title-background-color: #fb7;
    --content-background-color: #fec;
  }

  .notice.tip {
    --title-background-color: #5a5;
    --content-background-color: #efe;
  }

  .notice.warning {
    --title-background-color: #c33;
    --content-background-color: #fee;
  }

   
  @media (prefers-color-scheme: dark) {
    .notice {
      --title-color: #fff;
      --title-background-color: #069;
      --content-color: #ddd;
      --content-background-color: #023;
    }

    .notice.info {
      --title-background-color: #a50;
      --content-background-color: #420;
    }

    .notice.tip {
      --title-background-color: #363;
      --content-background-color: #121;
    }

    .notice.warning {
      --title-background-color: #800;
      --content-background-color: #400;
    }
  }

  body.dark .notice {
    --title-color: #fff;
    --title-background-color: #069;
    --content-color: #ddd;
    --content-background-color: #023;
  }

  body.dark .notice.info {
    --title-background-color: #a50;
    --content-background-color: #420;
  }

  body.dark .notice.tip {
    --title-background-color: #363;
    --content-background-color: #121;
  }

  body.dark .notice.warning {
    --title-background-color: #800;
    --content-background-color: #400;
  }

   
  .notice {
    width: 100%;  
    max-width: 600px;  
    padding: 18px;
    line-height: 24px;
    margin-bottom: 24px;
    border-radius: 4px;
    color: var(--content-color);
    background: var(--content-background-color);
  }

  .notice p:last-child {
    margin-bottom: 0;
  }

   
  .notice-title {
    margin: -18px -18px 12px;
    padding: 4px 18px;
    border-radius: 4px 4px 0 0;
    font-weight: 700;
    color: var(--title-color);
    background: var(--title-background-color);
  }

   
  .icon-notice {
    display: inline-flex;
    align-self: center;
    margin-right: 8px;
  }

  .icon-notice img,
  .icon-notice svg {
    height: 1em;
    width: 1em;
    fill: currentColor;
  }

  .icon-notice img,
  .icon-notice.baseline svg {
    top: 0.125em;
    position: relative;
  }
&lt;/style&gt;&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;fork函数为什么被调用一次但是返回两次&lt;/p&gt;
&lt;p&gt;因为复制时会复制父进程的堆栈段，所以两个进程都停留在&lt;code&gt;fork&lt;/code&gt;函数中等待返回，因此会返回两次，一个是在父进程中返回，一次是在子进程中返回，两次返回值是不一样的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在父进程中将返回新建子进程的进程ID&lt;/li&gt;
&lt;li&gt;在子进程中将返回0&lt;/li&gt;
&lt;li&gt;若出现错误则返回一个负数&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;p&gt;fork的具体流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申请一个空白的 PCB，并向 PCB 中填写一些控制和管理进程的信息，比如进程的唯一标识等；&lt;/li&gt;
&lt;li&gt;为该进程分配运行时所必需的资源，比如内存资源；&lt;/li&gt;
&lt;li&gt;将 PCB 插入到就绪队列，等待被调度运行；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;终止进程&#34;&gt;终止进程
&lt;/h4&gt;&lt;p&gt;进程有以下三种结束方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正常结束&lt;/li&gt;
&lt;li&gt;异常结束&lt;/li&gt;
&lt;li&gt;外界干预（信号 &lt;code&gt;kill&lt;/code&gt; 掉）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当子进程被终止时，其在父进程处继承的资源应当还给父进程。而当父进程被终止时，该父进程的子进程就变为孤儿进程，会被 1 号进程收养，并由 1 号进程对它们完成状态收集工作。&lt;/p&gt;
&lt;p&gt;终止线程的过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查找需要终止的进程的 PCB；&lt;/li&gt;
&lt;li&gt;如果处于执行状态，则立即终止该进程的执行，然后将 CPU 资源分配给其他进程；&lt;/li&gt;
&lt;li&gt;如果其还有子进程，则应将该进程的子进程交给 1 号进程接管；&lt;/li&gt;
&lt;li&gt;将该进程所拥有的全部资源都归还给操作系统；&lt;/li&gt;
&lt;li&gt;将其从 PCB 所在队列中删除；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;阻塞线程&#34;&gt;阻塞线程
&lt;/h4&gt;&lt;p&gt;当进程需要等待某一事件完成时，它可以调用阻塞语句把自己阻塞等待。而一旦被阻塞等待，它只能由另一个进程唤醒。&lt;/p&gt;
&lt;p&gt;阻塞进程的过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找到将要被阻塞进程标识号对应的 PCB；&lt;/li&gt;
&lt;li&gt;如果该进程为运行状态，则保护其现场，将其状态转为阻塞状态，停止运行；&lt;/li&gt;
&lt;li&gt;将该 PCB 插入到阻塞队列中去；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;唤醒进程&#34;&gt;唤醒进程
&lt;/h4&gt;&lt;p&gt;进程只能被另一个进程唤醒，唤醒进程的过程如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在该事件的阻塞队列中找到相应进程的 PCB；&lt;/li&gt;
&lt;li&gt;将其从阻塞队列中移出，并置其状态为就绪状态；&lt;/li&gt;
&lt;li&gt;把该 PCB 插入到就绪队列中，等待调度程序调度；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进程的上下文切换&#34;&gt;进程的上下文切换
&lt;/h3&gt;&lt;h4 id=&#34;上下文切换的概念&#34;&gt;上下文切换的概念
&lt;/h4&gt;&lt;p&gt;上下文切换是一种将CPU资源从一个进程分配给另一个进程的机制。&lt;/p&gt;
&lt;p&gt;操作系统需要事先帮 CPU 设置好 &lt;strong&gt;CPU 寄存器和程序计数器&lt;/strong&gt;。CPU 寄存器和程序计数是 CPU 在运行任何任务前所必须依赖的环境，这就是CPU上下文&lt;/p&gt;
&lt;p&gt;CPU 上下文切换就是先把前一个任务的 CPU 上下文（CPU 寄存器和程序计数器）保存起来，然后加载新任务的上下文到这些寄存器和程序计数器，最后再跳转到程序计数器所指的新位置，运行新任务。&lt;/p&gt;
&lt;p&gt;系统内核会存储保持下来的上下文信息，当此任务再次被分配给 CPU 运行时，CPU 会重新加载这些上下文，这样就能保证任务原来的状态不受影响，让任务看起来还是连续运行。&lt;/p&gt;
&lt;h4 id=&#34;进程上下文切换过程&#34;&gt;进程上下文切换过程
&lt;/h4&gt;&lt;p&gt;进程是由内核管理和调度的，所以进程的切换只能发生在内核态。&lt;strong&gt;进程的上下文切换不仅包含了虚拟内存、栈、全局变量等用户空间的资源，还包括了内核堆栈、寄存器等内核空间的资源。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常，会把交换的信息保存在进程的 PCB，当要运行另外一个进程的时候，我们需要从这个进程的 PCB 取出上下文，然后恢复到 CPU 中，这使得这个进程可以继续执行&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/13-%E8%BF%9B%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2.jpg&#34;
	width=&#34;870&#34;
	height=&#34;191&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;进程上下文切换&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;455&#34;
		data-flex-basis=&#34;1093px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;进程上下文切换的场景&#34;&gt;进程上下文切换的场景
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU调度&lt;/strong&gt; ：CPU 时间被划分为一段段的时间片，这些时间片再被轮流分配给各个进程。这样，当某个进程的时间片耗尽了，进程就从运行状态变为就绪状态，系统从就绪队列选择另外一个进程运行；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统资源不足&lt;/strong&gt; ：进程在系统资源不足（比如内存不足）时，要等到资源满足后才可以运行，这个时候进程也会被挂起，并由系统调度其他进程运行；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程主动挂起&lt;/strong&gt; ：当进程通过睡眠函数 sleep 这样的方法将自己主动挂起时，自然也会重新调度；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高优先级进程运行&lt;/strong&gt; ：当有优先级更高的进程运行时，为了保证高优先级进程的运行，当前进程会被挂起，由高优先级进程来运行；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发生硬件中断&lt;/strong&gt; ：CPU 上的进程会被中断挂起，转而执行内核中的中断服务程序；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进程间通信&#34;&gt;进程间通信
&lt;/h3&gt;&lt;p&gt;每个进程各自有不同的用户地址空间，任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核，在内核中开辟一块缓冲区，进程1把数据从用户空间拷到内核缓冲区，进程2再从内核缓冲区把数据读走。&lt;/p&gt;
&lt;h4 id=&#34;命名管道匿名管道&#34;&gt;命名管道/匿名管道
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;匿名管道&lt;/strong&gt; ：匿名管道是一种单向通信方式，用于在父进程和子进程之间或者同一主机上的不同进程之间传递数据，数据从一端写入，从另一端读取&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命名管道&lt;/strong&gt; ：是匿名管道的改进版，支持无亲缘关系的进程之间的通信&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本质上管道是 &lt;strong&gt;内核里面的一串缓存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于匿名管道来说，匿名管道没有实体，不存在管道文件，只能通过父进程和子进程的文件描述符来进行通信&lt;/p&gt;
&lt;p&gt;对于命名管道来说，提前创建了一个类型为管道的设备文件，在进程里只要使用这个设备文件，就可以相互通信。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/8-%E7%AE%A1%E9%81%93-pipe-shell.jpg&#34;
	width=&#34;1307&#34;
	height=&#34;1037&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;命名管道&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;126&#34;
		data-flex-basis=&#34;302px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;共享内存&#34;&gt;共享内存
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;共享内存的机制，就是拿出一块虚拟地址空间来，映射到相同的物理内存中&lt;/strong&gt; 。这样这个进程写入的东西对于另外一个进程是可见的，不需要经过数据的拷贝和传输，大大提高了进程间通信的速度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/9-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98.jpg&#34;
	width=&#34;714&#34;
	height=&#34;609&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;共享内存&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;117&#34;
		data-flex-basis=&#34;281px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;消息队列&#34;&gt;消息队列
&lt;/h4&gt;&lt;p&gt;消息队列的通信模式适用于频繁地进行信息传输。比如，A 进程要给 B 进程发送消息，A 进程把数据放在对应的消息队列后就可以正常返回了，B 进程需要的时候再去读取数据就可以了。同理，B 进程要给 A 进程发送消息也是如此。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;消息队列是保存在内核中的消息链表&lt;/strong&gt; ，消息队列生命周期随内核，如果没有释放消息队列或者没有关闭操作系统，消息队列会一直存在&lt;/p&gt;
&lt;p&gt;消息队列具有以下缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;消息队列不适合比较大数据的传输&lt;/strong&gt; ：因为在内核中每个消息体都有一个最大长度的限制&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息队列通信过程中，存在用户态与内核态之间的数据拷贝开销&lt;/strong&gt; ：因为进程写入数据到内核中的消息队列时，会发生从用户态拷贝数据到内核态的过程，同理另一进程读取内核中的消息数据时，会发生从内核态拷贝数据到用户态的过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;信号&#34;&gt;信号
&lt;/h4&gt;&lt;p&gt;信号是一种 &lt;strong&gt;异步&lt;/strong&gt; 的通信方式，用于通知目标进程发生了某个事件。信号常用于进程之间发送中断或终止命令。信号可以在应用进程和内核之间直接交互，内核也可以利用信号来通知用户空间的进程发生了哪些系统事件&lt;/p&gt;
&lt;h4 id=&#34;套接字&#34;&gt;套接字
&lt;/h4&gt;&lt;p&gt;套接字提供网络通信的端点，可以让不同机器上运行的进程之间进行双向通信。但是套接字实际上不仅用于不同的主机进程间通信，还可以用于本地主机进程间通信。&lt;/p&gt;
&lt;h4 id=&#34;信号量&#34;&gt;信号量
&lt;/h4&gt;&lt;p&gt;进程间通信处理同步互斥的机制。是在多线程环境下使用的一种设施，它负责协调各个线程，以保证它们能够正确，合理的使用公共资源。&lt;/p&gt;
&lt;p&gt;对于信号量有两种操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;P 操作&lt;/strong&gt;，这个操作会把信号量减去 1，相减后如果信号量 &amp;lt; 0，则表明资源已被占用，进程需阻塞等待；相减后如果信号量 &amp;gt;= 0，则表明还有资源可使用，进程可正常继续执行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;V 操作&lt;/strong&gt;，这个操作会把信号量加上 1，相加后如果信号量 &amp;lt;= 0，则表明当前有阻塞中的进程，于是会将该进程唤醒运行；相加后如果信号量 &amp;gt; 0，则表明当前没有阻塞中的进程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;信号量有两种类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;互斥信号量&lt;/strong&gt; ：信号初始化为 &lt;code&gt;1&lt;/code&gt;它可以保证共享内存在任何时刻只有一个进程在访问，这就很好的保护了共享内存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步信号量&lt;/strong&gt; ：保证进程之间的顺序执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进程调度&#34;&gt;进程调度
&lt;/h3&gt;&lt;h4 id=&#34;调度时机&#34;&gt;调度时机
&lt;/h4&gt;&lt;p&gt;以下状态的变化都会触发操作系统的调度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从就绪态 -&amp;gt; 运行态：当进程被创建时，会进入到就绪队列，操作系统会从就绪队列选择一个进程运行；&lt;/li&gt;
&lt;li&gt;从运行态 -&amp;gt; 阻塞态：当进程发生 I/O 事件而阻塞时，操作系统必须选择另外一个进程运行；&lt;/li&gt;
&lt;li&gt;从运行态 -&amp;gt; 结束态：当进程退出结束后，操作系统得从就绪队列选择另外一个进程运行；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;调度算法&#34;&gt;调度算法
&lt;/h4&gt;&lt;p&gt;调度算法分为以下两类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;非抢占式调度算法&lt;/strong&gt; ：挑选一个进程，然后让该进程运行直到被阻塞，或者直到该进程退出，才会调用另外一个进程，也就是说不会理时钟中断这个事情。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抢占式调度算法&lt;/strong&gt; ：挑选一个进程，然后让该进程只运行某段时间，如果在该时段结束时，该进程仍然在运行时，则会把它挂起，接着调度程序从就绪队列挑选另外一个进程。这种抢占式调度处理，需要在时间间隔的末端发生 &lt;strong&gt;时钟中断&lt;/strong&gt; ，以便把 CPU 控制返回给调度程序进行调度，也就是常说的 &lt;strong&gt;时间片机制&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于单核CPU有以下常见的调度算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;先来先服务（FCFS, First-Come, First-Served）&lt;/strong&gt; ：按照进程到达的顺序进行调度，每次从就绪队列选择最先进入队列的进程，然后一直运行，直到进程退出或被阻塞，才会继续从队列中选择第一个进程接着运行。
&lt;ul&gt;
&lt;li&gt;适用于 CPU 繁忙型作业的系统，而不适用于 I/O 繁忙型作业的系统&lt;/li&gt;
&lt;li&gt;可能造成“长任务”拖延其他任务的执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;短作业优先(SJF，Shortest Job First)&lt;/strong&gt;  : 从就绪队列中选出一个估计运行时间最短的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。
&lt;ul&gt;
&lt;li&gt;很难准确预知进程的执行时间，并且可能因为短作业一直在执行，导致长作业持续被推迟执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最高响应比优先（HRRN, Highest Response Ratio Next）&lt;/strong&gt; ：通过计算响应比来决定下一个被调度的进程 ，把响应比优先级最高的进程投入运行，平衡长短任务的等待时间，防止短任务过多导致长任务饥饿。响应比的公式为： &lt;strong&gt;(等待时间 + 服务时间) / 服务时间&lt;/strong&gt; 其中，&lt;strong&gt;等待时间&lt;/strong&gt;是进程在就绪队列中等待的时间，&lt;strong&gt;服务时间&lt;/strong&gt;是进程预计需要的执行时间
&lt;ul&gt;
&lt;li&gt;对于短任务，其服务时间小，初始响应比就较高，容易被优先调度。&lt;/li&gt;
&lt;li&gt;对于长任务，随着等待时间的增加，响应比逐渐提升，最终也会被调度，避免了长任务的饥饿。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间片轮转（RR, Round Robin）&lt;/strong&gt; ：为每个进程分配固定的时间片，时间片结束后调度下一个进程，如果时间片用完，进程还在运行，那么将会把此进程从 CPU 释放出来，并把 CPU 分配给另外一个进程；如果该进程在时间片结束前阻塞或结束，则 CPU 立即进行切换；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多级反馈队列调度（MLFQ, Multilevel Feedback Queue）&lt;/strong&gt;：通过将进程放入不同优先级的队列，实现灵活的调度机制。优先级较高的进程先被调度，随着执行时间增加，进程可能被降至低优先级队列。适合多任务、多类型的操作系统。
&lt;ul&gt;
&lt;li&gt;设置了多个队列，赋予每个队列不同的优先级，每个 &lt;strong&gt;队列优先级从高到低&lt;/strong&gt; ，同时 &lt;strong&gt;优先级越高时间片越短&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;新的进程会被放入到第一级队列的末尾，按先来先服务的原则排队等待被调度，如果在第一级队列规定的时间片没运行完成，则将其转入到第二级队列的末尾，以此类推，直至完成&lt;/li&gt;
&lt;li&gt;当较高优先级的队列为空，才调度较低优先级的队列中的进程运行。如果进程运行时，有新进程进入较高优先级的队列，则停止当前运行的进程并将其移入到原队列末尾，接着让较高优先级的进程运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线程&#34;&gt;线程
&lt;/h2&gt;&lt;h3 id=&#34;线程的定义&#34;&gt;线程的定义
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;线程（Thread）&lt;/strong&gt; 可以被视为轻量级进程，是进程当中的一条执行流程，任务调度和执行的基本单位。线程的生命周期由进程控制，进程终止时，其所有线程也会终止。多个线程可以在同一个进程中同时执行，并且共享进程的资源比如内存空间、文件句柄、网络连接等。但每个线程各自都有一套独立的寄存器和栈，这样可以确保线程的控制流是相对独立的。&lt;/p&gt;
&lt;h3 id=&#34;线程的优缺点和存在意义&#34;&gt;线程的优缺点和存在意义
&lt;/h3&gt;&lt;p&gt;线程具有以下优缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个进程中可以同时存在多个线程；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;各个线程之间可以并发执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;各个线程之间可以共享地址空间和文件等资源&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当进程中的一个线程崩溃时，可能影响其所属进程的所有线程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程的存在意义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程切换是一个开销很大的操作，线程切换的成本较低。&lt;/li&gt;
&lt;li&gt;线程更轻量，一个进程可以创建多个线程。&lt;/li&gt;
&lt;li&gt;多个线程可以并发处理不同的任务，更有效地利用了多处理器和多核计算机。而进程只能在一个时间干一件事，如果在执行过程中遇到阻塞问题比如 IO 阻塞就会挂起直到结果返回。&lt;/li&gt;
&lt;li&gt;同一进程内的线程共享内存和文件，因此它们之间相互通信无须调用内核。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;进程和线程的区别&#34;&gt;进程和线程的区别
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;本质区别&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;进程是操作系统资源分配的基本单位&lt;/li&gt;
&lt;li&gt;线程是任务调度和执行的基本单位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;切换开销&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;每个进程都有独立的代码和数据空间（程序上下文），对于进程之间的切换，切换的时候要把页表给切换掉，而页表的切换过程开销是比较大的&lt;/li&gt;
&lt;li&gt;线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），同一个进程的线程都具有同一个页表，那么在切换的时候不需要切换页表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;稳定性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;进程中某个线程如果崩溃了可能会影响所属进程的其他进程&lt;/li&gt;
&lt;li&gt;进程中的子进程崩溃，并不会影响其他进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通信方式&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;因为各自独立的内存空间，进程间通信（IPC）较为复杂，需要使用管道、消息队列、共享内存、套接字等方式&lt;/li&gt;
&lt;li&gt;同一进程内的线程共享内存空间，因此线程直接读写内存即可，但注意需要使用同步机制避免数据错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;线程的上下文切换&#34;&gt;线程的上下文切换
&lt;/h3&gt;&lt;p&gt;线程切换是指将 CPU 的控制权从一个线程转移到另一个线程的过程。与进程切换相比，线程切换的开销较小，因为同一进程内的线程共享相同的地址空间和资源。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保存当前线程的上下文（如 CPU 寄存器、栈指针等）到线程控制块（TCB）中&lt;/li&gt;
&lt;li&gt;更新当前线程的状态（如就绪、阻塞等）。&lt;/li&gt;
&lt;li&gt;选择下一个要执行的线程，更新调度信息。&lt;/li&gt;
&lt;li&gt;恢复下一个线程的上下文，恢复 CPU 寄存器、栈指针、程序计数器等信息，确保线程能够从上次中断的地方继续执行，开始执行其任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;线程控制块 TCB&lt;/p&gt;
&lt;p&gt;类似于进程控制块PCB，TCB是操作系统用来管理线程的一个数据结构，它包含了与线程执行相关的所有必要信息，确保线程能够在系统中被正确调度和执行。每个线程都有一个对应的 TCB，操作系统通过 TCB 来管理和调度线程的执行。&lt;/p&gt;
&lt;p&gt;TCB的主要内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;线程状态&lt;/strong&gt;：操作系统通过线程状态来判断线程是否可以被执行或者需要被挂起。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;程序计数器&lt;/strong&gt; ：程序计数器保存线程当前执行指令的地址，标识线程的执行位置。线程切换时，程序计数器的值需要被保存和恢复。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寄存器内容&lt;/strong&gt; ：线程的寄存器值（如通用寄存器、栈指针等）需要在上下文切换时保存和恢复。它们包含了线程执行期间的局部变量、函数调用的返回地址等信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程栈指针（Stack Pointer, SP）&lt;/strong&gt; ：每个线程都有一个栈，用于存储函数调用信息（如局部变量、返回地址等）。栈指针指向当前栈顶，线程切换时，栈指针需要被保存和恢复。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程优先级（Thread Priority）&lt;/strong&gt; ：操作系统通常根据线程的优先级来决定哪个线程应该被调度执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程标识符（Thread ID）&lt;/strong&gt; ：每个线程都有一个唯一的标识符（线程ID），操作系统通过它来区分不同的线程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程的调度信息&lt;/strong&gt; ：包括线程的调度策略、时间片（如果采用时间片轮转调度）、期望的调度器等。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;h3 id=&#34;线程的实现&#34;&gt;线程的实现
&lt;/h3&gt;&lt;h4 id=&#34;用户线程&#34;&gt;用户线程
&lt;/h4&gt;&lt;p&gt;用户线程是在用户空间实现的线程，不是由内核管理的线程，是由用户态的线程库来完成线程的管理。操作系统内核并不知道它的存在，它完全是在用户空间中创建。所以 &lt;strong&gt;用户线程的整个线程管理和调度，操作系统是不直接参与的，而是由用户级线程库函数来完成线程的管理，包括线程的创建、终止、同步和调度等。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用户线程的优缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;管理开销小：创建、销毁不需要系统调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换成本低：用户空间程序可以自己维护，不需要走操作系统调度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与内核协作成本高：比如这种线程完全是用户空间程序在管理，当它进行 I/O 的时候，无法利用到内核的优势，需要频繁进行用户态到内核态的切换。&lt;/li&gt;
&lt;li&gt;由于操作系统不参与线程的调度，如果一个线程发起了系统调用而阻塞，那进程所包含的用户线程都不能执行了。&lt;/li&gt;
&lt;li&gt;当一个线程开始运行后，除非它主动地交出 CPU 的使用权，否则它所在的进程当中的其他线程无法运行，因为用户态的线程没法打断当前运行中的线程，它没有这个特权，只有操作系统才有，但是用户线程不是由操作系统管理的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;内核线程&#34;&gt;内核线程
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;内核线程是由操作系统管理的，线程对应的 TCB 是放在操作系统里的，这样线程的创建、终止和管理都是由操作系统负责。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;优缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在一个进程当中，如果某个内核线程发起系统调用而被阻塞，并不会影响其他内核线程的运行；&lt;/li&gt;
&lt;li&gt;分配给线程，多线程的进程获得更多的 CPU 运行时间；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在支持内核线程的操作系统中，由内核来维护进程和线程的上下文信息，如 PCB 和 TCB；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程的创建、终止和切换都是通过系统调用的方式来进行，因此对于系统来说，系统开销比较大；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;线程的同步机制&#34;&gt;线程的同步机制
&lt;/h2&gt;&lt;p&gt;竞态条件：指当多个线程同时访问和操作同一块数据时，最终结果依赖于线程的执行顺序，这可能导致数据的不一致性。&lt;/p&gt;
&lt;p&gt;临界区：对共享资源访问的程序片段，我们希望这段代码是互斥的，可以保证在某个时刻只能被一个线程执行，也就是说一个线程在临界区执行时，其它线程应该被阻止进入临界区。&lt;/p&gt;
&lt;h3 id=&#34;锁机制&#34;&gt;锁机制
&lt;/h3&gt;&lt;h4 id=&#34;互斥锁&#34;&gt;互斥锁
&lt;/h4&gt;&lt;p&gt;使⽤加锁操作和解锁操作可以解决并发线程/进程的互斥问题。&lt;/p&gt;
&lt;p&gt;任何想进⼊临界区的线程，必须先执⾏加锁操作。若加锁操作顺利通过，则线程可进⼊临界区；在完成对临界资源的访问后再执⾏解锁操作，以释放该临界资源。&lt;/p&gt;
&lt;p&gt;锁有以下两类实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自旋锁：当一个线程试图获取锁时，如果该锁已经被其他线程持有，当前线程不会立即进入休眠或阻塞，而是不断地检查锁的状态，直到该锁可用为止。这个过程被称为忙等待（busy waiting），因为线程在等待锁时仍然占用 CPU 资源，处于活跃状态。优点是避免了线程的上下文切换。&lt;/li&gt;
&lt;li&gt;非自旋锁：指当一个线程尝试获取锁时，如果锁已经被其他线程持有，当前线程不会忙等待，而是主动让出 CPU，进入阻塞状态或休眠状态，等待锁释放。当锁被释放时，线程被唤醒并重新尝试获取锁。这类锁的主要目的是避免忙等待带来的 CPU 资源浪费。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;死锁的发生条件&#34;&gt;死锁的发生条件
&lt;/h4&gt;&lt;p&gt;当两个线程为了保护两个不同的共享资源而使用了两个互斥锁，那么这两个互斥锁应用不当的时候，可能会造成 &lt;strong&gt;两个线程都在等待对方释放锁&lt;/strong&gt; ，在没有外力的作用下，这些线程会一直相互等待，就没办法继续运行，这种情况就是发生了 &lt;strong&gt;死锁&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;死锁的发生条件如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;互斥条件&lt;/strong&gt; ：多个线程不能同时使用同一个资源，如果另一进程申请该资源，那么必须等待直到该资源被释放为止。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;等待占有条件&lt;/strong&gt; ：一个进程已经持有了至少一个资源，同时还在等待获取其他被占用的资源。在此期间，该进程不会释放已经持有的资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不可剥夺条件&lt;/strong&gt; ：当线程已经持有了资源 ，在自己使用完之前不能被其他线程获取&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;环路等待条件&lt;/strong&gt; ：在死锁发生的时候，两个线程获取资源的顺序构成了环形链&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;避免死锁的方法&#34;&gt;避免死锁的方法
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;破坏停等条件&lt;/strong&gt; ：一个线程一次请求其所需要的所有资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;破坏环路等待条件&lt;/strong&gt; ：可以靠按序申请资源来预防。所谓按序申请，是指资源是有线性顺序的，申请的时候可以先申请资源序号小的，再申请资源序号大的，这样线性化后就不存在环路了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;破坏不可剥夺条件&lt;/strong&gt;：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源分配时使用银行家算法检测死锁&lt;/strong&gt; ：在 &lt;strong&gt;分配给进程资源前，首先判断这个进程的安全性&lt;/strong&gt; ，也就是预执行，判断分配后是否产生死锁现象。如果系统当前资源能满足其执行，则尝试分配，如果不满足则让该进程等待。通过不断检查剩余可用资源是否满足某个进程的最大需求，如果可以则加入安全序列，并把该进程当前持有的资源回收；不断重复这个过程，看最后能否实现让所有进程都加入安全序列&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>操作系统的结构和主要功能</title>
        <link>https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%93%E6%9E%84%E5%92%8C%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD/</link>
        <pubDate>Wed, 12 Feb 2025 20:36:54 +0800</pubDate>
        
        <guid>https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%93%E6%9E%84%E5%92%8C%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD/</guid>
        <description>&lt;h2 id=&#34;操作系统的主要功能&#34;&gt;操作系统的主要功能
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;负责创建和终止进程。进程是正在运行的程序实例，每个进程都有自己的地址空间和资源。&lt;/li&gt;
&lt;li&gt;负责为进程分配资源，比如说内存，并在进程终止时回收内存。&lt;/li&gt;
&lt;li&gt;提供创建、删除、读写文件的功能，并组织文件的存储结构，比如说目录。&lt;/li&gt;
&lt;li&gt;通过设备驱动程序控制和管理计算机的硬件设备，如键盘、鼠标、打印机等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;操作系统内核&#34;&gt;操作系统内核
&lt;/h2&gt;&lt;p&gt;计算机是由各种外部硬件设备组成的，比如内存、cpu、硬盘等，&lt;strong&gt;内核作为应用连接硬件设备的桥梁&lt;/strong&gt; ，应用程序只需关心与内核交互，不用关心硬件的细节。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%93%E6%9E%84%E5%92%8C%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD/Kernel_Layout.png&#34;
	width=&#34;1280&#34;
	height=&#34;1011&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;内核&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;126&#34;
		data-flex-basis=&#34;303px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;操作系统内核具有很高的权限&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;进程调度&lt;/strong&gt; ：管理进程、线程，决定哪个进程、线程使用 CPU&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内存管理&lt;/strong&gt; ：管理内存，决定内存的分配和回收&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;硬件通信&lt;/strong&gt; ：管理硬件设备，为进程与硬件设备之间提供通信能力&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统调用&lt;/strong&gt; ：提供系统调用，如果应用程序要运行更高权限运行的服务，那么就需要有系统调用，它是用户程序与操作系统之间的接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;style type=&#34;text/css&#34;&gt;
   
  .notice {
    --title-color: #fff;
    --title-background-color: #6be;
    --content-color: #444;
    --content-background-color: #e7f2fa;
  }

  .notice.info {
    --title-background-color: #fb7;
    --content-background-color: #fec;
  }

  .notice.tip {
    --title-background-color: #5a5;
    --content-background-color: #efe;
  }

  .notice.warning {
    --title-background-color: #c33;
    --content-background-color: #fee;
  }

   
  @media (prefers-color-scheme: dark) {
    .notice {
      --title-color: #fff;
      --title-background-color: #069;
      --content-color: #ddd;
      --content-background-color: #023;
    }

    .notice.info {
      --title-background-color: #a50;
      --content-background-color: #420;
    }

    .notice.tip {
      --title-background-color: #363;
      --content-background-color: #121;
    }

    .notice.warning {
      --title-background-color: #800;
      --content-background-color: #400;
    }
  }

  body.dark .notice {
    --title-color: #fff;
    --title-background-color: #069;
    --content-color: #ddd;
    --content-background-color: #023;
  }

  body.dark .notice.info {
    --title-background-color: #a50;
    --content-background-color: #420;
  }

  body.dark .notice.tip {
    --title-background-color: #363;
    --content-background-color: #121;
  }

  body.dark .notice.warning {
    --title-background-color: #800;
    --content-background-color: #400;
  }

   
  .notice {
    width: 100%;  
    max-width: 600px;  
    padding: 18px;
    line-height: 24px;
    margin-bottom: 24px;
    border-radius: 4px;
    color: var(--content-color);
    background: var(--content-background-color);
  }

  .notice p:last-child {
    margin-bottom: 0;
  }

   
  .notice-title {
    margin: -18px -18px 12px;
    padding: 4px 18px;
    border-radius: 4px 4px 0 0;
    font-weight: 700;
    color: var(--title-color);
    background: var(--title-background-color);
  }

   
  .icon-notice {
    display: inline-flex;
    align-self: center;
    margin-right: 8px;
  }

  .icon-notice img,
  .icon-notice svg {
    height: 1em;
    width: 1em;
    fill: currentColor;
  }

  .icon-notice img,
  .icon-notice.baseline svg {
    top: 0.125em;
    position: relative;
  }
&lt;/style&gt;&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;微内核和宏内核&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;微内核&lt;/strong&gt; ：尽量将大部分操作系统功能移至用户态，仅保留最基础的功能（如进程间通信、内存管理）在内核态中。优点是系统更稳定、模块化，但切换频繁，性能不如宏内核。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;宏内核&lt;/strong&gt; ：大部分操作系统服务在内核态中运行，包括文件系统、驱动程序等。优点是性能高，因为减少了用户态与内核态之间的切换，但可能增加系统的复杂性和维护难度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混合内核&lt;/strong&gt; ：是宏内核和微内核的结合体，内核中抽象出了微内核的概念，也就是内核中会有一个小型的内核，其他模块就在这个基础上搭建，整个内核是个完整的程序；&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;h2 id=&#34;内核态和用户态&#34;&gt;内核态和用户态
&lt;/h2&gt;&lt;p&gt;内核具有很高的权限，可以控制 cpu、内存、硬盘等硬件，而应用程序具有的权限很小，因此大多数操作系统，把内存分成了两个区域&lt;/p&gt;
&lt;h3 id=&#34;定义&#34;&gt;定义
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;内核空间：这个内存空间只有内核程序可以访问，内核态是操作系统内核运行的模式，具有最高的权限，可以直接访问硬件资源和执行各种特权操作（如内存管理、进程调度）。&lt;/li&gt;
&lt;li&gt;用户空间：这个内存空间专门给应用程序使用，应用程序在用户态下运行，权限较低，不能直接访问硬件或进行特权操作。应用程序需要通过系统调用与内核进行通信，由内核代为执行敏感操作。即使程序出现问题也不会影响操作系统的稳定性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;切换机制&#34;&gt;切换机制
&lt;/h3&gt;&lt;p&gt;大部分的状态切换出现在用户程序调用系统调用的时候，当应用程序执行系统调用时，CPU 将从用户态切换到内核态，进入内核空间执行相应的内核代码，然后再切换回用户态。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%93%E6%9E%84%E5%92%8C%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD/systemcall.png&#34;
	width=&#34;1053&#34;
	height=&#34;332&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;内核态和用户态的切换&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;317&#34;
		data-flex-basis=&#34;761px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;内核程序执行在内核态，用户程序执行在用户态。当应用程序使用系统调用时，会产生一个中断。发生中断后， CPU 会中断当前在执行的用户程序，转而跳转到中断处理程序，也就是开始执行内核程序。内核处理完后，主动触发中断，把 CPU 执行权限交回给用户程序，回到用户态继续工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统调用&lt;/strong&gt;：用户态进程 &lt;strong&gt;主动&lt;/strong&gt; 要求切换到内核态的一种方式，主要是为了使用内核态才能做的事情比如读取磁盘资源。系统调用的机制其核心还是使用了操作系统为用户特别开放的一个中断来实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中断&lt;/strong&gt;：当外围设备完成用户请求的操作后，会向 CPU 发出相应的中断信号，这时 CPU 会暂停执行下一条即将要执行的指令转而去执行与中断信号对应的处理程序，如果先前执行的指令是用户态下的程序，那么这个转换的过程自然也就发生了由用户态到内核态的切换。比如硬盘读写操作完成，系统会切换到硬盘读写的中断处理程序中执行后续操作等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异常&lt;/strong&gt;：当 CPU 在执行运行在用户态下的程序时，发生了某些事先不可知的异常，这时会触发由当前运行进程切换到处理此异常的内核相关程序中，也就转到了内核态，比如缺页异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在用户态和内核态之间切换时，操作系统会执行 &lt;strong&gt;上下文切换&lt;/strong&gt; ，包括保存当前进程的寄存器、状态和堆栈等信息，并加载内核态的状态以处理系统调用。上下文切换的成本较高，所以优化系统性能时，需要减少不必要的系统调用和态切换。&lt;/p&gt;
&lt;h3 id=&#34;内核态和用户态的存在原因&#34;&gt;内核态和用户态的存在原因
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;：用户态和内核态的划分确保了普通应用程序无法直接访问硬件资源或执行敏感操作，避免了程序或用户恶意操作对系统核心的破坏。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;稳定性&lt;/strong&gt;：通过在内核态中运行关键系统服务（如内存管理、文件系统、设备驱动等），操作系统可以对资源进行集中管理和保护。某个应用程序崩溃，只会影响用户态中的进程，不会影响到整个系统。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;访问控制&lt;/strong&gt;：通过设置不同的权限级别，操作系统能够更好地控制对资源的访问。只有在内核态下，操作系统才有权对硬件资源进行操作，而用户态程序必须通过系统调用请求内核服务，这种设计确保了对系统资源的统一管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统调用&#34;&gt;系统调用
&lt;/h2&gt;&lt;p&gt;系统调用提供了调用操作系统提供的内核态级别的子功能。凡是与系统态级别的资源有关的操作（如文件管理、进程控制、内存管理等)，都必须通过系统调用方式向操作系统提出服务请求，并由操作系统代为完成。&lt;/p&gt;
&lt;p&gt;系统调用过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户态的程序发起系统调用，因为系统调用中涉及一些特权指令（只能由操作系统内核态执行的指令），用户态程序权限不足，因此会中断执行，也就是 Trap（Trap 是一种中断）。&lt;/li&gt;
&lt;li&gt;发生中断后，当前 CPU 执行的程序会中断，跳转到中断处理程序。内核程序开始执行，也就是开始处理系统调用。&lt;/li&gt;
&lt;li&gt;内核处理完成后，主动触发 Trap，这样会再次发生中断，切换回用户态工作。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>操作系统的硬件结构</title>
        <link>https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A1%AC%E4%BB%B6%E7%BB%93%E6%9E%84/</link>
        <pubDate>Wed, 12 Feb 2025 18:42:06 +0800</pubDate>
        
        <guid>https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A1%AC%E4%BB%B6%E7%BB%93%E6%9E%84/</guid>
        <description>&lt;h2 id=&#34;冯诺依曼体系&#34;&gt;冯诺依曼体系
&lt;/h2&gt;&lt;p&gt;现代计算机模型是基于-&lt;strong&gt;冯诺依曼计算机模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;计算机在运行时，先从内存中取出第一条指令，通过控制器的译码，按指令的要求，从存储器中取出数据进行指定的运算和逻辑操作等加工，然后再按地址把结果送到内存中去，接下来，再取出第二条指令，在控制器的指挥下完成规定操作，依此进行下去。直至遇到停止指令&lt;/p&gt;
&lt;p&gt;程序与数据一样存贮，按程序编排的顺序，一步一步地取出指令，自动地完成指令规定的操作是计算机最基本的工作模型&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A1%AC%E4%BB%B6%E7%BB%93%E6%9E%84/Von_Neumann_architecture.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;操作系统的结构&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;计算机基本结构为 5 个部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;运算器&lt;/strong&gt; ：对数据进行各种算术运算和逻辑运算，即对数据进行加工处理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制器&lt;/strong&gt; ：是整个计算机的中枢神经，其功能是对程序规定的控制信息进行解释，根据其要求进行控制，调度程序、数据、地址，协调计算机各部分工作及内存与外设的访问等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储器&lt;/strong&gt; ：存储程序、数据和各种信号、命令等信息，并在需要时提供这些信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入设备&lt;/strong&gt; ：将程序、原始数据、文字、字符、控制命令或现场采集的数据等信息输入到计算机&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输出设备&lt;/strong&gt; ：它把计算机的中间结果或最后结果、机内的各种数据符号及文字或各种控制信号等信息输出出来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A1%AC%E4%BB%B6%E7%BB%93%E6%9E%84/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E6%A8%A1%E5%9E%8B.png&#34;
	width=&#34;613&#34;
	height=&#34;271&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;总线通信&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;226&#34;
		data-flex-basis=&#34;542px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;内存&#34;&gt;内存
&lt;/h3&gt;&lt;p&gt;在冯诺依曼模型中，程序和数据被存储在一个被称作内存的线性排列存储区域。&lt;/p&gt;
&lt;p&gt;存储的数据单位是一个二进制位，最小的存储单位叫作字节，也就是 8 位，英文是 byte，每一个字节都对应一个内存地址。&lt;/p&gt;
&lt;p&gt;内存地址由 0 开始编号，比如第 1 个地址是 0，第 2 个地址是 1， 然后自增排列，最后一个地址是内存中的字节数减 1。&lt;/p&gt;
&lt;p&gt;我们通常说的内存都是随机存取器（RAM），也就是读取任何一个地址数据的速度是一样的，写入任何一个地址数据的速度也是一样的。&lt;/p&gt;
&lt;h3 id=&#34;中央处理器cpu&#34;&gt;中央处理器CPU
&lt;/h3&gt;&lt;p&gt;冯诺依曼模型中 CPU 负责控制和计算，为了方便计算较大的数值，CPU 每次可以计算多个字节的数据。&lt;/p&gt;
&lt;style type=&#34;text/css&#34;&gt;
   
  .notice {
    --title-color: #fff;
    --title-background-color: #6be;
    --content-color: #444;
    --content-background-color: #e7f2fa;
  }

  .notice.info {
    --title-background-color: #fb7;
    --content-background-color: #fec;
  }

  .notice.tip {
    --title-background-color: #5a5;
    --content-background-color: #efe;
  }

  .notice.warning {
    --title-background-color: #c33;
    --content-background-color: #fee;
  }

   
  @media (prefers-color-scheme: dark) {
    .notice {
      --title-color: #fff;
      --title-background-color: #069;
      --content-color: #ddd;
      --content-background-color: #023;
    }

    .notice.info {
      --title-background-color: #a50;
      --content-background-color: #420;
    }

    .notice.tip {
      --title-background-color: #363;
      --content-background-color: #121;
    }

    .notice.warning {
      --title-background-color: #800;
      --content-background-color: #400;
    }
  }

  body.dark .notice {
    --title-color: #fff;
    --title-background-color: #069;
    --content-color: #ddd;
    --content-background-color: #023;
  }

  body.dark .notice.info {
    --title-background-color: #a50;
    --content-background-color: #420;
  }

  body.dark .notice.tip {
    --title-background-color: #363;
    --content-background-color: #121;
  }

  body.dark .notice.warning {
    --title-background-color: #800;
    --content-background-color: #400;
  }

   
  .notice {
    width: 100%;  
    max-width: 600px;  
    padding: 18px;
    line-height: 24px;
    margin-bottom: 24px;
    border-radius: 4px;
    color: var(--content-color);
    background: var(--content-background-color);
  }

  .notice p:last-child {
    margin-bottom: 0;
  }

   
  .notice-title {
    margin: -18px -18px 12px;
    padding: 4px 18px;
    border-radius: 4px 4px 0 0;
    font-weight: 700;
    color: var(--title-color);
    background: var(--title-background-color);
  }

   
  .icon-notice {
    display: inline-flex;
    align-self: center;
    margin-right: 8px;
  }

  .icon-notice img,
  .icon-notice svg {
    height: 1em;
    width: 1em;
    fill: currentColor;
  }

  .icon-notice img,
  .icon-notice.baseline svg {
    top: 0.125em;
    position: relative;
  }
&lt;/style&gt;&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;CPU位宽：代表的是 CPU 一次可以计算（运算）的数据量&lt;/p&gt;
&lt;p&gt;32 位和 64 位 CPU 最主要区别在于一次能计算多少字节数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;32 位 CPU 一次可以计算 4 个字节&lt;/li&gt;
&lt;li&gt;64 位 CPU 一次可以计算 8 个字节&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CPU 的位宽最好不要小于线路位宽&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;CPU 内部还有一些组件，常见的有 &lt;strong&gt;寄存器、控制单元和逻辑运算单元&lt;/strong&gt; 等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制单元：负责控制 CPU 工作&lt;/li&gt;
&lt;li&gt;逻辑运算单元：计算&lt;/li&gt;
&lt;li&gt;寄存器：存放计算的中间结果，离控制单元和逻辑运算单元非常近，因此速度很快
&lt;ul&gt;
&lt;li&gt;通用寄存器：用来存放需要进行运算的数据，比如需要进行加和运算的两个数据。&lt;/li&gt;
&lt;li&gt;程序计数器：用来存储 CPU 要执行下一条指令「所在的内存地址」，注意不是存储了下一条要执行的指令，此时指令还在内存中，程序计数器只是存储了下一条指令「的地址」。&lt;/li&gt;
&lt;li&gt;指令寄存器：用来存放当前正在执行的指令，也就是指令本身，指令被执行完成之前，指令都存储在这里。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;局部性原理&#34;&gt;局部性原理
&lt;/h4&gt;&lt;p&gt;在CPU访问存储设备时，无论是存取数据抑或存取指令，都趋于聚集在一片连续的区域中，这就被称为局部性原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;时间局部性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果一个信息项正在被访问，那么在近期它很可能还会被再次访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;空间局部性（Spatial Locality）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果一个存储器的位置被引用，那么将来他附近的位置也会被引用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总线&#34;&gt;总线
&lt;/h3&gt;&lt;p&gt;总线是用于 CPU 和内存以及其他设备之间的通信，总线可分为 3 种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;地址总线：用于指定 CPU 将要操作的内存地址；&lt;/li&gt;
&lt;li&gt;数据总线：用于读写内存的数据；&lt;/li&gt;
&lt;li&gt;控制总线：用于发送和接收信号，比如中断、设备复位等信号，CPU 收到信号后自然进行响应，这时也需要控制总线；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当 CPU 要读写内存数据的时候，一般需要通过以下三条总线&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先要通过地址总线来指定内存的地址；&lt;/li&gt;
&lt;li&gt;然后通过控制总线控制是读或写命令；&lt;/li&gt;
&lt;li&gt;最后通过数据总线来传输数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;程序执行的基本过程&#34;&gt;程序执行的基本过程
&lt;/h2&gt;&lt;p&gt;程序实际上是一条一条指令，所以程序的运行过程就是把每一条指令一步一步的执行起来，负责执行指令的就是 CPU 了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;取得指令&lt;/strong&gt; ：CPU 读取程序计数器的值，这个值是指令的内存地址，然后 CPU 的控制单元操作地址总线指定需要访问的内存地址，接着通知内存设备准备数据，数据准备好后通过数据总线将指令数据传给 CPU，CPU 收到内存传来的数据后，将这个指令数据存入到指令寄存器。程序计数器的值自增，表示指向下一条指令。这个自增的大小，由 CPU 的位宽决定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;指令译码&lt;/strong&gt; ：CPU 的控制器分析指令寄存器中的指令，确定指令的类型和参数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行指令&lt;/strong&gt; ：把指令交给逻辑运算单元运算；如果是存储类型的指令，则交由控制单元执行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据回写&lt;/strong&gt; ：CPU 将计算结果存回寄存器或者将寄存器的值存入内存&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;存储器的层次结构&#34;&gt;存储器的层次结构
&lt;/h2&gt;&lt;h3 id=&#34;寄存器&#34;&gt;寄存器
&lt;/h3&gt;&lt;p&gt;寄存器是最靠近 CPU 的控制单元和逻辑计算单元的存储器。寄存器的访问速度非常快，一般要求在半个 CPU 时钟周期内完成读写&lt;/p&gt;
&lt;h3 id=&#34;cpu多级缓存&#34;&gt;CPU多级缓存
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;CPU缓存&lt;/strong&gt; 是高速缓冲存储器，是位于CPU与主内存间的一种容量较小但速度很高的存储器&lt;/p&gt;
&lt;p&gt;由于CPU的速度远高于主内存，CPU直接从内存中存取数据要等待一定时间周期，Cache中保存着CPU刚用过或循环使用的一部分数据，当CPU再次使用该部分数据时可从Cache中直接调用，减少CPU的等待时间，提高了系统的效率，具体包括以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;L1-Cache&lt;/strong&gt; ：L1- 缓存在 CPU 中，相比寄存器，虽然它的位置距离 CPU 核心更远，但造价更低，读写速度在 2~4 个 CPU 时钟周期。
&lt;ul&gt;
&lt;li&gt;每个 CPU 核心都有一块属于自己的 L1 高速缓存，指令和数据在 L1 是分开存放的，所以 L1 高速缓存通常分成 &lt;strong&gt;指令缓存&lt;/strong&gt; 和 &lt;strong&gt;数据缓存&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L2-Cache&lt;/strong&gt; ：L2- 缓存也在 CPU 中，位置比 L1- 缓存距离 CPU 核心更远，它的大小比 L1-Cache 更大，速度在 10~20 个 CPU 周期。
&lt;ul&gt;
&lt;li&gt;L2 高速缓存同样每个 CPU 核心都有&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L3-Cache&lt;/strong&gt; ：L3- 缓存同样在 CPU 中，位置比 L2- 缓存距离 CPU 核心更远，大小通常比 L2-Cache 更大，读写速度在 20~60 个 CPU 周期。
&lt;ul&gt;
&lt;li&gt;L3 高速缓存通常是多个 CPU 核心共用的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当 CPU 需要内存中某个数据的时候，如果寄存器中有这个数据，我们可以直接使用；如果寄存器中没有这个数据，我们就要先查询 L1 缓存；L1 中没有，再查询 L2 缓存；L2 中没有再查询 L3 缓存；L3 中没有，再去内存中拿。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储器存储空间大小：内存&amp;gt;L3&amp;gt;L2&amp;gt;L1&amp;gt;寄存器&lt;/li&gt;
&lt;li&gt;存储器速度快慢排序：寄存器&amp;gt;L1&amp;gt;L2&amp;gt;L3&amp;gt;内存&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cpu缓存一致性&#34;&gt;CPU缓存一致性
&lt;/h4&gt;&lt;p&gt;CPU 缓存 是由很多个 Cache Line 组成的，CPU Line 是 CPU 从内存读取数据的基本单位，而 CPU Line 是由各种标志（Tag）+ 数据块（Data Block）组成&lt;/p&gt;
&lt;p&gt;CPU写入数据通常有以下两种策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写穿： &lt;strong&gt;把数据同时写入内存和 Cache 中&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;写入前会先判断数据是否已经在 CPU 缓存 里面了：
&lt;ul&gt;
&lt;li&gt;如果数据已经在 Cache 里面，先将数据更新到 Cache 里面，再写入到内存里面；&lt;/li&gt;
&lt;li&gt;如果数据没有在 Cache 里面，就直接把数据更新到内存里面。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;写回：&lt;strong&gt;当发生写操作时，新的数据仅仅被写入 Cache Block 里，只有当修改过的 Cache Block 被替换时才需要写到内存中&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;如果当发生写操作时，数据命中缓存，则把数据更新到 CPU 缓存 里，同时标记 CPU 缓存 里的这个 Cache Block 为脏（Dirty）的，这个脏的标记代表这个时候，我们 CPU Cache 里面的这个 Cache Block 的数据和内存是不一致的&lt;/li&gt;
&lt;li&gt;如果当发生写操作时，数据未命中缓存，就要检查这个 Cache Block 里的数据有没有被标记为脏的
&lt;ul&gt;
&lt;li&gt;如果是脏的话，我们就要把这个 Cache Block 里的数据写回到内存，然后再把当前要写入的数据，先从内存读入到 Cache Block 里，然后再把当前要写入的数据写入到 Cache Block，最后也把它标记为脏的&lt;/li&gt;
&lt;li&gt;如果不是脏的话，把当前要写入的数据先从内存读入到 Cache Block 里，接着将数据写入到这个 Cache Block 里，然后再把这个 Cache Block 标记为脏的就好了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缓存一致性问题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不同核心的缓存，在同一行时候是不一致，从而会导致执行结果的错误。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;解决思路&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;写传播&lt;/strong&gt; ：某个 CPU 核心里的 Cache 数据更新时，必须要传播到其他核心的 Cache；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事务的串行化&lt;/strong&gt; ：某个 CPU 核心里对数据的操作顺序，必须在其他核心看起来顺序是一样的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;内存-1&#34;&gt;内存
&lt;/h3&gt;&lt;p&gt;内存通常使用 &lt;strong&gt;DRAM （Dynamic Random Access Memory，动态随机存取存储器）&lt;/strong&gt; 。DRAM的数据会被存储在电容里，电容会不断漏电，所以需要「定时刷新」电容，才能保证数据不会被丢失，这就是 DRAM 之所以被称为「动态」存储器的原因，只有不断刷新，数据才能被存储起来。因此断电后内存中的数据全部丢失&lt;/p&gt;
&lt;h3 id=&#34;磁盘&#34;&gt;磁盘
&lt;/h3&gt;&lt;p&gt;SSD 就是固体硬盘，结构和内存类似，但是它相比内存的优点是断电后数据还是存在的，而内存、寄存器、高速缓存断电后数据都会丢失。&lt;/p&gt;
&lt;h3 id=&#34;存储器的层次关系&#34;&gt;存储器的层次关系
&lt;/h3&gt;&lt;p&gt;存储空间越大的存储器设备，其访问速度越慢，所需成本也相对越少。&lt;/p&gt;
&lt;p&gt;CPU 并不会直接和每一种存储器设备直接打交道，而是每一种存储器设备只和它相邻的存储器设备打交道。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A1%AC%E4%BB%B6%E7%BB%93%E6%9E%84/%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E5%B1%82%E6%AC%A1%E5%85%B3%E7%B3%BB%E5%9B%BE.png&#34;
	width=&#34;1007&#34;
	height=&#34;485&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;存储器的层次关系&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;207&#34;
		data-flex-basis=&#34;498px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;当 CPU 需要访问内存中某个数据的时候，如果寄存器有这个数据，CPU 就直接从寄存器取数据即可，如果寄存器没有这个数据，CPU 就会查询 L1 高速缓存，如果 L1 没有，则查询 L2 高速缓存，L2 还是没有的话就查询 L3 高速缓存，L3 依然没有的话，才去内存中取数据&lt;/p&gt;
&lt;h2 id=&#34;中断&#34;&gt;中断
&lt;/h2&gt;&lt;p&gt;在计算机中，中断是系统用来响应硬件设备请求的一种机制，操作系统收到硬件的中断请求，会打断正在执行的进程，然后调用内核中的中断处理程序来响应请求&lt;/p&gt;
&lt;p&gt;操作系统收到了中断请求，会打断其他进程的运行，所以 &lt;strong&gt;中断请求的响应程序，也就是中断处理程序，要尽可能快的执行完，这样可以减少对正常进程运行调度地影响。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;硬中断和软中断&#34;&gt;硬中断和软中断
&lt;/h3&gt;&lt;p&gt;Linux 系统为了解决中断处理程序执行过长和中断丢失的问题，将中断过程分成了两个阶段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;上半部用来快速处理中断（硬中断）&lt;/strong&gt; ：由 &lt;strong&gt;硬件设备&lt;/strong&gt;（如键盘、网络卡、定时器等）触发的中断信号，具有较高的优先级，一般会暂时关闭中断请求，主要负责处理跟硬件紧密相关或者时间敏感的事情。
&lt;ul&gt;
&lt;li&gt;当硬中断发生时，CPU会保存当前执行的上下文，并跳转到中断处理程序。&lt;/li&gt;
&lt;li&gt;中断处理程序处理完成后，会恢复被中断的程序的上下文，并继续执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;下半部用来延迟处理上半部未完成的工作（软中断）&lt;/strong&gt;：由内核触发，一般以内核线程的方式运行。通常是通过执行特定指令（如&lt;code&gt;int&lt;/code&gt;指令）或系统调用产生的。在程序运行中请求操作系统的服务&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>排序算法</title>
        <link>https://Tyritic.github.io/p/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
        <pubDate>Mon, 21 Oct 2024 10:05:19 +0800</pubDate>
        
        <guid>https://Tyritic.github.io/p/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
        <description>&lt;h2 id=&#34;排序算法的相关概念&#34;&gt;排序算法的相关概念
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;内部排序和外部排序
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内部排序&lt;/strong&gt; ：在排序期间元素全部存放在内存中的排序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外部排序&lt;/strong&gt; ：排序期间元素无法全部放在内存中，必须在排序的过程中不断进行内外存的数据交换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;稳定排序和非稳定排序
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;稳定排序&lt;/strong&gt; ：对于相同的键，不会重新排列它的相对顺序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非稳定排序&lt;/strong&gt; ：对于相同的键，会重新排序它的相对顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基于比较的排序和基于桶的排序
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基于比较的排序&lt;/strong&gt; ：通过比较来决定元素间的相对次序，适用于各种规模的数据，也不在乎数据的分布，都能进行排序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于桶的排序&lt;/strong&gt; ：不通过比较来决定元素间的相对次序，而是通过确定每个元素之前，应该有多少个元素来排序。非比较排序时间复杂度底，但由于非比较排序需要占用空间来确定唯一位置。所以对数据规模和数据分布有一定的要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基于比较的排序&#34;&gt;基于比较的排序
&lt;/h2&gt;&lt;h3 id=&#34;冒泡排序&#34;&gt;冒泡排序
&lt;/h3&gt;&lt;p&gt;它重复地遍历要排序的序列，依次比较两个元素，如果它们的顺序错误就把它们交换过来。遍历序列的工作直到没有再需要交换为止，此时说明该序列已经排序完成。此时元素会像泡泡一样，冒泡到数组的适当位置&lt;/p&gt;
&lt;h4 id=&#34;算法步骤&#34;&gt;算法步骤
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;比较相邻的元素。如果第一个比第二个大，就交换它们两个；&lt;/li&gt;
&lt;li&gt;对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数&lt;/li&gt;
&lt;li&gt;针对所有的元素重复以上的步骤，直到排序完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;代码实现&#34;&gt;代码实现
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;bubbleSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 遍历n-1次&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 标志位,如果一次遍历中没有发生交换,说明数组已经有序,直接退出&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 每次遍历都会找到一个最大值,因此第i次遍历时只需要遍历n-i-1个元素&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;算法分析&#34;&gt;算法分析
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;稳定性&lt;/strong&gt;：稳定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间复杂度&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;最佳：$O(n)$ （当输入数组为已经排序好的数据）&lt;/li&gt;
&lt;li&gt;最差：$O(n^2)$：（当输入数组为倒序排列的）&lt;/li&gt;
&lt;li&gt;平均：$O(n^2)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空间复杂度&lt;/strong&gt;：$O(1)$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;选择排序&#34;&gt;选择排序
&lt;/h3&gt;&lt;p&gt;选择排序无论接收什么数据进去都是 $O(n^2)$ 的时间复杂度。所以用到它的时候，数据规模越小越好。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。&lt;/p&gt;
&lt;h4 id=&#34;算法步骤-1&#34;&gt;算法步骤
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置&lt;/li&gt;
&lt;li&gt;再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。&lt;/li&gt;
&lt;li&gt;重复第 2 步，直到所有元素均排序完毕。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;代码实现-1&#34;&gt;代码实现
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;selectionSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 遍历n-1次&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 每次遍历都会找到一个最小值,因此第i次遍历时只需要遍历n-i-1个元素&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;算法分析-1&#34;&gt;算法分析
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;稳定性&lt;/strong&gt;：不稳定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间复杂度&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;最佳：$O(n^2)$&lt;/li&gt;
&lt;li&gt;最差：$O(n^2)$&lt;/li&gt;
&lt;li&gt;平均：$O(n^2)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空间复杂度&lt;/strong&gt;：$O(1)$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;插入排序&#34;&gt;插入排序
&lt;/h3&gt;&lt;p&gt;插入排序的原理类似于洗牌。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。&lt;/p&gt;
&lt;h4 id=&#34;算法步骤-2&#34;&gt;算法步骤
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;从第一个元素开始，该元素可以认为已经被排序；&lt;/li&gt;
&lt;li&gt;取出下一个元素，在已经排序的元素序列中从后向前扫描；&lt;/li&gt;
&lt;li&gt;如果该元素（已排序）大于新元素，将该元素移到下一位置；&lt;/li&gt;
&lt;li&gt;重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；&lt;/li&gt;
&lt;li&gt;将新元素插入到该位置后；&lt;/li&gt;
&lt;li&gt;重复步骤 2~5。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;代码实现-2&#34;&gt;代码实现
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;insertionSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 遍历n-1次&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 从第i个元素开始,将当前元素插入到前面已经排好序的数组中&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;preIndex: &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preIndex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;current: &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 从后往前遍历,将大于current的元素后移一位&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;算法分析-2&#34;&gt;算法分析
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;稳定性&lt;/strong&gt; ：稳定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间复杂度&lt;/strong&gt; ：
&lt;ul&gt;
&lt;li&gt;最佳：$O(n)$ （输入数组本身为有序）&lt;/li&gt;
&lt;li&gt;最差：$O(n^2)$ （输入数组本身为倒序）&lt;/li&gt;
&lt;li&gt;平均：$O(n^2)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空间复杂度&lt;/strong&gt; ：$O(1)$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;希尔排序&#34;&gt;希尔排序
&lt;/h3&gt;&lt;p&gt;希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录 “基本有序” 时，再对全体记录进行依次直接插入排序。&lt;/p&gt;
&lt;h4 id=&#34;算法步骤-3&#34;&gt;算法步骤
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;选择一个增量序列 $\lbrace t_1, t_2, \dots, t_k \rbrace$，其中 $t_i \gt t_j, i \lt j, t_k = 1，t_1=length/2$；&lt;/li&gt;
&lt;li&gt;按增量序列个数 k，对序列进行 k 趟排序；&lt;/li&gt;
&lt;li&gt;每趟排序，根据对应的增量 $t$，将待排序列分割成若干长度为 $m$ 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/e5f6b2136e5c2d3657746c2cc403be8e.png&#34;
	width=&#34;1920&#34;
	height=&#34;1618&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;希尔排序&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;118&#34;
		data-flex-basis=&#34;284px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;代码实现-3&#34;&gt;代码实现
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;shellSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// gap为增量,每次将数组分为gap个子数组,对每个子数组进行插入排序&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;           &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;           &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                   &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preIndex&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;           &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;算法分析-3&#34;&gt;算法分析
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;稳定性&lt;/strong&gt;：不稳定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间复杂度&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;最佳：$O(nlogn)$，&lt;/li&gt;
&lt;li&gt;最差：$O(n^2)$&lt;/li&gt;
&lt;li&gt;平均：$O(nlogn)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空间复杂度&lt;/strong&gt;：$O(1)$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;归并排序&#34;&gt;归并排序
&lt;/h3&gt;&lt;p&gt;归并排序是一种稳定的排序方法。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。归并排序的性能不受输入数据的影响，因为始终都是 $O(nlogn)$ 的时间复杂度。代价是需要额外的内存空间。&lt;/p&gt;
&lt;h4 id=&#34;算法步骤-4&#34;&gt;算法步骤
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;归并排序算法是一个递归过程，边界条件为当输入序列仅有一个元素时，直接返回，具体过程如下：&lt;/li&gt;
&lt;li&gt;如果输入内只有一个元素，则直接返回，否则将长度为 $n$ 的输入序列分成两个长度为 $n/2$ 的子序列；&lt;/li&gt;
&lt;li&gt;分别对这两个子序列进行归并排序，使子序列变为有序状态；&lt;/li&gt;
&lt;li&gt;设定两个指针，分别指向两个已经排序子序列的起始位置；&lt;/li&gt;
&lt;li&gt;比较两个指针所指向的元素，选择相对小的元素放入到合并空间（用于存放排序结果），并移动指针到下一位置；&lt;/li&gt;
&lt;li&gt;重复步骤 3 ~ 4 直到某一指针达到序列尾；&lt;/li&gt;
&lt;li&gt;将另一序列剩下的所有元素直接复制到合并序列尾&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;代码实现-4&#34;&gt;代码实现
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;mergeSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 递归结束条件&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;           &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 将数组分为两部分&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;middle&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;copyOfRange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;middle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;copyOfRange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;middle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 递归调用&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;merge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mergeSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mergeSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;merge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index_1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index_2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index_1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index_2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index_1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index_2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++]=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index_1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++]=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index_2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index_1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++]=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index_2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index_2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++]=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;算法分析-4&#34;&gt;算法分析
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;稳定性&lt;/strong&gt;：稳定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间复杂度&lt;/strong&gt;：最佳：$O(nlogn)$， 最差：$O(nlogn)$， 平均：$O(nlogn)$&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空间复杂度&lt;/strong&gt;：$O(n)$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;快速排序&#34;&gt;快速排序
&lt;/h3&gt;&lt;p&gt;快速排序的基本思想：通过一趟排序将待排序列分隔成独立的两部分，其中一部分记录的元素均比另一部分的元素小，则可分别对这两部分子序列继续进行排序，以达到整个序列有序。&lt;/p&gt;
&lt;h4 id=&#34;算法步骤-5&#34;&gt;算法步骤
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;从序列中挑出一个元素，做为 “基准”(&lt;code&gt;pivot&lt;/code&gt;)；&lt;/li&gt;
&lt;li&gt;重新排列序列，将所有比基准值小的元素摆放在基准前面，所有比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个操作结束之后，该基准就处于数列的中间位置。&lt;/li&gt;
&lt;li&gt;递归地把小于基准值元素的子序列和大于基准值元素的子序列进行快速排序&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;代码实现-5&#34;&gt;代码实现
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;quickSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;low&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;high&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;low&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;high&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;partition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;low&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;high&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;quickSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;low&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;quickSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;high&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;partition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;low&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;high&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pivot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;low&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;low&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;high&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pivot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;             &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pivot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;             &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;             &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;             &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;             &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;low&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pivot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;堆排序&#34;&gt;堆排序
&lt;/h3&gt;&lt;h4 id=&#34;算法步骤-6&#34;&gt;算法步骤
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;将初始待排序列 $(R_1, R_2, \dots, R_n)$ 构建成大顶堆，此堆为初始的无序区；&lt;/li&gt;
&lt;li&gt;将堆顶元素 $R_1$ 与最后一个元素 $R_n$ 交换，此时得到新的无序区 $(R_1, R_2, \dots, R_{n-1})$ 和新的有序区 $R_n$, 且满足 $R_i \leqslant R_n (i \in 1, 2,\dots, n-1)$；&lt;/li&gt;
&lt;li&gt;由于交换后新的堆顶 $R_1$ 可能违反堆的性质，因此需要对当前无序区 $(R_1, R_2, \dots, R_{n-1})$ 调整为新堆，然后再次将 $R_1$ 与无序区最后一个元素交换，得到新的无序区 $(R_1, R_2, \dots, R_{n-2})$ 和新的有序区 $(R_{n-1}, R_n)$。不断重复此过程直到有序区的元素个数为 $n-1$，则整个排序过程完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;代码实现-6&#34;&gt;代码实现
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Global variable that records the length of an array;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heapLen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * Swap the two elements of an array
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param arr
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param i
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param j
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;swap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * Build Max Heap
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param arr
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;buildMaxHeap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heapify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * Adjust it to the maximum heap
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param arr
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param i
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;heapify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;largest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heapLen&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;largest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;largest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heapLen&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;largest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;largest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;largest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;swap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;largest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heapify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;largest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * Heap Sort
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param arr
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @return
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;heapSort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// index at the end of the heap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heapLen&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// build MaxHeap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buildMaxHeap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Move the top of the heap to the tail of the heap in turn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;swap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heapLen&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heapify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;算法分析-5&#34;&gt;算法分析
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;稳定性&lt;/strong&gt;：不稳定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间复杂度&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;最佳：$O(nlogn)$&lt;/li&gt;
&lt;li&gt;最差：$O(nlogn)$&lt;/li&gt;
&lt;li&gt;平均：$O(nlogn)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空间复杂度&lt;/strong&gt;：$O(1)$&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>树</title>
        <link>https://Tyritic.github.io/p/%E6%A0%91/</link>
        <pubDate>Sun, 20 Oct 2024 17:33:36 +0800</pubDate>
        
        <guid>https://Tyritic.github.io/p/%E6%A0%91/</guid>
        <description>&lt;h2 id=&#34;树的定义&#34;&gt;树的定义
&lt;/h2&gt;&lt;p&gt;树是是n（n≥0）结点的有限集合。n=0时，称为 &lt;strong&gt;空树&lt;/strong&gt; 。任何一颗非空树只有一个根节点。&lt;/p&gt;
&lt;p&gt;树具有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一棵树中的任意两个结点有且仅有唯一的一条路径连通。&lt;/li&gt;
&lt;li&gt;一棵树如果有 n 个结点，那么它一定恰好有 n-1 条边。&lt;/li&gt;
&lt;li&gt;一棵树不包含回路。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91-2.png&#34;
	width=&#34;848&#34;
	height=&#34;342&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;二叉树&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;247&#34;
		data-flex-basis=&#34;595px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;树的常见概念&#34;&gt;树的常见概念
&lt;/h2&gt;&lt;h3 id=&#34;节点相关&#34;&gt;节点相关
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;节点&lt;/strong&gt; ：树中的每个元素都可以统称为节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;根节点&lt;/strong&gt; ：顶层节点或者说没有父节点的节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;父节点&lt;/strong&gt; ：若一个节点含有子节点，则这个节点称为其子节点的父节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;子节点&lt;/strong&gt; ：一个节点含有的子树的根节点称为该节点的子节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;兄弟节点&lt;/strong&gt; ：具有相同父节点的节点互称为兄弟节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;叶子节点&lt;/strong&gt;：没有子节点的节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;深度和高度&#34;&gt;深度和高度
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;节点的高度&lt;/strong&gt; ：该节点到叶子节点的最长路径所包含的边数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;节点的深度&lt;/strong&gt; ：根节点到该节点的路径所包含的边数，根节点的深度默认为0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;树的高度&lt;/strong&gt; ：树的高度等于根节点的高度，即根节点到叶子节点包含的边数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;树的深度&lt;/strong&gt; ：树的深度等于叶子节点的深度，即根节点到叶子节点包含的边数，所有树的深度等于树的高度&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二叉树&#34;&gt;二叉树
&lt;/h2&gt;&lt;h3 id=&#34;定义&#34;&gt;定义
&lt;/h3&gt;&lt;p&gt;每个节点最多只有两个分支（即不存在分支度大于 2 的节点）的树结构&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;深度为k的二叉树的节点数为$[2^d,2^{d+1}-1]$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最多节点（满二叉树）：$N=2^0+2^1+&amp;hellip;2^d=2^{d+1}-1$&lt;/li&gt;
&lt;li&gt;最少节点（最后一层只有一个节点）：$N=2^0+2^1+..2^{d-1}+1=2^d$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分类&#34;&gt;分类
&lt;/h3&gt;&lt;h4 id=&#34;满二叉树&#34;&gt;满二叉树
&lt;/h4&gt;&lt;p&gt;一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是 &lt;strong&gt;满二叉树&lt;/strong&gt; 。也就是说，如果一个二叉树的层数为 K，且结点总数是$2^k -1 $，则它就是 &lt;strong&gt;满二叉树&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%A0%91/full-binary-tree.png&#34;
	width=&#34;491&#34;
	height=&#34;251&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;满二叉树&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;195&#34;
		data-flex-basis=&#34;469px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;完全二叉树&#34;&gt;完全二叉树
&lt;/h4&gt;&lt;p&gt;除最后一层外，若其余层都是满的，并且最后一层是满的或者是在右边缺少连续若干节点，则这个二叉树就是 &lt;strong&gt;完全二叉树&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%A0%91/complete-binary-tree.png&#34;
	width=&#34;551&#34;
	height=&#34;371&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;完全二叉树&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;148&#34;
		data-flex-basis=&#34;356px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;二叉搜索树&#34;&gt;二叉搜索树
&lt;/h4&gt;&lt;p&gt;对于每个节点X，它的左子树的所有项的值均小于X的元素值，右子树的所有项均大于X的元素值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值&lt;/li&gt;
&lt;li&gt;若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%A0%91/20200806190304693.png&#34;
	width=&#34;786&#34;
	height=&#34;276&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;二叉搜索树&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;284&#34;
		data-flex-basis=&#34;683px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;平衡二叉树&#34;&gt;平衡二叉树
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;平衡二叉树&lt;/strong&gt; 是一棵二叉搜索树，且具有以下性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以是一棵空树&lt;/li&gt;
&lt;li&gt;如果不是空树，它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;树的基本操作&#34;&gt;树的基本操作
&lt;/h2&gt;&lt;h3 id=&#34;遍历元素&#34;&gt;遍历元素
&lt;/h3&gt;&lt;h4 id=&#34;前序遍历&#34;&gt;前序遍历
&lt;/h4&gt;&lt;p&gt;二叉树的前序遍历，就是先输出根结点，再遍历左子树，最后遍历右子树，遍历左子树和右子树的时候，同样遵循先序遍历的规则。通常通过递归实现前序遍历。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;preOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;		&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;preOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;中序遍历&#34;&gt;中序遍历
&lt;/h4&gt;&lt;p&gt;二叉树的中序遍历，就是先递归中序遍历左子树，再输出根结点的值，再递归中序遍历右子树&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;inOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;		&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;后序遍历&#34;&gt;后序遍历
&lt;/h4&gt;&lt;p&gt;二叉树的后序遍历，就是先递归后序遍历左子树，再递归后序遍历右子树，最后输出根结点的值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;postOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;		&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; 	&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;postOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;postOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;层序遍历&#34;&gt;层序遍历
&lt;/h4&gt;&lt;p&gt;层序遍历一个二叉树。就是从左到右一层一层的去遍历二叉树。通常使用队列实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;solver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;que&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LinkedList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;que&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;offer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;que&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;isEmpty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;que&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmpNode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;que&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;poll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmpNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmpNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;que&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;offer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmpNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmpNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;que&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;offer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tmpNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;itemList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;插入元素&#34;&gt;插入元素
&lt;/h3&gt;&lt;p&gt;通常插入元素的时间复杂度为$O(h)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于二叉搜索树
&lt;ul&gt;
&lt;li&gt;最坏情况：此时二叉搜索树退化为链表，时间复杂度为$O(n)$&lt;/li&gt;
&lt;li&gt;最好情况：此时二叉搜索树是平衡的，时间复杂度为$O(logn)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此可以通过二叉树的平衡操作来减少二叉树的深度&lt;/p&gt;
&lt;h3 id=&#34;删除元素&#34;&gt;删除元素
&lt;/h3&gt;&lt;p&gt;删除节点有以下几种情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;左右孩子都为空（叶子节点）&lt;/strong&gt; ：直接删除节点， 返回NULL为根节点&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;删除节点的左孩子为空，右孩子不为空&lt;/strong&gt; ：删除节点，右孩子补位，返回右孩子为根节点&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;删除节点的右孩子为空，左孩子不为空&lt;/strong&gt; ：删除节点，左孩子补位，返回左孩子为根节点&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;左右孩子节点都不为空&lt;/strong&gt; ：将删除节点的左子树头结点（左孩子）放到删除节点的右子树的最左面节点的左孩子上，返回删除节点右孩子为新的根节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;deleteNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TreeNode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;curr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;curr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;curr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;curr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;curr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deleteNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deleteNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;b树&#34;&gt;B树
&lt;/h2&gt;&lt;h3 id=&#34;定义-1&#34;&gt;定义
&lt;/h3&gt;&lt;p&gt;B 树是一种 &lt;strong&gt;自平衡的多路搜索树（multi-way search tree）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;B树单一节点拥有的最多子节点数量，称为B树的 &lt;strong&gt;阶&lt;/strong&gt; 。一个m阶的B树，树的节点具有以下特征&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;子节点个数和元素个数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;根节点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;元素的个数：$[1,m-1]$&lt;/li&gt;
&lt;li&gt;子节点的个数：$[2,m]$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中间节点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;元素个数：$[\lceil m/2 \rceil-1,m-1]$&lt;/li&gt;
&lt;li&gt;子节点的个数：$[\lceil m/2 \rceil,m]$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个节点的子节点个数和元素个数满足关系$子节点个数=元素个数+1$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有的叶子节点都位于同一层。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个节点中的元素从小到大排列，非叶子节点存储数据和索引&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;插入操作&#34;&gt;插入操作
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定位：找出插入该关键字的最低层中某个非叶结点（在B树中查找key时，会找到表示查找失败的叶节点，这样就确定了最底层非叶结点的插入位置。注意：插入位置一定是最底层中的某个非叶结点）。&lt;/li&gt;
&lt;li&gt;插入。在B树中，每个非失败结点的关键字个数都在区间内。插入后的结点关键字个数小于m，可以直接插入；插入后检查被插入结点内关键字的个数，当插入后的结点关键字个数大于m-1时，必须对结点进行分裂。&lt;/li&gt;
&lt;li&gt;分裂的方法：取一个新结点，在插入key后的原结点，从中间位置$\lceil m/2 \rceil$将其中的关键字分为两部分，左部分包含的关键字放在原结点中，右部分包含的关键字放在新结点中，中间位置$\lceil m/2 \rceil$的结点插入原结点的父结点。若此时导致父结点的关键字个数也超过上限，则继续进行这种分裂操作，直至这个过程传到根节点为止，进而导致B树的高度增1。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%A0%91/ccb611ab1859f91ae9942cbc55235e7d.png&#34;
	width=&#34;978&#34;
	height=&#34;243&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;分裂示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;402&#34;
		data-flex-basis=&#34;965px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;删除操作&#34;&gt;删除操作
&lt;/h3&gt;&lt;p&gt;B树中的删除操作与插入操作类似，但是只需讨论删除终端结点（最底层非叶结点）中关键字的情形，因为当被删关键字k不在终端结点可以转换为在终端节点的情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接删除：若被删除关键字所在结点的关键字个数$≥\lceil m/2 \rceil$，说明删除该关键字后仍满足B树的定义，则直接删去该关键字&lt;/li&gt;
&lt;li&gt;兄弟够借：若被删除关键字在你所在结点删除前的关键字个数为$\lceil m/2 \rceil-1$，且与此结点相连的右（或左）兄弟结点的关键字个数$≥\lceil m/2 \rceil$，则需要调整该结点、右（或左）兄弟结点及其双亲结点父子交换，以达到新的平衡。&lt;img src=&#34;https://Tyritic.github.io/p/%E6%A0%91/image-20250319204201813.png&#34;
	width=&#34;931&#34;
	height=&#34;337&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;兄弟够借&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;276&#34;
		data-flex-basis=&#34;663px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;兄弟不够借。若被删除关键字所在结点删除前的关键字个数为$\lceil m/2 \rceil-1$，且此时与该结点相邻的左、右兄弟结点的关键字个数均为$\lceil m/2 \rceil-1$，则将关键字删除后与左或者右兄弟结点进行合并&lt;img src=&#34;https://Tyritic.github.io/p/%E6%A0%91/image-20250319204401689.png&#34;
	width=&#34;979&#34;
	height=&#34;356&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;兄弟不够借&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;275&#34;
		data-flex-basis=&#34;660px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;b树-1&#34;&gt;B+树
&lt;/h2&gt;&lt;h3 id=&#34;定义-2&#34;&gt;定义
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每个分支结点最多有m棵子树（孩子结点）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非叶根节点至少有两棵子树，其他每个分支结点至少有$\lceil m/2 \rceil$棵子树。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在B+树中，每个结点（非根内部结点）的关键字个数n的范围$[\lceil m/2 \rceil,m]$；&lt;/p&gt;
&lt;p&gt;在B树中，每个结点（非根内部结点）的关键字个数n的范围是$[\lceil m/2 \rceil-1,m-1]$。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结点的子树个数与关键字个数相等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有叶结点包含全部关键字及指向对应记录的指针，叶结点中将关键字按大小顺序排列，并且相邻叶结点按大小顺序互联链接起来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有分支结点（可视为索引的索引）中仅仅包含它的各个子结点（即下一级的索引块）中关键字的最大值及指向子结点的指针。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%A0%91/a6aa3e2dfcf47b51addcf6788b70a7e0.png&#34;
	width=&#34;956&#34;
	height=&#34;457&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;B&amp;#43;树示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;209&#34;
		data-flex-basis=&#34;502px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;堆&#34;&gt;堆
&lt;/h2&gt;&lt;h3 id=&#34;定义-3&#34;&gt;定义
&lt;/h3&gt;&lt;p&gt;堆的本质是一个二叉树。与二叉树的区别在于：对于这颗二叉树而言，任何一个子树 &lt;strong&gt;根节点上的数据和孩子节点上的数据之间是存在大小关系&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;大顶堆&lt;/strong&gt; ：根节点上的数据 &lt;strong&gt;大于或者等于&lt;/strong&gt; 左右两个孩子&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;小顶堆&lt;/strong&gt; ：根节点上的数据 &lt;strong&gt;小于或者等于&lt;/strong&gt; 左右两个孩子&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;插入操作-1&#34;&gt;插入操作
&lt;/h3&gt;&lt;p&gt;以大顶堆为例，需要对堆的叶子节点进行向上调整，使得堆符合定义。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将元素插入到叶子节点中&lt;/li&gt;
&lt;li&gt;比较插入节点和它的父亲节点，如果插入节点比其父亲节点大则交换位置&lt;/li&gt;
&lt;li&gt;继续迭代往上判断，直到 &lt;strong&gt;父节点比它大或者到达树的顶部&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%A0%91/693ae41a5750cc86ca060d7c44ca5e69.png&#34;
	width=&#34;1375&#34;
	height=&#34;412&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;向上调整&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;333&#34;
		data-flex-basis=&#34;800px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;删除操作-1&#34;&gt;删除操作
&lt;/h3&gt;&lt;p&gt;堆的删除只会删除堆顶的元素，因此需要对堆的根节点进行向下调整使得堆满足定义。对大顶堆来说&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假装删除堆顶的元素，将其视为空穴&lt;/li&gt;
&lt;li&gt;选取空穴的左右子节点中比较小的节点，与空穴进行交换&lt;/li&gt;
&lt;li&gt;继续迭代向下判断，直到空穴位于叶子节点&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;建立堆&#34;&gt;建立堆
&lt;/h3&gt;&lt;h4 id=&#34;向下调整建立堆&#34;&gt;向下调整建立堆
&lt;/h4&gt;&lt;p&gt;时间复杂度为$O(logn)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找到最后一个父节点，将该父节点进行向下调整&lt;/li&gt;
&lt;li&gt;依次对所有的父节点进行向下调整&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;堆排序和top-k问题&#34;&gt;堆排序和Top K问题
&lt;/h3&gt;&lt;p&gt;升序使用大顶堆，降序使用小顶堆，时间复杂度为$O(nlogn)$&lt;/p&gt;
&lt;p&gt;堆排序的过程如下（以升序排序为例）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提取大顶堆的堆顶元素&lt;/li&gt;
&lt;li&gt;将当前最大的元素与末尾元素进行交换&lt;/li&gt;
&lt;li&gt;重新调整剩余元素形成新的堆&lt;/li&gt;
&lt;li&gt;循环往复直到堆中没有元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TOP K问题：比如说现在有10亿个数据，要选出其中最大的K个数，应该怎么选？&lt;/p&gt;
&lt;p&gt;我们可以建一个容量为K的小根堆，然后先把前K个数据丢到堆里，之后依次遍历剩余的数据，将比堆顶大的数据代替堆顶进堆。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>线性表</title>
        <link>https://Tyritic.github.io/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/</link>
        <pubDate>Sat, 19 Oct 2024 15:57:38 +0800</pubDate>
        
        <guid>https://Tyritic.github.io/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/</guid>
        <description>&lt;h2 id=&#34;顺序表&#34;&gt;顺序表
&lt;/h2&gt;&lt;h3 id=&#34;数组&#34;&gt;数组
&lt;/h3&gt;&lt;h4 id=&#34;定义&#34;&gt;定义
&lt;/h4&gt;&lt;p&gt;数组由相同类型的元素（element）组成，并且是使用一块连续的内存来存储。直接可以利用元素的索引（index）可以计算出该元素对应的存储地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;提供随机访问&lt;/strong&gt; ：可以利用元素的索引访问元素&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容量固定&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插入和删除元素较慢&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;基本操作&#34;&gt;基本操作
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;访问特定元素：$O(1)$&lt;/li&gt;
&lt;li&gt;插入元素：$O(n)$
&lt;ul&gt;
&lt;li&gt;最好情况：在表尾插入元素，时间复杂度为 $O(1)$&lt;/li&gt;
&lt;li&gt;最坏情况：发生在插入发生在数组的首部，此时需要移动所有元素，时间复杂度为$O(n)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除元素：$O(n)$
&lt;ul&gt;
&lt;li&gt;最好情况：在表尾删除元素，时间复杂度为 $O(1)$&lt;/li&gt;
&lt;li&gt;最坏情况：发生在删除发生在数组的首部，此时需要移动所有元素，时间复杂度为$O(n)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;单链表&#34;&gt;单链表
&lt;/h3&gt;&lt;h4 id=&#34;定义-1&#34;&gt;定义
&lt;/h4&gt;&lt;p&gt;**单链表 ** 虽然是一种线性表，但是并不会按线性的顺序存储数据，使用的不是连续的内存空间来存储数据。单链表只有一个方向，结点只有一个后继指针 next 指向后面的节点，通过连续的节点组成，但是节点在内存中不是连续分布的 ，而是散乱分布在内存中的某地址上。链表通常有一个不保存任何值的 head 节点(头结点)，通过头结点我们可以遍历整个链表。尾结点通常指向 null。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/single-linkedlist.png&#34;
	width=&#34;651&#34;
	height=&#34;181&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;单链表&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;359&#34;
		data-flex-basis=&#34;863px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ListNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ListNode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ListNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不提供随机访问&lt;/strong&gt; ：每次访问元素需要遍历链表&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容量不固定&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插入和删除元素速度快&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;基本操作-1&#34;&gt;基本操作
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;访问特定元素：$O(n)$&lt;/li&gt;
&lt;li&gt;插入元素：$O(1)$&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/20200806195134331-20230310121503147.png&#34;
	width=&#34;1122&#34;
	height=&#34;420&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;链表-添加节点&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;267&#34;
		data-flex-basis=&#34;641px&#34;
	
&gt;
&lt;ul&gt;
&lt;li&gt;找到要插入位置的前驱节点 &lt;strong&gt;&lt;code&gt;pre&lt;/code&gt;&lt;/strong&gt; 和后驱节点 &lt;strong&gt;&lt;code&gt;temp=pre.next&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;前驱节点 &lt;strong&gt;&lt;code&gt;pre&lt;/code&gt;&lt;/strong&gt; 指向目标节点 &lt;strong&gt;&lt;code&gt;target&lt;/code&gt;&lt;/strong&gt; ：&lt;strong&gt;&lt;code&gt;pre.next=target&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;目标节点指向后驱节点 &lt;strong&gt;&lt;code&gt;temp&lt;/code&gt;&lt;/strong&gt; ：&lt;strong&gt;&lt;code&gt;target.next=temp&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除元素：$O(1)$&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/20200806195114541-20230310121459257.png&#34;
	width=&#34;1132&#34;
	height=&#34;308&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;链表-删除节点&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;367&#34;
		data-flex-basis=&#34;882px&#34;
	
&gt;
&lt;ul&gt;
&lt;li&gt;找到要删除位置的前驱节点 &lt;strong&gt;&lt;code&gt;pre&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;将前驱节点 &lt;strong&gt;&lt;code&gt;pre&lt;/code&gt;&lt;/strong&gt; 指向目标节点的后驱节点：&lt;strong&gt;&lt;code&gt;pre.next=pre.next.next&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;双向链表&#34;&gt;双向链表
&lt;/h3&gt;&lt;h4 id=&#34;定义-2&#34;&gt;定义
&lt;/h4&gt;&lt;p&gt;基本定义与单链表一致，但是 &lt;strong&gt;双向链表&lt;/strong&gt; 包含两个指针，一个 prev 指向前一个节点，一个 next 指向后一个节点。因此双向链表支持反向遍历&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/bidirectional-linkedlist.png&#34;
	width=&#34;511&#34;
	height=&#34;201&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;双向链表&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;254&#34;
		data-flex-basis=&#34;610px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;基本操作-2&#34;&gt;基本操作
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;访问元素&lt;/li&gt;
&lt;li&gt;插入元素：$O(1)$&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/R-C.8689c31dff2149b3d9742e26b9a06ed3.png&#34;
	width=&#34;948&#34;
	height=&#34;575&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;双向链表的插入&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;164&#34;
		data-flex-basis=&#34;395px&#34;
	
&gt;
&lt;ul&gt;
&lt;li&gt;找到要插入位置的前驱节点 &lt;strong&gt;&lt;code&gt;pre&lt;/code&gt;&lt;/strong&gt; 和后驱节点 &lt;strong&gt;&lt;code&gt;temp=pre.next&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;前驱节点 &lt;strong&gt;&lt;code&gt;pre&lt;/code&gt;&lt;/strong&gt; 和目标节点 &lt;strong&gt;&lt;code&gt;target&lt;/code&gt;&lt;/strong&gt; 建立双向链接
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;pre.next=target&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;target.prev=pre&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目标节点 &lt;strong&gt;&lt;code&gt;target&lt;/code&gt;&lt;/strong&gt; 和后驱节点 &lt;strong&gt;&lt;code&gt;temp&lt;/code&gt;&lt;/strong&gt; 建立双向链接
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;target.next=temp&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;temp.prev=target&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除元素：$O(1)$&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/00537f0ad4d843679655ded36e8e8503.png&#34;
	width=&#34;1894&#34;
	height=&#34;532&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;双向链表的删除&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;356&#34;
		data-flex-basis=&#34;854px&#34;
	
&gt;
&lt;ul&gt;
&lt;li&gt;找到要删除位置的前驱节点 &lt;strong&gt;&lt;code&gt;pre&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;将前驱节点 &lt;strong&gt;&lt;code&gt;pre&lt;/code&gt;&lt;/strong&gt; 指向目标节点的后驱节点 &lt;strong&gt;&lt;code&gt;temp&lt;/code&gt;&lt;/strong&gt; 建立双向联系
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;pre.next=temp&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;temp.prev=pre&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数组和链表的区别&#34;&gt;数组和链表的区别
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;访问效率&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;数组可以通过索引直接访问任何位置的元素，访问效率高，时间复杂度为$O(1)$，&lt;/li&gt;
&lt;li&gt;链表需要从头节点开始遍历到目标位置，访问效率较低，时间复杂度为$O(n)$。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;插入和删除效率&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;数组插入和删除操作需要移动其他元素，时间复杂度为$O(n)$&lt;/li&gt;
&lt;li&gt;链表只需要修改指针指向，时间复杂度为$O(1)$。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存命中率&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;数组元素在内存中连续存储，可以提高CPU缓存的命中率&lt;/li&gt;
&lt;li&gt;链表节点不连续存储，可能导致CPU缓存的命中率较低，频繁的缓存失效会影响性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;数组适合静态大小、频繁访问元素的场景&lt;/li&gt;
&lt;li&gt;链表适合动态大小、频繁插入、删除操作的场景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;栈&#34;&gt;栈
&lt;/h2&gt;&lt;h3 id=&#34;定义-3&#34;&gt;定义
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;栈 (Stack)&lt;/strong&gt; 只允许在有序的线性数据集合的一端（栈顶）进行加入数据（入栈）和移除数据（出栈）。因而按照 &lt;strong&gt;后进先出（LIFO, Last In First Out）&lt;/strong&gt; 的原理运作。&lt;strong&gt;在栈中，push 和 pop 的操作都发生在栈顶。&lt;/strong&gt; 在Java中栈一般由Stack类实现，而且栈顶一般为数组末端&lt;/p&gt;
&lt;h3 id=&#34;基本操作-3&#34;&gt;基本操作
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;访问元素&lt;/strong&gt; ：需要遍历元素，时间复杂度为$O(n)$&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;入栈和出栈&lt;/strong&gt; ：只对栈顶的元素进行操作，时间复杂度为$O(1)$&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/image-20240725233451930.png&#34;
	width=&#34;1674&#34;
	height=&#34;504&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;入栈和出栈&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;332&#34;
		data-flex-basis=&#34;797px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常见应用场景&#34;&gt;常见应用场景
&lt;/h3&gt;&lt;h4 id=&#34;浏览器的回退和前进&#34;&gt;浏览器的回退和前进
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/%E6%A0%88%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E5%80%92%E9%80%80%E5%92%8C%E5%89%8D%E8%BF%9B.png&#34;
	width=&#34;875&#34;
	height=&#34;616&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;栈实现浏览器倒退和前进-来自JavaGuide&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;340px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以使用两个栈来实现浏览器的回退和前进。一个栈Stack1用于保存当前浏览的界面，另一个栈Stack2用于回退的页面。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前进页面：将页面从 Stack2 弹出，然后压入到 Stack1 中&lt;/li&gt;
&lt;li&gt;回退页面：把页面从 Stack1 弹出，然后压入 Stack2 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;队列&#34;&gt;队列
&lt;/h2&gt;&lt;h3 id=&#34;定义-4&#34;&gt;定义
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;队列（Queue）&lt;/strong&gt; 是 &lt;strong&gt;先进先出 (FIFO，First In, First Out)&lt;/strong&gt; 的线性表。队列只允许在后端（队尾）进行插入操作（入队），在前端（队头）进行删除操作（出队）。在Java中队列由Queue的实现类来实现，队尾为数组后端，队头为数组前端&lt;/p&gt;
&lt;h3 id=&#34;基本操作-4&#34;&gt;基本操作
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;访问元素&lt;/strong&gt; ：需要遍历元素，时间复杂度为$O(n)$&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;入队和出队&lt;/strong&gt; ：只对队头和队尾的元素进行操作，时间复杂度为$O(1)$&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/OIP-C.G5n6ACcW_VofRsdMgqID4wHaCM.png&#34;
	width=&#34;430&#34;
	height=&#34;135&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;队列的基本操作&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;318&#34;
		data-flex-basis=&#34;764px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;栈和队列的相互转换&#34;&gt;栈和队列的相互转换
&lt;/h2&gt;&lt;h3 id=&#34;栈实现队列&#34;&gt;栈实现队列
&lt;/h3&gt;&lt;p&gt;使用两个栈，一个栈为输入栈，另一个栈为输出栈。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;入队：将元素压入输入栈。&lt;/li&gt;
&lt;li&gt;出队：先判断输出栈是否为空，如果不为空，则直接弹出栈顶元素；如果为空，则将输入栈中的所有元素依次弹出并压入输出栈中，然后再从输出栈中弹出栈顶元素作为出队元素。&lt;/li&gt;
&lt;li&gt;查询队首元素时，同样需要先将输入栈中的元素转移到输出栈中，然后取出的输出栈顶元素但不弹出。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;队列实现栈&#34;&gt;队列实现栈
&lt;/h3&gt;&lt;p&gt;使用一个栈可以实现队列。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;入栈：先入队然后将队列中的元素（除了最后一个）依次出队再入队（相当于反转一次）&lt;/li&gt;
&lt;li&gt;出栈：直接出队&lt;/li&gt;
&lt;li&gt;查询栈顶元素：直接返回队首元素&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>传输层协议</title>
        <link>https://Tyritic.github.io/p/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE/</link>
        <pubDate>Wed, 12 Jun 2024 20:58:45 +0800</pubDate>
        
        <guid>https://Tyritic.github.io/p/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE/</guid>
        <description>&lt;h2 id=&#34;传输层的作用&#34;&gt;传输层的作用
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;主要职责&lt;/strong&gt; ：负责不同主机的进程间通信&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;拥塞控制&lt;/strong&gt; ：防止&lt;strong&gt;整个网络&lt;/strong&gt;因负载过大而崩溃&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流量控制&lt;/strong&gt; ：协调发送速率和接受速率&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提供端到端服务&lt;/strong&gt; ：不同主机之间的进程通信&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;常见协议&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TCP&lt;/strong&gt; ：面向连接的可靠传输服务&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UDP&lt;/strong&gt; ：非面向连接的不可靠传输服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;多路复用和多路分解&#34;&gt;多路复用和多路分解
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多路分解&lt;/strong&gt; ：在接收端，传输层检测报文的字段，识别出接受端的socket，进而将报文段定向并正确交付到对应的socket中&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多路复用&lt;/strong&gt; ：源主机从不同的socket收集数据块，并将数据报封装首部信息，从而生成报文段。然后将报文段交付到网络层&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;无连接的多路复用和多路分解&#34;&gt;无连接的多路复用和多路分解
&lt;/h3&gt;&lt;p&gt;通过UDP套接字分配特定端口&lt;/p&gt;
&lt;p&gt;UDP套接字的格式（目的IP，目的端口号）&lt;/p&gt;
&lt;h3 id=&#34;有连接的多路复用和多路分解&#34;&gt;有连接的多路复用和多路分解
&lt;/h3&gt;&lt;p&gt;通过TCP套接字分配端口&lt;/p&gt;
&lt;p&gt;TCP套接字的格式（源IP，源端口号，目的IP，目的端口号）&lt;/p&gt;
&lt;h2 id=&#34;面向连接的可靠传输tcp协议&#34;&gt;面向连接的可靠传输—TCP协议
&lt;/h2&gt;&lt;p&gt;TCP是一个传输层协议，提供可靠传输，支持全双工，是一个连接导向的协议。数据任何时候都可以双向传输。&lt;/p&gt;
&lt;h3 id=&#34;tcp的主要特点&#34;&gt;TCP的主要特点
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;面向连接&lt;/strong&gt; ：双方传输数据之前，必须先建立一条通道&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可靠传输&lt;/strong&gt; ：TCP提供可靠的传输服务。传送的数据无差错、不丢失、不重复、按序到达，通过确认（ACK）、重传机制以及序列号，TCP 能够保证数据在不可靠的 IP 网络上可靠传输。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;面向字节流&lt;/strong&gt; ：虽然应用程序与TCP交互是一次一个大小不等的数据块，但TCP把这些数据看成一连串无结构的字节流，它不保证接收方收到的数据块和发送方发送的数据块具有对应大小关系，&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;差错检测&lt;/strong&gt; ：发现差错会重发报文段&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞控制&lt;/strong&gt; ：TCP 通过拥塞避免算法（如慢启动、拥塞避免、快速重传和快速恢复）来防止网络过载，协调整个网络的流量，使得每条TCP连接共享带宽&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流量控制&lt;/strong&gt; ：TCP 通过滑动窗口机制调节发送方的数据发送速率，防止接收方因为处理能力有限而被数据流淹没。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp报文格式&#34;&gt;TCP报文格式
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE/format,png-20230309230534096.png&#34;
	width=&#34;1053&#34;
	height=&#34;828&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;TCP 头格式&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;127&#34;
		data-flex-basis=&#34;305px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;报文段 = 首部 + 数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;首部&lt;/strong&gt; ：最小长度 &lt;strong&gt;20&lt;/strong&gt; 字节&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;源端口号和目的端口号&lt;/strong&gt; ：对应用层数据进行多路复用和多路分解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;序列号 &lt;code&gt;seq&lt;/code&gt;&lt;/strong&gt; ：在建立连接时由计算机生成的随机数作为其初始值，通过 SYN 包传给接收端主机，每发送一次数据，就累加一次该「数据字节数」的大小。&lt;strong&gt;用来解决网络包乱序问题。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;确认号 &lt;code&gt;ack&lt;/code&gt;&lt;/strong&gt; ：指下一次期望收到的数据的序列号，发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收。&lt;strong&gt;用来解决丢包的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;控制位&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;ACK&lt;/em&gt;：该位为 1 时，确认应答的字段变为有效，TCP 规定除了最初建立连接时的 SYN 包之外该位必须设置为 1 。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;RST&lt;/em&gt;：该位为 1 时，表示 TCP 连接中出现异常必须强制断开连接。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;端口未监听&lt;/strong&gt;：当主机接收到一个发往没有在监听的端口的 TCP 数据包时，会回复一个 &lt;code&gt;RST&lt;/code&gt; 报文来告知发送方该端口不可用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接异常关闭后&lt;/strong&gt;：如果一方出现崩溃、强制退出或被其他因素干扰导致连接中断，TCP 会使用 &lt;code&gt;RST&lt;/code&gt; 报文来通知对方连接已无法继续。（例如服务端断电重启后，客户端再次通过之前的连接请求，就会被返回一个 &lt;code&gt;RST&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据包冲突&lt;/strong&gt;：当某一方接收到的序列号不在预期范围内时，可能会发送 &lt;code&gt;RST&lt;/code&gt; 报文以重置连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重置无效的连接请求&lt;/strong&gt;：当主机收到与当前连接状态不符的请求时，例如在未建立连接时收到 &lt;code&gt;FIN&lt;/code&gt; 报文，会发送 &lt;code&gt;RST&lt;/code&gt; 报文表示无效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;SYN&lt;/em&gt;：该位为 1 时，表示希望建立连接，并在其「序列号」的字段进行序列号初始值的设定。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;FIN&lt;/em&gt;：该位为 1 时，表示今后不会再有数据发送，希望断开连接。当通信结束希望断开连接时，通信双方的主机之间就可以相互交换 FIN 位为 1 的 TCP 段。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;窗口&lt;/strong&gt;：滑动窗口大小，用来告知发送端接收端缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;校验和&lt;/strong&gt;：奇偶校验，此校验和是对整个的TCP报文段（包括TCP头部和TCP数据），以16位进行计算所得，由发送端计算和存储，接收端进行验证。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp粘包拆包&#34;&gt;TCP粘包，拆包
&lt;/h3&gt;&lt;h4 id=&#34;现象描述&#34;&gt;现象描述
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;粘包&lt;/strong&gt; ：在 TCP 传输中，发送方的多个数据包在接收方被合并成一个包接收，导致多条消息数据粘在一起，接收方无法正确区分这些消息的边界。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拆包&lt;/strong&gt; ：发送方的一个数据包在接收方被分成了多个包接收，导致一条完整的消息被拆成多个部分，接收方无法一次性接收到完整的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;出现原因&#34;&gt;出现原因
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;粘包&lt;/strong&gt; ：TCP是面向字节流的协议，把上层应用层的数据看成字节流，所以它发送的不是固定大小的数据包，TCP协议也没有字段说明发送数据包的大小。数据在发送方可能被一次性发送，接收方在读取时可能会将多个消息拼接在一起。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拆包&lt;/strong&gt; ：由于网络传输中的 MTU（最大传输单元）限制或发送缓冲区大小限制，一个大包被分成了多个小包传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解决方案&#34;&gt;解决方案
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;消息定长&lt;/strong&gt; ：每个发送的数据包大小固定，不足的部分用空格补充，接受方取数据的时候根据这个长度来读取数据&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息末尾增加换行符来表示一条完整的消息&lt;/strong&gt; ：接收方读取的时候根据换行符来判断是否是一条完整的消息，如果消息的内容也包含换行符，那么这种方式就不合适了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用消息头&lt;/strong&gt; ：在消息的头部添加一个长度字段，指示消息的长度，接收方根据这个长度来读取相应长度的数据。（UDP的设计方法）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp连接的基本认识&#34;&gt;TCP连接的基本认识
&lt;/h3&gt;&lt;p&gt;TCP 为每个数据流初始化并维护的某些状态信息（这些信息包括 socket、序列号和窗口大小），称为连接。&lt;/p&gt;
&lt;p&gt;建立一个 TCP 连接是需要客户端与服务端达成上述三个信息的共识。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Socket&lt;/strong&gt;：由 IP 地址和端口号组成，是通信的端点&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;序列号&lt;/strong&gt;：用来解决乱序问题，帮助于接收方按顺序重组数据包，并检测丢包情况&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;窗口大小&lt;/strong&gt;：用来做流量控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tcp连接的唯一确定&#34;&gt;TCP连接的唯一确定
&lt;/h4&gt;&lt;p&gt;TCP 四元组可以唯一标识一个连接&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源地址&lt;/li&gt;
&lt;li&gt;源端口&lt;/li&gt;
&lt;li&gt;目的地址&lt;/li&gt;
&lt;li&gt;目的端口&lt;/li&gt;
&lt;/ul&gt;
&lt;style type=&#34;text/css&#34;&gt;
   
  .notice {
    --title-color: #fff;
    --title-background-color: #6be;
    --content-color: #444;
    --content-background-color: #e7f2fa;
  }

  .notice.info {
    --title-background-color: #fb7;
    --content-background-color: #fec;
  }

  .notice.tip {
    --title-background-color: #5a5;
    --content-background-color: #efe;
  }

  .notice.warning {
    --title-background-color: #c33;
    --content-background-color: #fee;
  }

   
  @media (prefers-color-scheme: dark) {
    .notice {
      --title-color: #fff;
      --title-background-color: #069;
      --content-color: #ddd;
      --content-background-color: #023;
    }

    .notice.info {
      --title-background-color: #a50;
      --content-background-color: #420;
    }

    .notice.tip {
      --title-background-color: #363;
      --content-background-color: #121;
    }

    .notice.warning {
      --title-background-color: #800;
      --content-background-color: #400;
    }
  }

  body.dark .notice {
    --title-color: #fff;
    --title-background-color: #069;
    --content-color: #ddd;
    --content-background-color: #023;
  }

  body.dark .notice.info {
    --title-background-color: #a50;
    --content-background-color: #420;
  }

  body.dark .notice.tip {
    --title-background-color: #363;
    --content-background-color: #121;
  }

  body.dark .notice.warning {
    --title-background-color: #800;
    --content-background-color: #400;
  }

   
  .notice {
    width: 100%;  
    max-width: 600px;  
    padding: 18px;
    line-height: 24px;
    margin-bottom: 24px;
    border-radius: 4px;
    color: var(--content-color);
    background: var(--content-background-color);
  }

  .notice p:last-child {
    margin-bottom: 0;
  }

   
  .notice-title {
    margin: -18px -18px 12px;
    padding: 4px 18px;
    border-radius: 4px 4px 0 0;
    font-weight: 700;
    color: var(--title-color);
    background: var(--title-background-color);
  }

   
  .icon-notice {
    display: inline-flex;
    align-self: center;
    margin-right: 8px;
  }

  .icon-notice img,
  .icon-notice svg {
    height: 1em;
    width: 1em;
    fill: currentColor;
  }

  .icon-notice img,
  .icon-notice.baseline svg {
    top: 0.125em;
    position: relative;
  }
&lt;/style&gt;&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;TCP 三元组&lt;/p&gt;
&lt;p&gt;三元组指的是 IP 地址和端口号的组合，即 &lt;code&gt;IP 地址 + 端口号 + 协议类型&lt;/code&gt;。例如，&lt;code&gt;192.168.1.1:8080 (TCP)&lt;/code&gt; 就是一个三元组。在一个机器上，这样的组合唯一标识了一个网络服务或应用程序。&lt;/p&gt;&lt;/div&gt;

&lt;h3 id=&#34;tcp连接的建立三次握手&#34;&gt;TCP连接的建立—三次握手
&lt;/h3&gt;&lt;h4 id=&#34;握手过程&#34;&gt;握手过程
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE/1719902940519-03556a12-819b-42b4-b6f7-41b4448d9d99.png&#34;
	width=&#34;1221&#34;
	height=&#34;1019&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;三次握手&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;119&#34;
		data-flex-basis=&#34;287px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;握手前&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端和服务端都处于 &lt;code&gt;CLOSE&lt;/code&gt; 状态。先是服务端主动监听某个端口，处于 &lt;code&gt;LISTEN&lt;/code&gt; 状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第一次握手&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;客户端向服务端发送特殊的TCP报文段（SYN报文段），该报文段被封装到IP数据报中，客户端处于 &lt;code&gt;SYN-SENT&lt;/code&gt; 状态，表示向服务端发起连接，并告知服务器自己的初始序列号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SYN 报文段结构&lt;img src=&#34;https://Tyritic.github.io/p/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE/format,png-20230309230500953.png&#34;
	width=&#34;1173&#34;
	height=&#34;708&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;SYN 报文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;165&#34;
		data-flex-basis=&#34;397px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;客户端随机初始化序号（&lt;strong&gt;&lt;code&gt;client_isn&lt;/code&gt;&lt;/strong&gt;），设为x，填入序列号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;SYN&lt;/code&gt;&lt;/strong&gt; 字段置为1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;报文段不包含数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二次握手&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务端接收到 &lt;strong&gt;&lt;code&gt;SYN&lt;/code&gt;&lt;/strong&gt; 报文段，为TCP连接分配TCP缓存和变量，并向客户端发送允许连接的报文段 &lt;strong&gt;&lt;code&gt;(SYN + ACK)&lt;/code&gt;&lt;/strong&gt; ，服务端处于 &lt;strong&gt;&lt;code&gt;SYN-RCVD&lt;/code&gt;&lt;/strong&gt; 状态，表示的连接请求被接受了，并通知客户端自己的初始序列号。&lt;/li&gt;
&lt;li&gt;SYN+ACK 报文段结构&lt;img src=&#34;https://Tyritic.github.io/p/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE/format,png-20230309230504118.png&#34;
	width=&#34;1188&#34;
	height=&#34;708&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;SYN &amp;#43; ACK 报文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;167&#34;
		data-flex-basis=&#34;402px&#34;
	
&gt;
&lt;ul&gt;
&lt;li&gt;服务端随机初始化自己的序号（ &lt;strong&gt;&lt;code&gt;server_isn&lt;/code&gt;&lt;/strong&gt; ）设为y，填入序列号&lt;/li&gt;
&lt;li&gt;将确认应答号 &lt;strong&gt;&lt;code&gt;ack&lt;/code&gt;&lt;/strong&gt; 置为 &lt;strong&gt;&lt;code&gt;client_isn + 1&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;SYN和ACK字段置为1&lt;/li&gt;
&lt;li&gt;不携带数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;第二次握手为什么要传回ACK和SYN&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ACK：是第一次握手的确认报文，告知客户端从客户端到服务端的通信是正常的，服务端正确接收到客户端的信息&lt;/li&gt;
&lt;li&gt;SYN：建立并确认从服务端到客户端的通信&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​&lt;/p&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第三次握手
&lt;ul&gt;
&lt;li&gt;客户端收到服务端报文后，为TCP连接分配缓存和变量，客户端向服务端发送确认连接的报文（ACK报文），客户端处于 ESTABLISHED 状态。服务端收到客户端的应答报文后，也进入 ESTABLISHED 状态&lt;/li&gt;
&lt;li&gt;ACK报文结构&lt;img src=&#34;https://Tyritic.github.io/p/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE/1719902940762-a8cb1769-ed0d-4f73-aedf-116d918f23e3.png&#34;
	width=&#34;1188&#34;
	height=&#34;708&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ACK报文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;167&#34;
		data-flex-basis=&#34;402px&#34;
	
&gt;
&lt;ul&gt;
&lt;li&gt;将确认应答号 &lt;strong&gt;&lt;code&gt;ack&lt;/code&gt;&lt;/strong&gt; 置为 &lt;strong&gt;&lt;code&gt;server_isn + 1&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;将 &lt;strong&gt;&lt;code&gt;ACK&lt;/code&gt;&lt;/strong&gt; 字段置为1&lt;/li&gt;
&lt;li&gt;报文可以携带数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三次握手的必要性&#34;&gt;三次握手的必要性
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;三次握手才可以阻止重复历史连接的初始化（主要原因）
&lt;ul&gt;
&lt;li&gt;一个「旧 SYN 报文」比「最新的 SYN」 报文早到达了服务端，那么此时服务端就会回一个 SYN + ACK 报文给客户端，此报文中的确认号是 &lt;strong&gt;旧的SYN报文中的ISN+1&lt;/strong&gt;  。（第二次挥手）&lt;/li&gt;
&lt;li&gt;客户端收到后，发现自己期望收到的确认号应该是 &lt;strong&gt;新的SYN报文中的ISN+1&lt;/strong&gt; ，于是就会回 RST 报文。（第三次握手）&lt;/li&gt;
&lt;li&gt;服务端收到 RST 报文后，就会释放连接。&lt;/li&gt;
&lt;li&gt;后续最新的 SYN 抵达了服务端后，客户端与服务端就可以正常的完成三次握手了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三次握手才可以同步双方的初始序列号&lt;img src=&#34;https://Tyritic.github.io/p/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE/1713944607932-bc673dc4-6c94-45f5-a731-d583a44feba8.webp&#34;
	width=&#34;1080&#34;
	height=&#34;709&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;三次握手和四次握手&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;152&#34;
		data-flex-basis=&#34;365px&#34;
	
&gt;
&lt;ul&gt;
&lt;li&gt;当客户端发送携带初始序列号的 SYN 报文的时候，需要服务端回一个 ACK 应答报文，表示客户端的 SYN 报文已被服务端成功接收。&lt;/li&gt;
&lt;li&gt;当服务端发送初始序列号给客户端的时候，依然也要得到客户端的应答回应&lt;/li&gt;
&lt;li&gt;三次握手只是将服务端的ACK报文和SYN报文合为一步&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三次握手可以避免资源浪费
&lt;ul&gt;
&lt;li&gt;如果没有第三次握手，&lt;strong&gt;服务端不清楚客户端是否收到了自己回复的&lt;/strong&gt; &lt;strong&gt;ACK&lt;/strong&gt; &lt;strong&gt;报文&lt;/strong&gt; 。如果客户端发送的 SYN 报文在网络中阻塞了，重复发送多次 SYN 报文，那么服务端在收到请求后就会 &lt;strong&gt;建立多个冗余的无效链接，造成不必要的资源浪费。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;TCP连接为什么不设计成两次握手&lt;/p&gt;
&lt;p&gt;两次握手的形式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端 → SYN → 服务器。&lt;/li&gt;
&lt;li&gt;服务器 → ACK → 客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不设计为两次握手的原因&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;两次握手无法阻止重复历史连接的初始化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在两次握手的情况下，服务端没有中间状态给客户端来阻止历史连接，导致服务端可能建立一个历史连接，造成资源浪费&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;服务端在收到 SYN 报文后，就进入 &lt;strong&gt;ESTABLISHED&lt;/strong&gt; 状态，意味着这时可以给对方发送数据，但是客户端此时还没有进入 &lt;strong&gt;ESTABLISHED&lt;/strong&gt; 状态。&lt;/li&gt;
&lt;li&gt;假设这次是历史连接，客户端判断到此次连接为历史连接，那么就会回 RST 报文来断开连接，而服务端在第一次握手的时候就进入 &lt;strong&gt;ESTABLISHED&lt;/strong&gt; 状态，所以它可以发送数据的，但是它并不知道这个是历史连接，它只有在收到 RST 报文后，才会断开连接。&lt;/li&gt;
&lt;li&gt;服务端在向客户端发送数据前，并没有阻止掉历史连接，导致服务端建立了一个历史连接，又白白发送了数据，浪费了服务端的资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两次握手无法保持序列化的同步，只保证了一方的初始序列号能被对方成功接收，没办法保证双方的初始序列号都能被确认接收。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务端确认了客户端的初始序列号但是客户端无法确认服务端的序列化。后续数据传输可能因序列号不同步而混乱。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两次握手无法无法确认双向通信&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器发送 ACK 后，认为连接已建立，但客户端可能未收到 ACK（例如网络丢包）。&lt;/li&gt;
&lt;li&gt;客户端无法确认服务器的接收能力，服务器也无法确认客户端是否收到 ACK。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两次握手无法识别历史连接&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果握手只有两次，那么接收方应对发送方的请求只能拒绝或者接受，但是&lt;strong&gt;它无法识别当前的请求是旧的请求还是新的请求&lt;/strong&gt;。由于没有第三次握手，服务端不清楚客户端是否收到了自己回复的 ACK 报文，所以服务端每收到一个 SYN 就只能先主动建立一个连接。&lt;/li&gt;
&lt;li&gt;如果客户端发送的 SYN 报文在网络中阻塞了，重复发送多次 SYN 报文，那么服务端在收到请求后就会&lt;strong&gt;建立多个冗余的无效链接，造成不必要的资源浪费。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;h4 id=&#34;初始序列号isn&#34;&gt;初始序列号ISN
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了防止历史报文被下一个相同四元组的连接接收
&lt;ul&gt;
&lt;li&gt;当客户端和服务端中出现连接中断，若客户端又与服务端建立了与上一个连接相同四元组的连接，上一个连接中被网络阻塞的数据包正好抵达了服务端，刚好该数据包的序列号正好是在服务端的接收窗口内，所以该数据包会被服务端正常接收，就会造成数据错乱。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为了安全性，防止黑客伪造的相同序列号的 TCP 报文被对方接收&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;生成过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;初始序列号 ISN 是以时间戳为基础生成的。&lt;/p&gt;
&lt;h4 id=&#34;握手丢失&#34;&gt;握手丢失
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;第一次握手丢失（客户端发送SYN报文丢失）：客户端触发超时重传机制
&lt;ul&gt;
&lt;li&gt;服务端：不会进行任何的动作&lt;/li&gt;
&lt;li&gt;客户端：发完SYN报文后处于 &lt;strong&gt;SYN_SENT&lt;/strong&gt; 状态。由于一段时间内没有收到服务端发来的确认报文，等待一段时间后会重新发送 SYN 报文（ &lt;strong&gt;重传的 SYN 报文的序列号都是一样的&lt;/strong&gt; ），如果仍然没有回应，会重复这个过程，直到发送次数超过最大重传次数限制，就会返回连接建立失败。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第二次握手丢失（服务端发送SYN+ACK报文丢失）：客户端和服务端均触发超时重传机制
&lt;ul&gt;
&lt;li&gt;客户端：第二次握手报文里是包含对客户端的第一次握手的 ACK 确认报文，如果客户端迟迟没有收到第二次握手，那么客户端就觉得可能自己的 SYN 报文（第一次握手）丢失了，于是 &lt;strong&gt;客户端就会触发超时重传机制，重传 SYN 报文（第一次握手）&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;服务端：第二次握手中包含服务端的 SYN 报文，所以当客户端收到后，需要给服务端发送 ACK 确认报文（第三次握手），服务端才会认为该 SYN 报文被客户端收到了。那么，如果第二次握手丢失了，服务端就收不到第三次握手，于是 &lt;strong&gt;服务端这边会触发超时重传机制，重传 SYN-ACK 报文（第二次握手）&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第三次握手丢失（客户端发送的ACK报文丢失）：服务端触发超时重传机制
&lt;ul&gt;
&lt;li&gt;客户端：发完SYN报文后处于 &lt;strong&gt;ESTABLISHED&lt;/strong&gt; 状态&lt;/li&gt;
&lt;li&gt;服务端：第三次握手的 ACK 报文是对第二次握手的 SYN 的确认报文，所以当第三次握手丢失了，如果服务端那一方迟迟收不到这个确认报文，就会触发超时重传机制，重传 SYN-ACK 报文，直到收到第三次握手，或者达到最大重传次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tcp半连接&#34;&gt;TCP半连接
&lt;/h4&gt;&lt;p&gt;TCP 半连接指的是在 TCP 三次握手过程中，服务器接收到了客户端的 SYN 包，但还没有完成第三次握手，此时的连接处于一种未完全建立的状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;半连接队列和全连接队列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TCP 进入三次握手前，服务端会从 &lt;strong&gt;CLOSED&lt;/strong&gt; 状态变为 &lt;strong&gt;LISTEN&lt;/strong&gt; 状态, 同时在内部创建了两个队列：半连接队列（SYN 队列）和全连接队列（ACCEPT 队列）。&lt;/p&gt;
&lt;p&gt;半连接队列存放的是三次握手未完成的连接，全连接队列存放的是完成三次握手的连接&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端发送 SYN 到服务端，服务端收到之后，便回复 &lt;strong&gt;ACK 和 SYN&lt;/strong&gt;，状态由 &lt;strong&gt;LISTEN 变为 SYN_RCVD&lt;/strong&gt;，此时这个连接就被推入了 &lt;strong&gt;SYN 队列&lt;/strong&gt;，即半连接队列。&lt;/li&gt;
&lt;li&gt;当客户端回复 ACK, 服务端接收后，三次握手就完成了。这时连接会等待被具体的应用取走，在被取走之前，它被推入 ACCEPT 队列，即全连接队列。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;syn洪泛攻击&#34;&gt;SYN洪泛攻击
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;实现原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SYN 洪泛 是一种拒绝服务攻击（DoS）。攻击者伪造&lt;strong&gt;不存在的 IP 地址&lt;/strong&gt;, 向服务器发送大量 SYN 报文。当服务器回复 SYN+ACK 报文后，不会收到 ACK 回应报文，那么 SYN 队列里的连接旧不会出对队，久⽽久之就会占满服务端的 &lt;strong&gt;SYN&lt;/strong&gt; 接收队列（半连接队列），使得服务器不能为正常⽤户服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;应对策略&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;syn cookie&lt;/strong&gt;：在收到 SYN 包后，服务器根据一定的方法，以数据包的源地址、端口等信息为参数计算出一个 cookie 值作为自己的 SYNACK 包的序列号，回复 SYN+ACK 后，服务器并不立即分配资源进行处理，等收到发送方的 ACK 包后，重新根据数据包的源地址、端口计算该包中的确认序列号是否正确，如果正确则建立连接，否则丢弃该包。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SYN Proxy 防火墙&lt;/strong&gt;：服务器防火墙会对收到的每一个 SYN 报文进行代理和回应，并保持半连接。等发送方将 ACK 包返回后，再重新构造 SYN 包发到服务器，建立真正的 TCP 连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp连接的断开四次挥手&#34;&gt;TCP连接的断开—四次挥手
&lt;/h3&gt;&lt;h4 id=&#34;挥手过程&#34;&gt;挥手过程
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE/format,png-20230309230614791.png&#34;
	width=&#34;753&#34;
	height=&#34;794&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;客户端主动关闭连接 —— TCP 四次挥手&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;94&#34;
		data-flex-basis=&#34;227px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一次挥手
&lt;ul&gt;
&lt;li&gt;客户端主动关闭连接，发送 FIN 包。服务器收到 FIN 后，表示不再接收数据，但仍可能继续发送数据。
&lt;ul&gt;
&lt;li&gt;客户端进入 &lt;strong&gt;&lt;code&gt;FIN_WAIT_1&lt;/code&gt;&lt;/strong&gt; 状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第二次挥手
&lt;ul&gt;
&lt;li&gt;服务器发送 ACK 包，确认已收到 FIN。在收到 FIN 报文的时候，TCP 协议栈会为 FIN 包插入一个文件结束符 EOF 到接收缓冲区中，服务端应用程序可以通过 read 调用来感知这个 FIN 包，这个 EOF 会被&lt;strong&gt;放在已排队等候的其他已接收的数据之后&lt;/strong&gt;，所以必须要得继续 read 接收缓冲区已接收的数据；&lt;/li&gt;
&lt;li&gt;双方状态
&lt;ul&gt;
&lt;li&gt;服务器进入 &lt;strong&gt;&lt;code&gt;CLOSE_WAIT&lt;/code&gt;&lt;/strong&gt; 状态&lt;/li&gt;
&lt;li&gt;客户端进入 &lt;strong&gt;&lt;code&gt;FIN_WAIT_2&lt;/code&gt;&lt;/strong&gt; 状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第三次挥手
&lt;ul&gt;
&lt;li&gt;服务器完成所有数据传输后，发送 FIN 包。客户端收到 FIN 后，准备关闭连接。
&lt;ul&gt;
&lt;li&gt;服务端进入 &lt;strong&gt;&lt;code&gt;LAST_ACK&lt;/code&gt;&lt;/strong&gt; 状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第四次挥手
&lt;ul&gt;
&lt;li&gt;客户端发送最后一个 ACK 包，并等待可能迟到的 FIN 包。服务器收到 ACK 后，关闭连接。客户端在 TIME_WAIT 计时结束后（2MSL），正式关闭连接。&lt;/li&gt;
&lt;li&gt;双方状态
&lt;ul&gt;
&lt;li&gt;服务端进入 &lt;strong&gt;&lt;code&gt;CLOSED&lt;/code&gt;&lt;/strong&gt; 状态&lt;/li&gt;
&lt;li&gt;客户端进入 &lt;strong&gt;&lt;code&gt;TIME_WAIT&lt;/code&gt;&lt;/strong&gt; 状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;四次挥手的必要性&#34;&gt;四次挥手的必要性
&lt;/h4&gt;&lt;p&gt;主要是为了&lt;strong&gt;确保数据完整性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;TCP 是一个全双工协议，也就是说双方都要关闭，每一方都向对方发送 FIN 和回应 ACK。&lt;/p&gt;
&lt;p&gt;客户端发起连接断开，代表客户端没数据要发送的，但是服务端可能还有数据没有返回给客户端。&lt;/p&gt;
&lt;p&gt;所以一个 FIN + ACK 代表一方结束数据的传输，因此需要两对 FIN + ACK，加起来就是四次通信。&lt;/p&gt;
&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;四次挥手变成三次挥手的情况&lt;/p&gt;
&lt;p&gt;如果客户端发送 FIN 给服务端的时候服务端已经没数据发送给客户端了并且开启了 TCP 延迟确认机制，那么服务端就可以&lt;strong&gt;将 ACK （第二次挥手）和它的 FIN（第三次挥手） 合并传输&lt;/strong&gt; 一起发给客户端，这样一来就变成三次挥手&lt;/p&gt;
&lt;p&gt;TCP延迟确认机制&lt;/p&gt;
&lt;p&gt;当发送没有携带数据的 ACK，它的网络效率也是很低的，因为它也有 40 个字节的 IP 头 和 TCP 头，但却没有携带数据报文。 为了解决 ACK 传输效率低问题，所以就衍生出了 &lt;strong&gt;TCP 延迟确认&lt;/strong&gt;。 TCP 延迟确认的策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当有响应数据要发送时，ACK 会随着响应数据一起立刻发送给对方&lt;/li&gt;
&lt;li&gt;当没有响应数据要发送时，ACK 将会延迟一段时间，以等待是否有响应数据可以一起发送&lt;/li&gt;
&lt;li&gt;如果在延迟等待发送 ACK 期间，对方的第二个数据报文又到达了，这时就会立刻发送 ACK&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;h4 id=&#34;挥手丢失&#34;&gt;挥手丢失
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;第一次挥手丢失
&lt;ul&gt;
&lt;li&gt;客户端：迟迟收不到被动方的 ACK 的话，也就会触发超时重传机制
&lt;ul&gt;
&lt;li&gt;重传 FIN 报文（第一次握手），重发次数由 &lt;code&gt;tcp_orphan_retries&lt;/code&gt; 参数控制。&lt;/li&gt;
&lt;li&gt;当客户端重传 FIN 报文的次数超过 &lt;code&gt;tcp_orphan_retries&lt;/code&gt; 后，就不再发送 FIN 报文，则会在等待一段时间（时间为上一次超时时间的 2 倍）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务端：不会有任何动作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第二次挥手丢失
&lt;ul&gt;
&lt;li&gt;客户端：就会触发超时重传机制
&lt;ul&gt;
&lt;li&gt;重传 FIN 报文（第一次报文），直到收到服务端的第二次挥手，或者达到最大的重传次数。&lt;/li&gt;
&lt;li&gt;已达到最大重传次数，于是再等待一段时间（时间为上一次超时时间的 2 倍），如果还是没能收到服务端的第二次挥手（ACK 报文），那么客户端就会断开连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务端：不会有任何动作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第三次挥手丢失
&lt;ul&gt;
&lt;li&gt;服务端：触发重传机制
&lt;ul&gt;
&lt;li&gt;重发 FIN 报文，重发次数仍然由 &lt;strong&gt;&lt;code&gt;tcp_orphan_retries&lt;/code&gt;&lt;/strong&gt; 参数控制，这与客户端重发 FIN 报文的重传次数控制方式是一样的。&lt;/li&gt;
&lt;li&gt;当服务端重传第三次挥手报文的次数达到了 3 次后，由于 &lt;strong&gt;&lt;code&gt;tcp_orphan_retries&lt;/code&gt;&lt;/strong&gt; 为 3，达到了重传最大次数，于是再等待一段时间（时间为上一次超时时间的 2 倍），如果还是没能收到客户端的第四次挥手（ACK报文），那么服务端就会断开连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客户端：处于 FIN_WAIT_2 状态是有时长限制的，如果 tcp_fin_timeout 时间内还是没能收到服务端的第三次挥手（FIN 报文），那么客户端就会断开连接&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第四次挥手丢失
&lt;ul&gt;
&lt;li&gt;服务端：触发重传机制
&lt;ul&gt;
&lt;li&gt;当服务端重传第三次挥手报文达到 2 时，由于 tcp_orphan_retries 为 2， 达到了最大重传次数，于是再等待一段时间（时间为上一次超时时间的 2 倍），如果还是没能收到客户端的第四次挥手（ACK 报文），那么服务端就会断开连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客户端：进入 &lt;strong&gt;&lt;code&gt;TIME_WAIT&lt;/code&gt;&lt;/strong&gt; 状态，开启时长为 2MSL 的定时器，如果途中再次收到第三次挥手（FIN 报文）后，就会重置定时器，当等待 2MSL 时长后，客户端就会断开连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;time_wait状态&#34;&gt;TIME_WAIT状态
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保证被动关闭连接的一方，能被正确的关闭： &lt;strong&gt;&lt;code&gt;TIME_WAIT&lt;/code&gt;&lt;/strong&gt; 状态中，客户端可以重新发送 ACK 确保对方正常关闭连接。
&lt;ul&gt;
&lt;li&gt;在 TCP 四次挥手过程中，主动关闭连接的一方在发送最后一个 ACK 确认包后进入 &lt;strong&gt;TIME_WAIT&lt;/strong&gt; 状态。&lt;/li&gt;
&lt;li&gt;如果这个 ACK 丢失了，另一方（被动关闭连接的一方）没有收到确认包，会重发 FIN 报文。主动关闭的一方需要在 &lt;strong&gt;TIME_WAIT&lt;/strong&gt; 状态下保持一段时间，以便能够重发 ACK，确保连接能被正确地关闭。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;防止历史连接中的数据，被后面相同四元组的连接错误的接收：在 &lt;strong&gt;&lt;code&gt;TIME_WAIT&lt;/code&gt;&lt;/strong&gt; 持续的 2MSL 时间后，确保旧数据包完全消失，避免它们干扰未来建立的新连接。
&lt;ul&gt;
&lt;li&gt;TCP 连接在关闭后，可能会有一些延迟的或者已经失效的报文还在网络中传输。如果立即重新使用相同的 IP 地址和端口建立新的连接，可能会受到这些旧报文的干扰。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TIME_WAIT&lt;/strong&gt; 状态可以确保在旧连接的所有报文都超时失效后，才允许新的连接使用相同的 IP 地址和端口，从而避免数据混乱。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;为什么 &lt;strong&gt;&lt;code&gt;TIME_WAIT&lt;/code&gt;&lt;/strong&gt; 等待时间为2MSL&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;MSL&lt;/code&gt;&lt;/strong&gt; 是 Maximum Segment Lifetime，&lt;strong&gt;报文最大生存时间&lt;/strong&gt;，它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。&lt;/p&gt;
&lt;p&gt;网络中可能存在来自发送方的数据包，当这些发送方的数据包被接收方处理后又会向对方发送响应，所以 &lt;strong&gt;一来一回需要等待 2 倍的时间&lt;/strong&gt;。&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;TIME_WAIT状态过多的危害&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;占用系统资源：比如文件描述符、内存资源、CPU 资源、线程资源等；&lt;/li&gt;
&lt;li&gt;占用端口资源：端口资源也是有限的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;原因&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 没有使用长连接&lt;/li&gt;
&lt;li&gt;大量HTTP 长连接超时&lt;/li&gt;
&lt;li&gt;单条HTTP 长连接的请求数量达到上限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开 net.ipv4.tcp_tw_reuse 和 net.ipv4.tcp_timestamps 选项：&lt;strong&gt;复用处于 TIME_WAIT 的 socket 为新的连接所用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;net.ipv4.tcp_max_tw_buckets：&lt;strong&gt;当系统中处于 TIME_WAIT 的连接一旦超过这个值时，系统就会将后面的 TIME_WAIT 连接状态重置&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;程序中使用 SO_LINGER ，应用强制使用 RST 关闭。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;close_wait状态&#34;&gt;CLOSE_WAIT状态
&lt;/h4&gt;&lt;p&gt;CLOSE_WAIT状态的作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持半关闭状态：TCP 是全双工协议，发送和接收通道独立。
&lt;ul&gt;
&lt;li&gt;允许服务器在收到 FIN 后继续发送剩余数据。&lt;/li&gt;
&lt;li&gt;半关闭状态确保服务器能优雅地完成任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;确保被动方控制关闭时机
&lt;ul&gt;
&lt;li&gt;给服务器缓冲时间，应用程序决定何时发送 FIN。&lt;/li&gt;
&lt;li&gt;避免数据丢失，保证关闭的可靠性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;防止数据丢失
&lt;ul&gt;
&lt;li&gt;服务器在 CLOSE_WAIT 期间处理剩余数据并发送。&lt;/li&gt;
&lt;li&gt;确保数据传输完整性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;连接的强制断开&#34;&gt;连接的强制断开
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RST（Reset）标志&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用 TCP RST 标志可以强制立即终止连接。发送方可以直接发送带有 RST 标志的 TCP 报文，通知对方立即断开连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;超时（Timeout）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;如果连接一段时间内没有任何数据包传输，连接双方可以依据设定的超时时间自动断开连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tcp的可靠传输原理&#34;&gt;TCP的可靠传输原理
&lt;/h3&gt;&lt;h4 id=&#34;检验和&#34;&gt;检验和
&lt;/h4&gt;&lt;p&gt;TCP 报文段包括一个校验和字段，用于检测报文段在传输过程中的变化。如果接收方检测到校验和错误，就会丢弃这个报文段&lt;img src=&#34;https://Tyritic.github.io/p/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE/weixin-mianznxjsjwllsewswztwxxssc-d875c766-0c96-4733-8ca6-181d31c0f83d.jpg&#34;
	width=&#34;996&#34;
	height=&#34;298&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;三分恶面渣逆袭：TCP 校验和&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;334&#34;
		data-flex-basis=&#34;802px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;重传机制和序列号确认机制&#34;&gt;重传机制和序列号确认机制
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;序列号/确认机制&lt;/strong&gt;：TCP 将数据分成多个小段，每段数据都有唯一的序列号，以确保数据包的顺序传输和完整性。同时，发送方如果没有收到接收方的确认应答，会重传数据。&lt;img src=&#34;https://Tyritic.github.io/p/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE/weixin-mianznxjsjwllsewswztwxxssc-cbf040f5-ccc5-437d-98c4-711701e47113.jpg&#34;
	width=&#34;818&#34;
	height=&#34;594&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;序列号/确认应答&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;137&#34;
		data-flex-basis=&#34;330px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重传机制&lt;/strong&gt; ：用于防止数据包的丢失。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;超时重传：发送数据时，设定一个定时器，当超过指定的时间后，没有收到对方的 &lt;code&gt;ACK&lt;/code&gt; 确认应答报文，就会重发该数据
&lt;ul&gt;
&lt;li&gt;发生条件
&lt;ul&gt;
&lt;li&gt;数据包丢失：发送方重新发送数据包&lt;/li&gt;
&lt;li&gt;确认应答丢失：发送方重新发送数据包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;快速重传：发送方连续收到三次相同 ACK，会在定时器过期之前，重传丢失的报文段。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;SACK方法&lt;/strong&gt; ：带选择确认的重传&lt;/p&gt;
&lt;p&gt;传统的 TCP 使用累计确认（Cumulative ACK）机制，只能确认到达的连续数据段，无法有效告知发送方中间某些数据段的丢失或乱序情况。结果是发送方只能依赖超时或重复 ACK 来重传数据，这可能导致不必要的重传，浪费带宽，降低效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SACK可以将已收到的数据的信息发送给「发送方」&lt;/strong&gt;，这样发送方就可以知道哪些数据收到了，哪些数据没收到，知道了这些信息，就可以&lt;strong&gt;只重传丢失的数据&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE/sM13suJb_173347d1-465e-4eb7-b686-e0ee6efff1cc_mianshiya.png&#34;
	width=&#34;1024&#34;
	height=&#34;768&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;SACK方法示例&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;通过 ACK 告知我接下来要 5500 开始的数据，并一直更新 SACK，6000-6500 收到了，6000-7000的数据收到了，6000-7500的数据我收到了，发送方很明确的知道，5500-5999 的那一波数据应该是丢了，于是重传。&lt;/p&gt;
&lt;h4 id=&#34;滑动窗口机制&#34;&gt;滑动窗口机制
&lt;/h4&gt;&lt;p&gt;TCP 滑动窗口机制的主要作用是实现流量控制（Flow Control），即协调发送方和接收方的数据传输速率，确保发送方不会发送超出接收方处理能力的数据量，防止接收端缓冲区溢出。&lt;/p&gt;
&lt;p&gt;滑动窗口允许发送方在未收到前一个数据包的确认（ACK）前继续发送多个数据包，从而提高网络吞吐量，减少等待时间，实现高效的数据流传输。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE/15.jpg&#34;
	width=&#34;857&#34;
	height=&#34;602&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;用滑动窗口方式并行处理&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;341px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;累计确认机制：图中的 ACK 600 确认应答报文丢失，也没关系，因为可以通过下一个确认应答进行确认，只要发送方收到了 ACK 700 确认应答，就意味着 700 之前的所有数据「接收方」都收到了。&lt;/p&gt;
&lt;h4 id=&#34;拥塞控制&#34;&gt;拥塞控制
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;慢启动&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;发送方在连接建立初期，缓慢地增加数据发送速率。初始的拥塞窗口（cwnd）通常为一个 MSS（最大报文段大小），然后在每次收到 ACK 后成倍增加 cwnd，直到达到慢启动阈值（ssthresh）或检测到网络拥塞。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞避免&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;当 cwnd 达到 ssthresh 后，TCP 进入拥塞避免阶段，拥塞窗口的增长速度从指数变为线性增长，即每个 RTT（往返时间）增加一个 MSS。这一阶段旨在避免激烈的拥塞反应，保持网络稳定性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞发生&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;当网络出现拥塞，也就是会发生数据包重传
&lt;ul&gt;
&lt;li&gt;超时重传
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ssthresh&lt;/code&gt; 设为 &lt;code&gt;cwnd/2&lt;/code&gt;，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cwnd&lt;/code&gt; 重置为 &lt;code&gt;1&lt;/code&gt; （是恢复为 cwnd 初始化值，我这里假定 cwnd 初始化值 1）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;快速重传
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cwnd = cwnd/2&lt;/code&gt; ，也就是设置为原来的一半;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssthresh = cwnd&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速恢复（Fast Recovery）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;在快速重传后，TCP 不进入慢启动，而是减小 cwnd 到当前的一半，并设置 ssthresh 为当前新的 cwnd 的值，然后开始线性增加 cwnd，以快速恢复到丢包前的传输速率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保活机制&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;如果两端的 TCP 连接一直没有数据交互，达到了触发 TCP 保活机制的条件，那么内核里的 TCP 协议栈就会发送探测报文。&lt;/li&gt;
&lt;li&gt;如果对端程序是正常工作的。当 TCP 保活的探测报文发送给对端, 对端会正常响应，这样 &lt;strong&gt;TCP 保活时间会被重置&lt;/strong&gt;，等待下一个 TCP 保活时间的到来。&lt;/li&gt;
&lt;li&gt;如果对端主机宕机（&lt;em&gt;注意不是进程崩溃，进程崩溃后操作系统在回收进程资源的时候，会发送 FIN 报文，而主机宕机则是无法感知的，所以需要 TCP 保活机制来探测对方是不是发生了主机宕机&lt;/em&gt;），或对端由于其他原因导致报文不可达。当 TCP 保活的探测报文发送给对端后，石沉大海，没有响应，连续几次，达到保活探测次数后，&lt;strong&gt;TCP 会报告该 TCP 连接已经死亡&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;HTTP Keep-Alive 和 TCP Keep-Alive&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 的 Keep-Alive 也叫 HTTP 长连接，该功能是由 &lt;strong&gt;应用程序&lt;/strong&gt; 实现的，可以使得用同一个 TCP 连接来发送和接收多个 HTTP 请求/应答，减少了 HTTP 短连接带来的多次 TCP 连接建立和释放的开销。&lt;/li&gt;
&lt;li&gt;TCP 的 Keepalive 也叫 TCP 保活机制，该功能是由 &lt;strong&gt;内核&lt;/strong&gt; 实现的，当客户端和服务端长达一定时间没有进行数据交互时，内核为了确保该连接是否还有效，就会发送探测报文，来检测对方是否还在线，然后来决定是否要关闭该连接。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;h2 id=&#34;非面向连接的不可靠传输-udp协议&#34;&gt;非面向连接的不可靠传输-UDP协议
&lt;/h2&gt;&lt;h3 id=&#34;udp的主要特点&#34;&gt;UDP的主要特点
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;非面向连接&lt;/strong&gt; ：进程之间通信之前没有握手过程，而是将带有目的地址的报文放入线路&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不可靠服务&lt;/strong&gt; ：不确保报文段按序交付，不保证报文的完整性&lt;/li&gt;
&lt;li&gt;不提供拥塞控制和流量控制&lt;/li&gt;
&lt;li&gt;使用场景：实时通讯、语音、视频、游戏等高性能要求应用&lt;/li&gt;
&lt;li&gt;面向报文段&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;udp报文结构&#34;&gt;UDP报文结构
&lt;/h3&gt;&lt;p&gt;报文段结构：数据字段 + 首部字段&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE/wangluo-a5d0d209-01db-4ee7-b63b-bf2659545702.png&#34;
	width=&#34;1486&#34;
	height=&#34;638&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;UDP报文结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;232&#34;
		data-flex-basis=&#34;558px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首部
&lt;ul&gt;
&lt;li&gt;源端口：这个字段占据 UDP 报文头的前 16 位，通常包含发送数据报的应用程序所使用的 UDP 端口，接收端的应用程序利用这个字段的值作为发送响应的目的地址，这个字段是可选的，所以发送端的应用程序不一定会把自己的端口号写入该字段中，如果不写入端口号，则把这个字段设置为 0，这样，接收端的应用程序就不能发送响应了。&lt;/li&gt;
&lt;li&gt;目的端口：接收端计算机上 UDP 软件使用的端口，占据 16 位。&lt;/li&gt;
&lt;li&gt;长度：该字段占据 16 位，表示 UDP 数据报长度，包含 UDP 报文头和 UDP 数据长度，因为 UDP 报文头长度是 8 个字节，所以这个值最小为 8。&lt;/li&gt;
&lt;li&gt;校验值：该字段占据 16 位，可以检验数据在传输过程中是否被损坏。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据部分&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>应用层协议</title>
        <link>https://Tyritic.github.io/p/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE/</link>
        <pubDate>Sun, 09 Jun 2024 10:51:40 +0800</pubDate>
        
        <guid>https://Tyritic.github.io/p/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE/</guid>
        <description>&lt;h2 id=&#34;网络应用程序的常见架构&#34;&gt;网络应用程序的常见架构
&lt;/h2&gt;&lt;h3 id=&#34;客户端服务器结构cs结构&#34;&gt;客户端—服务器结构（CS结构）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;设置一台或多台高性能计算机（服务器集群）作为服务端，接受其他主机（客户端）的请求
&lt;ul&gt;
&lt;li&gt;服务端总是打开，并具有固定的地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客户端之间 &lt;strong&gt;不能直接通信&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;需要安装特定的客户端软件，该客户端需要承担部分业务逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;浏览器服务器结构bs结构&#34;&gt;浏览器—服务器结构（BS结构）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;客户端仅使用浏览器（Browser）作为访问入口&lt;/strong&gt;，完成不需要安装额外的软件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;所有的业务逻辑和数据处理都在服务器端（Server）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;点对点结构p2p结构&#34;&gt;点对点结构（P2P结构）
&lt;/h3&gt;&lt;p&gt;P2P（Peer-to-Peer）架构是一种&lt;strong&gt;去中心化的网络架构&lt;/strong&gt;，每个节点（Peer）既可以作为&lt;strong&gt;客户端（请求资源）&lt;/strong&gt;，也可以作为&lt;strong&gt;服务器（提供资源）&lt;/strong&gt;，节点之间可以直接通信、共享资源，而无需依赖中央服务器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对服务器具有最小依赖&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;具有自拓展性&lt;/strong&gt; ：网络能够随着节点（Peer）数量的增加，自主扩展计算能力、存储容量和带宽，而不依赖中央服务器。每个对等节点都由于接受请求产生工作负荷，但是每个对等节点向其他对等节点分发文件也为系统增加服务能力&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程与网络之间的接口socket&#34;&gt;进程与网络之间的接口（Socket）
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Socket（套接字）&lt;/strong&gt; 是计算机网络中用于 &lt;strong&gt;进程间通信（IPC, Inter-Process Communication）&lt;/strong&gt; 的一种机制，它可以让不同计算机上的进程通过网络进行通信。Socket 提供了一种标准化的接口，使应用程序能够发送和接收数据，而不需要关心底层网络协议的实现细节。&lt;/p&gt;
&lt;h2 id=&#34;超文本传输协议http&#34;&gt;超文本传输协议（HTTP）
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;HTTP（超文本传输协议，HyperText Transfer Protocol）&lt;/strong&gt; 是一种 &lt;strong&gt;无状态、基于请求-响应模式&lt;/strong&gt; 的 &lt;strong&gt;应用层协议&lt;/strong&gt; ，用于在 &lt;strong&gt;Web 浏览器和服务器之间&lt;/strong&gt; 传输数据，如 HTML 页面、图片、视频等。&lt;/p&gt;
&lt;p&gt;HTTP 是 &lt;strong&gt;互联网的基础协议&lt;/strong&gt;，它构建在 &lt;strong&gt;TCP/IP 协议&lt;/strong&gt; 之上，使得客户端（如浏览器）和服务器可以相互通信。默认端口为 80&lt;/p&gt;
&lt;h3 id=&#34;uri和url&#34;&gt;URI和URL
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;URI(Uniform Resource Identifier)&lt;/strong&gt; 全称是统一资源标志符，可以唯一标识一个资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;URL(Uniform Resource Locator)&lt;/strong&gt; 全称是统一资源定位符，可以提供该资源的路径。它是一种具体的 URI，即 URL 可以用来标识一个资源，而且还指明了如何 locate 这个资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基本工作模型&#34;&gt;基本工作模型
&lt;/h3&gt;&lt;p&gt;基于 &lt;strong&gt;请求—响应&lt;/strong&gt; 模型进行工作，客户端向服务器发送 HTTP Request（请求），服务器响应请求并返回 HTTP Response（响应）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE/450px-HTTP-Header.png&#34;
	width=&#34;450&#34;
	height=&#34;340&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;基本工作模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;317px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HTTP客户端先建立与服务端的TCP连接&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器发起到服务器的 TCP 连接（创建套接字 &lt;strong&gt;&lt;code&gt;Socket&lt;/code&gt;&lt;/strong&gt;）。&lt;/li&gt;
&lt;li&gt;服务器接收来自浏览器的 TCP 连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端进程和服务器进程通过 &lt;strong&gt;&lt;code&gt;Socket&lt;/code&gt;&lt;/strong&gt; 访问网络连接&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端从 &lt;strong&gt;&lt;code&gt;Socket&lt;/code&gt;&lt;/strong&gt; 发出请求并接受响应&lt;/li&gt;
&lt;li&gt;服务端从 &lt;strong&gt;&lt;code&gt;Socket&lt;/code&gt;&lt;/strong&gt; 接受请求并发送响应&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;协议特点&#34;&gt;协议特点
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无状态协议&lt;/strong&gt; ：HTTP 协议是 &lt;strong&gt;无状态&lt;/strong&gt; 的协议，它无法记录客户端用户的状态，一般我们都是通过 &lt;strong&gt;&lt;code&gt;Session&lt;/code&gt;&lt;/strong&gt; 来记录客户端用户的状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;明文传输&lt;/strong&gt; ：默认情况下数据不加密，容易被监听（可用 HTTPS 加密）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于请求—响应机制&lt;/strong&gt; ：客户端发送请求，服务器返回响应。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可靠传输&lt;/strong&gt; ：HTTP 通过 &lt;strong&gt;TCP协议（三次握手）&lt;/strong&gt; 确保可靠传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http状态码&#34;&gt;HTTP状态码
&lt;/h3&gt;&lt;p&gt;状态码由 &lt;strong&gt;3&lt;/strong&gt; 位数字组成，第一位定义 &lt;strong&gt;响应的类别&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1xx: 信息响应&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;100 Continue&lt;/strong&gt;：服务器已接收请求的初步部分，客户端应继续请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;101 Switching Protocols&lt;/strong&gt;：服务器同意切换协议，如从 HTTP 切换到 WebSocket。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2xx: 成功&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;200 OK&lt;/strong&gt;：请求成功，服务器返回所请求的资源或数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;201 Created&lt;/strong&gt;：请求成功并创建了新的资源，常用于 POST 请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;204 No Content&lt;/strong&gt;：请求成功但服务器不返回任何内容，常用于删除操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;206 Partial Content&lt;/strong&gt; ：应用于 HTTP 分块下载或断点续传，表示响应返回的 body 数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;3xx: 重定向&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;301 Moved Permanently&lt;/strong&gt;：资源已永久移动到新的 URL，客户端应使用新 URL 访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;302 Found&lt;/strong&gt;：资源临时移动到新的 URL，客户端应继续使用原来的 URL。搜索引擎会抓取新的内容而保存旧的网址并认为新的网址只是暂时的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;304 Not Modified&lt;/strong&gt;：资源未修改，客户端可以使用缓存版本。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;4xx: 客户端错误&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;400 Bad Request&lt;/strong&gt;：请求无效或语法错误，服务器无法处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;401 Unauthorized&lt;/strong&gt;：请求需要身份验证，客户端未提供有效的凭证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;403 Forbidden&lt;/strong&gt;：服务器理解请求但拒绝执行，通常是权限问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;404 Not Found&lt;/strong&gt;：请求的资源在服务器上未找到。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;5xx: 服务器错误&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;500 Internal Server Error&lt;/strong&gt;：服务器内部错误，无法完成请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;501 Not Implemented&lt;/strong&gt; ：客户端请求的功能还不支持，类似“即将开业，敬请期待”的意思。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;502 Bad Gateway&lt;/strong&gt;：服务器作为网关或代理，从上游服务器接收到无效响应。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;503 Service Unavailable&lt;/strong&gt;：服务器暂时无法处理请求，通常是因为过载或维护。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;style type=&#34;text/css&#34;&gt;
   
  .notice {
    --title-color: #fff;
    --title-background-color: #6be;
    --content-color: #444;
    --content-background-color: #e7f2fa;
  }

  .notice.info {
    --title-background-color: #fb7;
    --content-background-color: #fec;
  }

  .notice.tip {
    --title-background-color: #5a5;
    --content-background-color: #efe;
  }

  .notice.warning {
    --title-background-color: #c33;
    --content-background-color: #fee;
  }

   
  @media (prefers-color-scheme: dark) {
    .notice {
      --title-color: #fff;
      --title-background-color: #069;
      --content-color: #ddd;
      --content-background-color: #023;
    }

    .notice.info {
      --title-background-color: #a50;
      --content-background-color: #420;
    }

    .notice.tip {
      --title-background-color: #363;
      --content-background-color: #121;
    }

    .notice.warning {
      --title-background-color: #800;
      --content-background-color: #400;
    }
  }

  body.dark .notice {
    --title-color: #fff;
    --title-background-color: #069;
    --content-color: #ddd;
    --content-background-color: #023;
  }

  body.dark .notice.info {
    --title-background-color: #a50;
    --content-background-color: #420;
  }

  body.dark .notice.tip {
    --title-background-color: #363;
    --content-background-color: #121;
  }

  body.dark .notice.warning {
    --title-background-color: #800;
    --content-background-color: #400;
  }

   
  .notice {
    width: 100%;  
    max-width: 600px;  
    padding: 18px;
    line-height: 24px;
    margin-bottom: 24px;
    border-radius: 4px;
    color: var(--content-color);
    background: var(--content-background-color);
  }

  .notice p:last-child {
    margin-bottom: 0;
  }

   
  .notice-title {
    margin: -18px -18px 12px;
    padding: 4px 18px;
    border-radius: 4px 4px 0 0;
    font-weight: 700;
    color: var(--title-color);
    background: var(--title-background-color);
  }

   
  .icon-notice {
    display: inline-flex;
    align-self: center;
    margin-right: 8px;
  }

  .icon-notice img,
  .icon-notice svg {
    height: 1em;
    width: 1em;
    fill: currentColor;
  }

  .icon-notice img,
  .icon-notice.baseline svg {
    top: 0.125em;
    position: relative;
  }
&lt;/style&gt;&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;重定向机制的区别
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;301 Moved Permanently&lt;/strong&gt; ：用于临时重定向，不会更新书签。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;302 Found&lt;/strong&gt; ：用于永久重定向，通常会更新客户端的书签&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;h3 id=&#34;http请求方法&#34;&gt;HTTP请求方法
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt; ：用于请求获取指定资源，通常用于获取数据。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt; 请求的参数位置一般是写在 &lt;strong&gt;URL&lt;/strong&gt; 中，但是浏览器会对 URL 的长度有限制（HTTP协议本身对 URL长度并没有做任何规定）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt; ：用于向服务器提交数据，通常用于提交表单数据或进行资源的创建。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt; 请求携带数据的位置一般是写在报文请求体 &lt;strong&gt;body&lt;/strong&gt; 中，请求体中的数据可以是任意格式的数据，只要客户端与服务端协商好即可，而且浏览器不会对请求体大小做限制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PUT&lt;/strong&gt; ：用于向服务器更新指定资源，通常用于更新已存在的资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DELETE&lt;/strong&gt; ：用于请求服务器删除指定资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HEAD&lt;/strong&gt; ：类似于GET请求，但只返回资源的头部信息，用于获取资源的元数据而不获取实际内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;&lt;strong&gt;GET&lt;/strong&gt; 和 &lt;strong&gt;POST&lt;/strong&gt; 的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt;：用于获取资源，通常用于请求数据而不改变服务器状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt;：用于提交数据到服务器，通常会改变服务器的状态或产生副作用（如创建或更新资源）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参数传递方式
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt;：参数通过 URL 拼接传递，暴露在请求 URL 中，具有可见性，长度有限（取决于浏览器和服务器）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt;：参数放在请求体中，通常不可见且长度理论上没有限制，更适合传递大量数据或敏感信息（但是注意，POST 也可以在 URL 上放参数！）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安全性
&lt;ul&gt;
&lt;li&gt;数据安全性
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt;：参数可见，数据容易暴露在浏览器历史记录、日志和缓存中，不适合传递敏感信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt;：数据放在请求体中，相对安全，但需要 &lt;strong&gt;HTTPS&lt;/strong&gt; 才能保证数据加密传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP定义：在 HTTP 协议里，所谓的 &lt;strong&gt;安全&lt;/strong&gt; 是指请求方法不会 &lt;strong&gt;破坏&lt;/strong&gt; 服务器上的资源。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt; ：是 &lt;strong&gt;只读&lt;/strong&gt; 操作，无论操作多少次，服务器上的数据都是安全的，且每次的结果都是相同的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt; ：是 &lt;strong&gt;新增或提交数据&lt;/strong&gt; 的操作，会修改服务器上的资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;幂等性：多次执行相同的操作，结果都是相同的
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt; ：&lt;strong&gt;GET&lt;/strong&gt; 具有幂等性，&lt;strong&gt;GET&lt;/strong&gt; 是 &lt;strong&gt;只读&lt;/strong&gt; 操作，无论操作多少次，服务器上的数据都是安全的，且每次的结果都是相同的。（重复请求不会改变服务器状态）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt; ：&lt;strong&gt;POST&lt;/strong&gt; 具有非幂等，&lt;strong&gt;POST&lt;/strong&gt; 是 &lt;strong&gt;新增或提交数据&lt;/strong&gt; 的操作，会修改服务器上的资源（多次请求可能导致重复创建资源或执行多次相同操作）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缓存机制
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt; ：可以对 &lt;strong&gt;GET&lt;/strong&gt; 请求的数据做缓存，当请求同一个 URL 时可以直接返回缓存内容，减少服务器负载。适用于不频繁变动的资源，比如图片、静态页面。
&lt;ul&gt;
&lt;li&gt;缓存可以做到浏览器本身上（彻底避免浏览器发请求）&lt;/li&gt;
&lt;li&gt;缓存可以做到代理上，而且在浏览器中 &lt;strong&gt;GET&lt;/strong&gt; 请求可以保存为书签。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt; ：&lt;strong&gt;POST&lt;/strong&gt; 请求默认不缓存，大部分浏览器和缓存服务器不缓存 POST 请求，主要因为 POST 请求通常会对服务器数据产生影响（如创建、修改数据），需要确保请求每次都传递到服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;h3 id=&#34;http报文格式&#34;&gt;HTTP报文格式
&lt;/h3&gt;&lt;h4 id=&#34;请求报文&#34;&gt;请求报文
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE/HTTP%E8%AF%B7%E6%B1%82%E5%8D%8F%E8%AE%AE.png&#34;
	width=&#34;1062&#34;
	height=&#34;585&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;HTTP请求报文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;435px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;HTTP 请求报文由三个部分组成(请求行+请求头+请求体)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;请求行 （红色部分）&lt;/strong&gt; ：请求报文的第一行
&lt;ul&gt;
&lt;li&gt;请求方法（如&lt;strong&gt;GET&lt;/strong&gt;、&lt;strong&gt;POST&lt;/strong&gt; ）&lt;/li&gt;
&lt;li&gt;请求的资源路径 &lt;strong&gt;URI&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;HTTP协议版本（如HTTP/1.1）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求头（深黄色部分）&lt;/strong&gt;：以键值对的形式表现，用于传递客户端环境、请求内容、认证信息等。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;实体头部&lt;/strong&gt; ：描述请求体的头部
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/strong&gt; ：表明本次请求的数据长度。用于服务端进行拆包
&lt;ul&gt;
&lt;li&gt;当客户端发送一个HTTP请求时，会在请求头中添加 &lt;strong&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/strong&gt; 字段，该字段的值表示请求正文的字节数。服务器在接收到请求后，会根据 &lt;strong&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/strong&gt; 字段的值来确定请求的长度，并从请求中读取相应数量的字节，直到读取完整个请求内容。这种基于 &lt;strong&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/strong&gt; 字段的拆包机制可以确保服务器正确接收到完整的请求，避免了请求的丢失或截断问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Content-Type&lt;/code&gt;&lt;/strong&gt; ：请求体的多媒体类型（用于 POST 和 PUT 请求中）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通用头部&lt;/strong&gt;：适用于请求和响应
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Cache-Control&lt;/code&gt;&lt;/strong&gt; ：用来指定在这次的请求/响应链中的所有缓存机制都必须 遵守的指令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/strong&gt; ：该浏览器想要优先使用的连接类型（持久连接还是非持久连接）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求头部&lt;/strong&gt;：特定于请求的头部
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/strong&gt; ：客户端发送请求时，用来指定服务器的域名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;User-Agent&lt;/code&gt;&lt;/strong&gt; ：浏览器的浏览器身份标识字符串&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Accept&lt;/code&gt;&lt;/strong&gt; ：能够接受的回应内容类型（Content-Types）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Accept-Encoding&lt;/code&gt;&lt;/strong&gt; ：能够接受的编码方式列表&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Accept-Language&lt;/code&gt;&lt;/strong&gt; ：能够接受的回应内容的自然语言列表。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Cookie&lt;/code&gt;&lt;/strong&gt; ：服务器通过 Set-Cookie发送的一个超文本传输协议 Cookie&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Authorization&lt;/code&gt;&lt;/strong&gt; ：用于超文本传输协议的认证的认证信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空行&lt;/strong&gt;：用于分隔请求头和请求体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求体&lt;/strong&gt;：仅在POST、PUT等方法中存在，包含需要发送到服务器的数据。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;表单数据（Form Data）&lt;/strong&gt;：&lt;strong&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;&lt;/strong&gt;，用于提交表单数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多部分数据（Multipart Data）&lt;/strong&gt;：&lt;code&gt;multipart/form-data&lt;/code&gt;，用于上传文件或复杂表单数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JSON数据&lt;/strong&gt;：&lt;strong&gt;&lt;code&gt;application/json&lt;/code&gt;&lt;/strong&gt; ，用于提交JSON格式的数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;XML数据&lt;/strong&gt;：&lt;strong&gt;&lt;code&gt;application/xml&lt;/code&gt;&lt;/strong&gt; ，用于提交XML格式的数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文本数据&lt;/strong&gt;：&lt;strong&gt;&lt;code&gt;text/plain&lt;/code&gt;&lt;/strong&gt; ，用于提交纯文本数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;请求解析过程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;请求行解析&lt;/strong&gt;：根据 HTTP 请求的第一行（请求行），服务器首先解析出请求方法、请求 URI 和协议版本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求头解析&lt;/strong&gt;：请求头的格式为 &lt;strong&gt;&lt;code&gt;key: value&lt;/code&gt;&lt;/strong&gt;，可以通过换行符来分隔每一行的头部信息。头部信息指示了客户端的行为、首选内容类型、缓存控制等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求体解析&lt;/strong&gt;：对于包含请求体的请求（如 POST 或 PUT），服务器需要解析请求体的内容。通常，内容类型会告知服务器如何解析请求体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求路由与处理&lt;/strong&gt;：HTTP 请求中的 URI 部分会被用来进行路由匹配，决定请求应该被哪个资源或处理程序处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成 HTTP 响应&lt;/strong&gt;：服务器处理请求后，会生成一个 HTTP 响应&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发送 HTTP 响应&lt;/strong&gt;：服务器将构造好的 HTTP 响应通过 TCP 连接返回给客户端。客户端接收到响应后，会根据状态码和响应头判断如何处理响应体&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;响应报文&#34;&gt;响应报文
&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE/image-20250209191221600.png&#34;
	width=&#34;486&#34;
	height=&#34;140&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;HTTP响应报文&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;347&#34;
		data-flex-basis=&#34;833px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;HTTP响应报文由三个部分组成(响应行,响应头,响应体)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;响应行（红色部分）&lt;/strong&gt;：响应报文的第一行
&lt;ul&gt;
&lt;li&gt;HTTP协议版本&lt;/li&gt;
&lt;li&gt;状态码：用于描述响应结果&lt;/li&gt;
&lt;li&gt;描述&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;响应头（黄色部分）&lt;/strong&gt;：以键值对形式表现
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Set-Cookie&lt;/code&gt;&lt;/strong&gt; ：服务端可以设置客户端的cookie&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/strong&gt; ：该浏览器想要优先使用的连接类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;响应体（绿色部分）&lt;/strong&gt;：存放响应数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http缓存技术&#34;&gt;HTTP缓存技术
&lt;/h3&gt;&lt;p&gt;对于一些具有重复性的 HTTP 请求，比如每次请求得到的数据都一样的，我们可以把这对请求-响应的数据都&lt;strong&gt;缓存在本地&lt;/strong&gt;，那么下次就直接读取本地的数据，不必在通过网络获取服务器的响应了，由此HTTP/1.1 的性能会提升不少。&lt;/p&gt;
&lt;h4 id=&#34;强制缓存&#34;&gt;强制缓存
&lt;/h4&gt;&lt;p&gt;强制缓存指的是只要浏览器判断缓存没有过期，则直接使用浏览器的本地缓存。由浏览器决定是否使用缓存的主动性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;强制缓存是利用HTTP 响应头部（Response Header）字段实现的，它们都用来表示资源在客户端缓存的有效期：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Cache-Control&lt;/code&gt;&lt;/strong&gt; ：是一个相对时间&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Expires&lt;/code&gt;&lt;/strong&gt; ：是一个绝对时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;工作流程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当浏览器第一次请求访问服务器资源时，服务器会在返回这个资源的同时，在请求头部加上 &lt;strong&gt;&lt;code&gt;Cache-Control&lt;/code&gt;&lt;/strong&gt; ，&lt;strong&gt;&lt;code&gt;Cache-Control&lt;/code&gt;&lt;/strong&gt; 中设置了过期时间大小；&lt;/li&gt;
&lt;li&gt;浏览器再次请求访问服务器中的该资源时，会先 &lt;strong&gt;通过请求资源的时间与 Cache-Control 中设置的过期时间大小，来计算出该资源是否过期&lt;/strong&gt; ，如果没有，则使用该缓存，否则重新请求服务器；&lt;/li&gt;
&lt;li&gt;服务器再次收到请求后，会再次更新请求头的 &lt;strong&gt;&lt;code&gt;Cache-Control&lt;/code&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;协商缓存&#34;&gt;协商缓存
&lt;/h4&gt;&lt;p&gt;通过服务端告知客户端是否可以使用缓存的方式被称为协商缓存。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现方式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;响应头部中 &lt;strong&gt;&lt;code&gt;Etag&lt;/code&gt;&lt;/strong&gt; ：唯一标识响应资源&lt;/li&gt;
&lt;li&gt;请求头部中的 &lt;strong&gt;&lt;code&gt;If-None-Match&lt;/code&gt;&lt;/strong&gt; ：当资源过期时，浏览器发现响应头里有 &lt;strong&gt;&lt;code&gt;Etag&lt;/code&gt;&lt;/strong&gt;，则再次向服务器发起请求时，会将请求头 If-None-Match 值设置为 &lt;strong&gt;Etag&lt;/strong&gt; 的值。服务器收到请求后进行比对，如果资源没有变化返回 &lt;strong&gt;304（允许使用本地缓存）&lt;/strong&gt;，如果资源变化了返回 &lt;strong&gt;200&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;工作流程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当浏览器第一次请求访问服务器资源时，服务器会在返回这个资源的同时，在请求头部加上 &lt;strong&gt;&lt;code&gt;ETag&lt;/code&gt;&lt;/strong&gt; 唯一标识，这个唯一标识的值是根据当前请求的资源生成的&lt;/li&gt;
&lt;li&gt;当浏览器再次请求访问服务器中的该资源时，首先会先检查强制缓存是否过期：
&lt;ul&gt;
&lt;li&gt;如果没有过期，则直接使用本地缓存；&lt;/li&gt;
&lt;li&gt;如果缓存过期了，会在请求头部加上 &lt;strong&gt;&lt;code&gt;If-None-Match&lt;/code&gt;&lt;/strong&gt; 字段，该字段的值就是 &lt;strong&gt;&lt;code&gt;ETag&lt;/code&gt;&lt;/strong&gt; 唯一标识；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务器再次收到请求后，会根据请求中的 &lt;strong&gt;&lt;code&gt;If-None-Match&lt;/code&gt;&lt;/strong&gt; 值与当前请求的资源生成的唯一标识进行比较
&lt;ul&gt;
&lt;li&gt;如果值相等代表服务器中的资源未被修改，则返回 &lt;strong&gt;304 Not Modified&lt;/strong&gt;，不会返回资源&lt;/li&gt;
&lt;li&gt;如果不相等代表服务器中的资源被修改，则返回 &lt;strong&gt;200&lt;/strong&gt; 状态码和返回资源，并在请求头部加上新的 ETag 唯一标识；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果浏览器收到 &lt;strong&gt;304&lt;/strong&gt; 的请求响应状态码，则会从本地缓存中加载资源，否则更新资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http版本&#34;&gt;HTTP版本
&lt;/h3&gt;&lt;h4 id=&#34;http10版本&#34;&gt;HTTP1.0版本
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无状态协议&lt;/strong&gt;：HTTP 1.0 是无状态的，每个请求之间相互独立，服务器不保存任何请求的状态信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非持久连接&lt;/strong&gt;：默认情况下，每个 HTTP 请求/响应对之后，连接会被关闭，属于短连接。这意味着对于同一个网站的每个资源请求，如 HTML 页面上的图片和脚本，都需要建立一个新的 TCP 连接。可以设置 &lt;code&gt;Connection: keep-alive&lt;/code&gt; 强制开启长连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;http11版本&#34;&gt;HTTP1.1版本
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;新增特性&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;默认使用长连接即  &lt;strong&gt;&lt;code&gt;keep—alive&lt;/code&gt;&lt;/strong&gt; ，允许持久连接。只要任意一端没有明确提出断开连接，则保持 TCP 连接状态。&lt;img src=&#34;https://Tyritic.github.io/p/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE/16-%E7%9F%AD%E8%BF%9E%E6%8E%A5%E4%B8%8E%E9%95%BF%E8%BF%9E%E6%8E%A5.png&#34;
	width=&#34;616&#34;
	height=&#34;472&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;短连接与长连接&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;130&#34;
		data-flex-basis=&#34;313px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持 &lt;strong&gt;&lt;code&gt;pipeline&lt;/code&gt;&lt;/strong&gt;，在同一个 TCP 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以 &lt;strong&gt;减少整体的响应时间。&lt;/strong&gt; 但是&lt;strong&gt;服务器必须按照接收请求的顺序发送对这些管道化请求的响应（队尾堵塞）&lt;/strong&gt;。 所以，&lt;strong&gt;HTTP/1.1 管道解决了请求的队头阻塞，但是没有解决响应的队头阻塞&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE/17-%E7%AE%A1%E9%81%93%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93.png&#34;
	width=&#34;351&#34;
	height=&#34;381&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;管道网络传输&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;92&#34;
		data-flex-basis=&#34;221px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;允许响应数据分块（chunked)，即响应的时候不标明 &lt;strong&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/strong&gt; ，客户端就无法断开连接，直到收到服务端的 EOF ，利于传输大文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新增缓存的控制和管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请求头中加入了 &lt;strong&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/strong&gt; 字段：解决了域名系统（DNS）允许多个主机名绑定到同一个 IP 地址上，而请求报文无法指出所请求的主机名的问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;范围请求：HTTP/1.1 引入了范围请求（range request）机制，以避免带宽的浪费。当客户端想请求一个文件的一部分，或者需要继续下载一个已经下载了部分但被终止的文件，HTTP/1.1 可以在请求中加入 &lt;strong&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/strong&gt; 头部，以请求（并只能请求字节型数据）数据的一部分。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;性能瓶颈&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;头部冗余：请求 / 响应头部（Header）未经压缩就发送，首部信息越多延迟越大。只能压缩 &lt;code&gt;Body&lt;/code&gt; 的部分，发送冗长的首部。每次互相发送相同的首部造成的浪费较多&lt;/li&gt;
&lt;li&gt;请求队头阻塞：服务器是按请求的顺序响应的，如果服务器响应慢，会招致客户端一直请求不到数据&lt;/li&gt;
&lt;li&gt;没有请求优先级控制&lt;/li&gt;
&lt;li&gt;请求只能从客户端开始，服务器只能被动响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优化思路&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免发送HTTP请求
&lt;ul&gt;
&lt;li&gt;实现方案：采用缓存技术，对于一些具有重复性的 HTTP 请求，可以把这对请求-响应的数据都&lt;strong&gt;缓存在本地&lt;/strong&gt;，那么下次就直接读取本地的数据，不必在通过网络获取服务器的响应了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;减少HTTP响应数据大小
&lt;ul&gt;
&lt;li&gt;实现方案
&lt;ul&gt;
&lt;li&gt;无损压缩（适合用在文本文件、程序可执行文件、程序源代码）、&lt;/li&gt;
&lt;li&gt;有损压缩（压缩多媒体数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;减少 HTTP 请求的次数
&lt;ul&gt;
&lt;li&gt;实现方案
&lt;ul&gt;
&lt;li&gt;减少重定向请求：将原本由客户端处理的重定向请求，交给代理服务器处理，这样可以减少重定向请求的次数&lt;/li&gt;
&lt;li&gt;合并请求：将多个小资源合并成一个大资源再传输，能够减少 HTTP 请求次数以及 头部的重复传输，再来减少 TCP 连接数量，进而省去 TCP 握手和慢启动的网络消耗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;http20版本&#34;&gt;HTTP2.0版本
&lt;/h4&gt;&lt;p&gt;新增特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;二进制帧&lt;/strong&gt;：相较于HTTP/1.1 则使用文本格式的报文，HTTP 2.0 使用二进制而不是文本格式来传输数据，解析更加高效。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多路复用&lt;/strong&gt;：一个 TCP 连接上可以同时进行多个 HTTP 请求/响应，解决了 HTTP 1.x 的请求队头阻塞问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;头部压缩&lt;/strong&gt;：HTTP 协议不带状态，所以每次请求都必须附上所有信息。HTTP 2.0 引入了头部压缩机制，可以使用 gzip 或 compress 压缩后再发送，减少了冗余头部信息的带宽消耗。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务端推送&lt;/strong&gt;：服务器可以主动向客户端推送资源，而不需要客户端明确请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优先级设置&lt;/strong&gt; ：HTTP2.0支持优先级设置，允许按 &lt;strong&gt;权重和依赖关系&lt;/strong&gt; 优先传输关键资源，优化用户体验。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;底层实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE/image-20240105143224839.png&#34;
	width=&#34;464&#34;
	height=&#34;535&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;底层图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;86&#34;
		data-flex-basis=&#34;208px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stream&lt;/strong&gt; ：一个TCP连接中包含多条 &lt;strong&gt;Stream&lt;/strong&gt; ，一个 &lt;strong&gt;Stream&lt;/strong&gt;中包含一对请求响应报文&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Message&lt;/strong&gt; ：请求或响应报文&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Frame&lt;/strong&gt; ：Frame 是 HTTP/2 最小单位，以二进制压缩格式存放 HTTP/1 中的内容（头部和包体）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 HTTP/2 连接上，&lt;strong&gt;不同 Stream 的帧是可以乱序发送的（因此可以并发不同的 Stream ）&lt;/strong&gt;，因为每个帧的头部会携带 Stream ID 信息，所以接收端可以通过 Stream ID 有序组装成 HTTP 消息，而&lt;strong&gt;同一 Stream 内部的帧必须是严格有序的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;客户端和服务器&lt;strong&gt;双方都可以建立 Stream&lt;/strong&gt; ，客户端建立的 Stream 必须是奇数号，而服务器建立的 Stream 必须是偶数号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE/image-20240105143421889.png&#34;
	width=&#34;1492&#34;
	height=&#34;568&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;示例图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;262&#34;
		data-flex-basis=&#34;630px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;HTTP/2 还可以对每个 Stream 设置不同 &lt;strong&gt;优先级&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;http30版本&#34;&gt;HTTP3.0版本
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;HTTP2.0的问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;队头阻塞：HTTP/2 多个请求是跑在一个 TCP 连接中的，那么当 TCP 丢包时，整个 TCP 都要等待重传，那么就会阻塞该 TCP 连接中的所有请求。&lt;/li&gt;
&lt;li&gt;网络连接迁移：一个 TCP 连接是由四元组（源 IP 地址，源端口，目标 IP 地址，目标端口）确定的，这意味着如果 IP 地址或者端口变动了，就会导致需要 TCP 与 TLS 重新握手，这不利于移动设备切换网络的场景&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;HTTP3.0的改进&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将传输层协议改为UDP，并且基于UDP实现了应用层的QUIC协议&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;QUIC协议的特点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;传输协议&lt;/strong&gt; ：HTTP/2.0 是基于 TCP 协议实现的，HTTP/3.0 新增了 QUIC（Quick UDP Internet Connections） 协议来实现可靠的传输，提供与 TLS/SSL 相当的安全性，具有较低的连接和传输延迟。可以将 QUIC 看作是 UDP 的升级版本，在其基础上新增了很多功能比如加密、重传等等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接建立快&lt;/strong&gt;：对于 HTTP/1 和 HTTP/2 协议，TCP 和 TLS 是分层的，分别属于内核实现的传输层、OpenSSL 库实现的表示层。 QUIC 内部包含了 TLS，它在自己的帧会携带 TLS 里的“记录”，再加上 QUIC 使用的是 TLS 1.3，因此仅需 1 个 RTT 就可以「同时」完成建立连接与密钥协商，甚至在第二次连接的时候，应用数据包可以和 QUIC 握手信息（连接信息 + TLS 信息）一起发送，达到 0-RTT 的效果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无队头阻塞&lt;/strong&gt;：HTTP/2.0 多请求复用一个 TCP 连接，一旦发生丢包，就会阻塞住所有的 HTTP 请求。由于 QUIC 协议的特性，HTTP/3.0 在一定程度上解决了队头阻塞问题，一个连接建立多个不同的数据流，这些数据流之间独立互不影响，某个数据流发生丢包了，其数据流不受影响（本质上是多路复用+轮询）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接迁移&lt;/strong&gt;：HTTP/3.0 支持连接迁移，因为 QUIC 使用 64 位 ID 标识连接，只要 ID 不变就不会中断，网络环境改变时（如从 Wi-Fi 切换到移动数据）也能保持连接。而 TCP 连接是由（源 IP，源端口，目的 IP，目的端口）组成，这个四元组中一旦有一项值发生改变，这个连接也就不能用了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;：在 HTTP/2.0 中，TLS 用于加密和认证整个 HTTP 会话，包括所有的 HTTP 头部和数据负载。TLS 的工作是在 TCP 层之上，它加密的是在 TCP 连接中传输的应用层的数据，并不会对 TCP 头部以及 TLS 记录层头部进行加密，所以在传输的过程中 TCP 头部可能会被攻击者篡改来干扰通信。而 HTTP/3.0 的 QUIC 对整个数据包（包括报文头和报文体）进行了加密与认证处理，保障安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;https协议&#34;&gt;HTTPS协议
&lt;/h2&gt;&lt;p&gt;HTTP 是明文传输的，存在数据窃听、数据篡改和身份伪造等问题。而 HTTPS 通过引入 SSL/TLS 解决安全性问题，HTTPS 默认端口号是  &lt;strong&gt;443&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;信息加密&lt;/strong&gt;：交互信息无法被窃取。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;校验机制&lt;/strong&gt;：无法篡改通信内容，篡改了就不能正常显示。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;身份证书&lt;/strong&gt;：证明身份。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;加密机制&#34;&gt;加密机制
&lt;/h3&gt;&lt;h4 id=&#34;混合加密&#34;&gt;混合加密
&lt;/h4&gt;&lt;p&gt;HTTPS 采用的是&lt;strong&gt;对称加密&lt;/strong&gt;和&lt;strong&gt;非对称加密&lt;/strong&gt;结合的混合加密方式实现消息的机密性，保证消息不被窃听&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在通信建立前（TLS四次握手）采用&lt;strong&gt;非对称加密&lt;/strong&gt;的方式交换会话秘钥，后续就不再使用非对称加密。&lt;/li&gt;
&lt;li&gt;在通信过程（后续加密通信）中全部使用&lt;strong&gt;对称加密&lt;/strong&gt;的会话秘钥的方式加密明文数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;&lt;strong&gt;非对称加密和对称加密&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对称加密：双方用会话密钥加密通信内容。&lt;/li&gt;
&lt;li&gt;非对称加密：服务器向客户端发送公钥，然后客户端用公钥加密自己的随机密钥，也就是会话密钥，发送给服务器，服务器用私钥解密，得到会话密钥。
&lt;ul&gt;
&lt;li&gt;密钥类型
&lt;ul&gt;
&lt;li&gt;公钥：负责加密&lt;/li&gt;
&lt;li&gt;私钥：负责解密&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用公钥加密过的密文只有私钥才能解密，用私钥加密过的密文只有公钥才能解密
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;公钥加密，私钥解密&lt;/strong&gt; ：这个目的是为了&lt;strong&gt;保证内容传输的安全&lt;/strong&gt;，因为被公钥加密的内容，其他人是无法解密的，只有持有私钥的人，才能解密出实际的内容；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;私钥加密，公钥解密&lt;/strong&gt; ：这个目的是为了&lt;strong&gt;保证消息不会被冒充&lt;/strong&gt;，因为私钥是不可泄露的，如果公钥能正常解密出私钥加密的内容，就能证明这个消息是来源于持有私钥身份的人发送的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;相较于对称加密，非对称加密的速度慢&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;h4 id=&#34;数字签名和摘要算法&#34;&gt;数字签名和摘要算法
&lt;/h4&gt;&lt;p&gt;HTTPS 采用的是 &lt;strong&gt;数字签名&lt;/strong&gt; 和 &lt;strong&gt;摘要算法&lt;/strong&gt; 实现消息的完整性，保证消息不被篡改&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;摘要算法&lt;/strong&gt; 用于保证消息的 &lt;strong&gt;完整性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;计算机里会 &lt;strong&gt;用摘要算法（哈希函数）来计算出内容的哈希值&lt;/strong&gt; ，也就是内容的摘要，这个&lt;strong&gt;哈希值是唯一的，且无法通过哈希值推导出内容&lt;/strong&gt;，然后将内容和哈希值一同发送。对方收到后，先是对内容也计算出一个摘要，然后跟发送方发送的摘要做一个比较，如果摘要相同，说明内容没有被篡改，否则就可以判断出内容被篡改了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE/%E6%91%98%E8%A6%81%E7%AE%97%E6%B3%95.png&#34;
	width=&#34;1276&#34;
	height=&#34;636&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;摘要算法&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;200&#34;
		data-flex-basis=&#34;481px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数字签名&lt;/strong&gt; 用于保证消息保证消息的来源可靠性（能确认消息是由持有私钥的一方发送的）&lt;/p&gt;
&lt;p&gt;数字签名算法利用非对称加密的机制，服务器用私钥对内容的哈希值进行加密，然后服务端会向客户端颁发对应的公钥。如果客户端收到的信息，能被公钥解密，就说明该消息是由服务器发送的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.png&#34;
	width=&#34;1282&#34;
	height=&#34;652&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;数字签名过程&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;196&#34;
		data-flex-basis=&#34;471px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;数字证书&#34;&gt;数字证书
&lt;/h4&gt;&lt;p&gt;由于客户端的公钥可以被替换或者伪造，导致在通信时攻击者可以使用与自己私钥配对的公钥替换客户端的公钥然后与客户端进行通信&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数字证书&lt;/strong&gt; 用于保证公钥无法被伪造或者替换&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/HTTP/22-%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;数子证书工作流程&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;服务器将自己的公钥注册到数字证书认证机构（CA）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CA 使用自己的私钥将服务器的公钥进行加密，生成数字证书&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CA 会把持有者的公钥、⽤途、颁发者、有效时间等信息打成⼀个包，然后对这些信息进⾏ Hash 计算，得到⼀个 Hash 值；&lt;/li&gt;
&lt;li&gt;CA 会使⽤⾃⼰的私钥将该 Hash 值加密，⽣成 Certificate Signature；&lt;/li&gt;
&lt;li&gt;最后将 Certificate Signature 添加在⽂件证书上，形成数字证书。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端拿到服务器的数字证书后，使用CA的公钥确认服务器的数字证书的真实性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端从数字证书获取服务器公钥后，使用已被验证的公钥进行加密后发送&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器用私钥对报文解密&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;生活例子解释&#34;&gt;生活例子解释
&lt;/h4&gt;&lt;p&gt;你想向老师请假，一般来说是要求由家长写一份请假理由并签名，老师才能允许你请假&lt;/p&gt;
&lt;p&gt;这里的老师对应于客户端，家长对应服务端，你对应一名攻击者。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么需要数字签名？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设你有模仿家长字迹的能力，你用家长的字迹写了一份请假条然后签上你爸爸的名字，老师一看到这个请假条，查看字迹和签名，就误以为是家长写的，就会允许你请假。&lt;/p&gt;
&lt;p&gt;引入了数字签名算法后，你就无法模仿家长的字迹来请假了，家长手上持有着私钥，老师持有着公钥。&lt;/p&gt;
&lt;p&gt;其中请假条中的签名对于数字签名，字迹对应内容&lt;/p&gt;
&lt;p&gt;这样只有用家长手上的私钥才对请假条进行签名，老师通过公钥看能不能解出这个签名，如果能解出并且确认内容的完整性，就能证明是由家长发起的请假条，这样老师才允许你请假，否则老师就不认。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么需要数字证书？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然家长持有私钥，老师通过是否能用公钥解密来确认这个请假条是不是来源你父亲的。但是我们还可以自己伪造出一对公私钥啊！&lt;/p&gt;
&lt;p&gt;你找了个夜晚，偷偷把老师桌面上和你爸爸配对的公钥，换成了你的公钥，那么下次你在请假的时候，你继续模仿你爸爸的字迹写了个请假条，然后用你的私钥做个了数字签名。&lt;/p&gt;
&lt;p&gt;但是老师并不知道自己的公钥被你替换过了，所以他还是按照往常一样用公钥解密，由于这个公钥和你的私钥是配对的，老师当然能用这个被替换的公钥解密出来，并且确认了内容的完整性，于是老师就会以为是家长写的请假条，又允许你请假了。&lt;/p&gt;
&lt;h4 id=&#34;通信过程&#34;&gt;通信过程
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;第一阶段&lt;/strong&gt;是TLS四次握手，这一阶段主要是利用&lt;strong&gt;非对称加密&lt;/strong&gt;的特性各种交换信息，最后得到一个&amp;quot;会话秘钥&amp;quot;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二阶段&lt;/strong&gt;是则是在第一阶段的&amp;quot;&lt;strong&gt;会话秘钥&lt;/strong&gt;&amp;ldquo;基础上，进行&lt;strong&gt;对称加密&lt;/strong&gt;通信。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE/640.png&#34;
	width=&#34;1080&#34;
	height=&#34;1283&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;四次握手过程&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;84&#34;
		data-flex-basis=&#34;202px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一次握手：由客户端向服务器发起加密通信请求，也就是 &lt;strong&gt;ClientHello&lt;/strong&gt; 请求。
&lt;ul&gt;
&lt;li&gt;客户端支持的 TLS 协议版本，如 TLS 1.2 版本。&lt;/li&gt;
&lt;li&gt;客户端生产的随机数 &lt;strong&gt;&lt;code&gt;（Client Random）&lt;/code&gt;&lt;/strong&gt; ，后面用于生成「会话秘钥」条件之一。&lt;/li&gt;
&lt;li&gt;客户端支持的密码套件列表，如 RSA 加密算法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第二次握手：服务器收到客户端请求后，向客户端发出响应，也就是 &lt;strong&gt;SeverHello&lt;/strong&gt; 响应
&lt;ul&gt;
&lt;li&gt;确认 TLS 协议版本，如果浏览器不支持，则关闭加密通信。&lt;/li&gt;
&lt;li&gt;服务器生产的随机数 &lt;strong&gt;&lt;code&gt;（Server Random）&lt;/code&gt;&lt;/strong&gt; ，也是后面用于生产会话秘钥条件之一。&lt;/li&gt;
&lt;li&gt;确认的密码套件列表，如 RSA 加密算法。&lt;/li&gt;
&lt;li&gt;服务器的数字证书，包含被CA私钥加密过的服务器公钥。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第三次握手：通过浏览器或者操作系统中的 CA 公钥，确认服务器的数字证书的真实性。同时生成会话密钥： 客户端使用客户端随机数，服务器随机数和 &lt;strong&gt;&lt;code&gt;pre_master_key&lt;/code&gt;&lt;/strong&gt; 这三个随机数进行计算得到一个 &lt;strong&gt;会话秘钥&lt;/strong&gt; 。客户端会 &lt;strong&gt;从数字证书中取出服务器的公钥&lt;/strong&gt; ，然后使用它加密报文的 &lt;strong&gt;&lt;code&gt;pre-master key&lt;/code&gt;&lt;/strong&gt; ，向服务器发送如下信息：
&lt;ul&gt;
&lt;li&gt;一个随机数 &lt;strong&gt;&lt;code&gt;（pre-master key）&lt;/code&gt;&lt;/strong&gt; ：该随机数由客户端生成，并被服务器公钥加密。&lt;/li&gt;
&lt;li&gt;加密通信算法改变通知：表示随后的信息都将用会话秘钥加密通信。&lt;/li&gt;
&lt;li&gt;内容摘要：客户端会把迄今为止的通信数据内容生成一个摘要，用 &lt;strong&gt;会话秘钥&lt;/strong&gt; 加密，发给服务器做校验，此时客户端这边的握手流程就结束了，因此也叫 &lt;strong&gt;Finished报文&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第四次握手：服务器收到客户端的第三个随机数 &lt;strong&gt;&lt;code&gt;（pre-master key）&lt;/code&gt;&lt;/strong&gt; 之后通过服务器私钥进行解密获得原文，通过与客户端协商的加密算法，计算出本次通信的 &lt;strong&gt;会话秘钥&lt;/strong&gt; 。
&lt;ul&gt;
&lt;li&gt;加密通信算法改变通知，表示随后的信息都将用会话秘钥加密通信。&lt;/li&gt;
&lt;li&gt;服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时把之前所有内容的发生的数据做个摘要，用来供客户端校验。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dns域名解析协议&#34;&gt;DNS（域名解析协议）
&lt;/h2&gt;&lt;p&gt;DNS的全称是Domain Name System（域名系统），它是互联网中用于将域名转换为对应IP地址的分布式数据库系统。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DNS 是应用层协议，基于 UDP 协议之上，端口为 53&lt;/strong&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;dns服务器&#34;&gt;DNS服务器
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;根 DNS 服务器：根 DNS 服务器提供 TLD 服务器的 IP 地址。目前世界上只有 13 组根服务器，我国境内目前仍没有根服务器。&lt;/li&gt;
&lt;li&gt;顶级域 DNS 服务器（TLD 服务器）：顶级域是指域名的后缀，如&lt;code&gt;com&lt;/code&gt;、&lt;code&gt;org&lt;/code&gt;、&lt;code&gt;net&lt;/code&gt;和&lt;code&gt;edu&lt;/code&gt;等。国家也有自己的顶级域，如&lt;code&gt;uk&lt;/code&gt;、&lt;code&gt;fr&lt;/code&gt;和&lt;code&gt;ca&lt;/code&gt;。TLD 服务器提供了权威 DNS 服务器的 IP 地址。&lt;/li&gt;
&lt;li&gt;权威 DNS 服务器：在因特网上具有公共可访问主机的每个组织机构必须提供公共可访问的 DNS 记录，这些记录将这些主机的名字映射为 IP 地址。&lt;/li&gt;
&lt;li&gt;本地 DNS 服务器：每个 ISP（互联网服务提供商）都有一个自己的本地 DNS 服务器。当主机发出 DNS 请求时，该请求被发往本地 DNS 服务器，它起着代理的作用，并将该请求转发到 DNS 层次结构中。严格说来，不属于 DNS 层级结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE/5.jpg&#34;
	width=&#34;621&#34;
	height=&#34;420&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;DNS 树状结构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;147&#34;
		data-flex-basis=&#34;354px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;域名解析过程&#34;&gt;域名解析过程
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE/DNS-process.png&#34;
	width=&#34;496&#34;
	height=&#34;539&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;迭代式域名解析过程&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;92&#34;
		data-flex-basis=&#34;220px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;域名解析请求&lt;/strong&gt;：用户在浏览器中输入一个域名，浏览器首先检查本地缓存（如果有的话）是否存有该域名的 IP 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;本地DNS解析&lt;/strong&gt;：如果本地缓存中没有所需的 IP 地址，浏览器会向配置的 &lt;strong&gt;本地 DNS 服务器&lt;/strong&gt; 发送请求。若存在则直接返回&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;根DNS解析&lt;/strong&gt; ：如果 &lt;strong&gt;本地DNS服务器&lt;/strong&gt; 中没有所需的 IP 地址，&lt;strong&gt;本地 DNS 服务器&lt;/strong&gt; 向 &lt;strong&gt;根DNS服务器&lt;/strong&gt; 发出请求，查询 &lt;strong&gt;根DNS&lt;/strong&gt; 以获取 &lt;strong&gt;顶级域（TLD）的 DNS&lt;/strong&gt; 地址。 &lt;strong&gt;根DNS&lt;/strong&gt; 负责将 &lt;strong&gt;顶级域DNS&lt;/strong&gt; 的IP地址发回到 &lt;strong&gt;本地DNS&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;顶级域DNS解析&lt;/strong&gt; ：&lt;strong&gt;本地DNS&lt;/strong&gt; 向 &lt;strong&gt;顶级域DNS&lt;/strong&gt; 发出请求，查询 &lt;strong&gt;顶级域DNS&lt;/strong&gt; 以获取 &lt;strong&gt;权威DNS&lt;/strong&gt; 地址。 &lt;strong&gt;顶级域DNS&lt;/strong&gt; 负责将 &lt;strong&gt;权威DNS&lt;/strong&gt; 的IP地址发回到 &lt;strong&gt;本地DNS&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;权威DNS解析&lt;/strong&gt; ：&lt;strong&gt;本地DNS&lt;/strong&gt; 向 &lt;strong&gt;权威DNS&lt;/strong&gt; 发出请求，查询 &lt;strong&gt;权威DNS&lt;/strong&gt; 以获取 &lt;strong&gt;域名对应的IP地址&lt;/strong&gt; 。 &lt;strong&gt;权威DNS&lt;/strong&gt; 负责将 &lt;strong&gt;域名对应的IP地址&lt;/strong&gt; 发回到 &lt;strong&gt;本地DNS&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;浏览器缓存该 IP 地址以供后续请求使用，并通过 IP 地址连接到目标服务器以访问网站内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;rpc远程过程调用&#34;&gt;RPC（&lt;strong&gt;远程过程调用&lt;/strong&gt;）
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;RPC&lt;/strong&gt;（&lt;strong&gt;R&lt;/strong&gt;emote &lt;strong&gt;P&lt;/strong&gt;rocedure &lt;strong&gt;C&lt;/strong&gt;all），又叫做&lt;strong&gt;远程过程调用&lt;/strong&gt;。它本身并不是一个具体的协议，而是一种&lt;strong&gt;调用方式&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;服务发现&#34;&gt;服务发现
&lt;/h3&gt;&lt;p&gt;在 &lt;strong&gt;HTTP&lt;/strong&gt; 中，你知道服务的域名，就可以通过 &lt;strong&gt;DNS 服务&lt;/strong&gt;去解析得到它背后的 IP 地址，默认 80 端口。&lt;/p&gt;
&lt;p&gt;而 &lt;strong&gt;RPC&lt;/strong&gt; 的话，就有些区别，一般会有专门的&lt;strong&gt;中间服务&lt;/strong&gt;去保存服务名和IP信息，比如 &lt;strong&gt;Consul 或者 Etcd，甚至是 Redis&lt;/strong&gt;。想要访问某个服务，就去这些中间服务去获得 IP 和端口信息。由于 DNS 也是服务发现的一种，所以也有基于 DNS 去做服务发现的组件，比如&lt;strong&gt;CoreDNS&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;底层连接形式&#34;&gt;底层连接形式
&lt;/h3&gt;&lt;p&gt;主流的 &lt;strong&gt;HTTP/1.1&lt;/strong&gt; 协议为例，其默认在建立底层 TCP 连接之后会一直保持这个连接（&lt;strong&gt;Keep Alive&lt;/strong&gt;），之后的请求和响应都会复用这条连接。&lt;/p&gt;
&lt;p&gt;而 &lt;strong&gt;RPC&lt;/strong&gt; 协议，也跟 HTTP 类似，也是通过建立 TCP 长链接进行数据交互，但不同的地方在于，RPC 协议一般还会再建个&lt;strong&gt;连接池&lt;/strong&gt;，在请求量大的时候，建立多条连接放在池内，要发数据的时候就从池里取一条连接出来，&lt;strong&gt;用完放回去，下次再复用&lt;/strong&gt;，可以说非常环保。&lt;/p&gt;
&lt;h2 id=&#34;websocket&#34;&gt;WebSocket
&lt;/h2&gt;&lt;p&gt;WebSocket 适用于需要实时通信和双向数据流的场景，而 HTTP 更适合于传统的客户端与服务器之间的短时请求响应场景。&lt;/p&gt;
&lt;p&gt;WebSocket 是一种基于 TCP 连接的全双工通信协议，即客户端和服务器可以同时发送和接收数据。客户端和服务器仅需一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。&lt;/p&gt;
&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;全双工和半双工的概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全双工&lt;/strong&gt; ：&lt;strong&gt;同一时间里&lt;/strong&gt;，&lt;strong&gt;双方&lt;/strong&gt;都可以&lt;strong&gt;主动&lt;/strong&gt;向对方发送数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;半双工&lt;/strong&gt; ：&lt;strong&gt;同一时间里&lt;/strong&gt;，客户端和服务器&lt;strong&gt;只能有一方主动&lt;/strong&gt;发数据&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;h3 id=&#34;与http的区别&#34;&gt;与HTTP的区别
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;WebSocket 是一种双向实时通信协议，客户端和服务器建立持久连接后，双方可以随时发送消息，直到主动关闭连接&lt;/li&gt;
&lt;li&gt;HTTP 是一种单向通信协议。HTTP 协议基于请求/响应模型，下的通信只能由客户端发起，服务器无法主动通知客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http轮询和长轮询&#34;&gt;HTTP轮询和长轮询
&lt;/h3&gt;&lt;p&gt;为了实现类似服务器主动发送消息给客户端的场景，有HTTP轮询和长轮询两种实现方案&lt;/p&gt;
&lt;h4 id=&#34;http轮询&#34;&gt;HTTP轮询
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;网页的前端代码里不断定时发 HTTP 请求到服务器，服务器收到请求后给客户端响应消息。&lt;/strong&gt;。这是一种伪实现。本质上并不是服务器主动发消息到客户端，而是客户端自己不断偷偷请求服务器，只是用户无感知而已。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消耗带宽，同时也会增加下游服务器的负担。&lt;/li&gt;
&lt;li&gt;使用体验上会出现 &lt;strong&gt;明显的卡顿&lt;/strong&gt; ，用户需要等个 1~2 秒，正好才触发下一次 HTTP 请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;长轮询&#34;&gt;长轮询
&lt;/h4&gt;&lt;p&gt;将HTTP 请求的 &lt;strong&gt;超时时间设置的很大&lt;/strong&gt; ，比如 30 秒，&lt;strong&gt;在这 30 秒内只要服务器收到了请求，就立马返回给客户端。如果超时，那就立马发起下一次请求。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这样就减少了 HTTP 请求的个数，并且由于大部分情况下，响应也是及时的。&lt;/p&gt;
&lt;h3 id=&#34;websocket握手过程&#34;&gt;WebSocket握手过程
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;客户端向服务器发送一个 HTTP 请求，请求头中包含 &lt;strong&gt;&lt;code&gt;Upgrade: websocket&lt;/code&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;code&gt;Sec-WebSocket-Key&lt;/code&gt;&lt;/strong&gt; 等字段，表示要求升级协议为 &lt;strong&gt;WebSocket&lt;/strong&gt; ；
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Upgrade: websocket&lt;/code&gt;&lt;/strong&gt; ：请求升级协议到 &lt;strong&gt;WebSocket&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Sec-WebSocket-Key&lt;/code&gt;&lt;/strong&gt;  ：&lt;strong&gt;随机生成的 base64 码&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务器收到这个请求后，会进行升级协议的操作，如果支持 WebSocket，它将回复一个 HTTP 101 状态码，响应头中包含 ，&lt;strong&gt;&lt;code&gt;Connection: Upgrade&lt;/code&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;code&gt;Sec-WebSocket-Accept: xxx&lt;/code&gt;&lt;/strong&gt; 等字段、表示成功升级到 WebSocket 协议。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Connection: Upgrade&lt;/code&gt;&lt;/strong&gt; ：支持协议切换&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Sec-WebSocket-Accept&lt;/code&gt;&lt;/strong&gt; ：根据客户端生成的 &lt;strong&gt;&lt;code&gt;Sec-WebSocket-Key&lt;/code&gt;&lt;/strong&gt; ，用 &lt;strong&gt;公开的&lt;/strong&gt; 算法变成另一段字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客户端也用同样的&lt;strong&gt;公开算法&lt;/strong&gt;将 &lt;strong&gt;&lt;code&gt;Sec-WebSocket-Key&lt;/code&gt;&lt;/strong&gt; 转成另一段字符串，如果这段字符串跟服务器传回来的 &lt;strong&gt;&lt;code&gt;Sec-WebSocket-Accept&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;一致&lt;/strong&gt;，那验证通过。客户端和服务器之间建立了一个 WebSocket 连接，可以进行双向的数据传输。&lt;/li&gt;
&lt;li&gt;数据以帧（frames）的形式进行传送，WebSocket 的每条消息可能会被切分成多个数据帧（最小单位）。发送端会将消息切割成多个帧发送给接收端，接收端接收消息帧，并将关联的帧重新组装成完整的消息。&lt;/li&gt;
&lt;li&gt;客户端或服务器可以主动发送一个关闭帧，表示要断开连接。另一方收到后，也会回复一个关闭帧，然后双方关闭 TCP 连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tomcat服务器&#34;&gt;Tomcat服务器
&lt;/h2&gt;&lt;h3 id=&#34;基本使用&#34;&gt;基本使用
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;启动Tomcat服务器&lt;/strong&gt;：双击Tomcat服务器目录下的bin\startup.bat&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关闭Tomcat服务器&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CTRL+C&lt;/strong&gt;：正常关闭&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;直接关闭运行窗口&lt;/strong&gt;：强制关闭&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;双击Tomcat服务器目录下的bin\shutdown.bat&lt;/strong&gt;：正常关闭&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;部署项目&lt;/strong&gt;：将应用放入webapps目录下&lt;/p&gt;
&lt;h3 id=&#34;tomcat服务器的目录结构&#34;&gt;Tomcat服务器的目录结构
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Tomcat/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|--bin（可执行文件）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|--conf（配置文件）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|--lib（Tomcat依赖的jar包）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|--logs（日志文件）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|--temp（测试代码资源）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|--webapps（应用发布目录）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;|--resource（工作目录）
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE/Tomcat%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png&#34;
	width=&#34;240&#34;
	height=&#34;162&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;148&#34;
		data-flex-basis=&#34;355px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>网络分层模型</title>
        <link>https://Tyritic.github.io/p/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/</link>
        <pubDate>Thu, 06 Jun 2024 21:09:15 +0800</pubDate>
        
        <guid>https://Tyritic.github.io/p/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/</guid>
        <description>&lt;h2 id=&#34;网络中的常见设备&#34;&gt;网络中的常见设备
&lt;/h2&gt;&lt;h3 id=&#34;主机host&#34;&gt;&lt;strong&gt;主机（host）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;主机（Host）&lt;/strong&gt; 是指连接到网络并能够发送或接收数据的设备。&lt;/p&gt;
&lt;h4 id=&#34;常见的主机类型&#34;&gt;常见的主机类型
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;个人计算机（PC）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;普通用户使用的台式机或笔记本电脑。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过有线（以太网）或无线（Wi-Fi）方式连接到网络。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务器（Server）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;提供网络服务的计算机，如Web服务器、数据库服务器、云服务器等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行稳定性和计算能力较强，可同时为多个客户端提供服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常见操作系统：Windows Server、Linux（Ubuntu、CentOS等）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;物联网设备（IoT Devices）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;连接到互联网的智能设备，如智能家居、传感器、工业控制系统等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源有限，通常使用轻量级协议（如MQTT、CoAP）进行通信。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;移动设备（Mobile Devices）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;智能手机、平板电脑等设备，也可以作为主机接入网络。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主要通过Wi-Fi或蜂窝网络（4G/5G）访问互联网。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;交换机switch&#34;&gt;交换机（Switch）
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;交换机（Switch）&lt;/strong&gt; 是一种&lt;strong&gt;二层（数据链路层）或三层（网络层）网络设备&lt;/strong&gt;，用于在局域网（LAN）中连接多个设备，并根据&lt;strong&gt;MAC地址或IP地址&lt;/strong&gt;高效地转发数据。&lt;strong&gt;交换机没有MAC地址&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;主要功能&#34;&gt;主要功能
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据转发&lt;/strong&gt;：接收数据帧，并根据目标MAC地址决定将其发送到哪个端口，而不是像集线器（Hub）那样广播给所有设备。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流量管理&lt;/strong&gt;：通过 &lt;strong&gt;全双工通信&lt;/strong&gt; ，同时支持数据的发送和接收，减少网络冲突，提高带宽利用率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;地址学习（MAC表）&lt;/strong&gt;：存储设备的MAC地址和端口映射关系，智能决定数据流向。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;常见交换机类型&#34;&gt;常见交换机类型
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;二层交换机（L2 Switch）&lt;/strong&gt;：依据MAC地址转发数据，不具备IP路由功能，适用于小型局域网&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;三层交换机（L3 Switch）&lt;/strong&gt;：结合路由功能，能根据IP地址转发数据包，适用于大型网络。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;路由器router&#34;&gt;路由器（Router）
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;路由器（Router）&lt;/strong&gt; 是一种 &lt;strong&gt;网络层（第三层）设备&lt;/strong&gt; ，用于连接不同的网络，并根据 &lt;strong&gt;IP地址&lt;/strong&gt; 确定数据包的最佳传输路径。它是互联网通信的核心设备，负责数据的转发和寻址。&lt;/p&gt;
&lt;h4 id=&#34;主要功能-1&#34;&gt;主要功能
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IP地址转发&lt;/strong&gt;：根据数据包的&lt;strong&gt;目标IP地址&lt;/strong&gt;，选择最佳路径进行转发。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络隔离&lt;/strong&gt;：不同的网络（如家庭网络和外部互联网）通过路由器进行连接和隔离。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NAT（网络地址转换）&lt;/strong&gt;：允许多个设备共享一个公网IP上网。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DHCP（动态主机配置协议）&lt;/strong&gt;：自动分配IP地址，简化网络配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;集线器hub&#34;&gt;集线器（Hub）
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;集线器（Hub）&lt;/strong&gt; 是一种 &lt;strong&gt;物理层（第一层）&lt;/strong&gt; 的网络设备，用于在局域网（LAN）内连接多个设备。它的主要作用是广播（Broadcast）数据，即收到数据后，会将其发送到所有端口，而不进行智能转发或流量管理。作为接收方的主机发现Mac地址不是自己会忽略该数据包&lt;/p&gt;
&lt;h4 id=&#34;主要功能-2&#34;&gt;主要功能
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;信号复制&lt;/strong&gt;：收到数据后，将其广播到所有端口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;物理连接&lt;/strong&gt;：提供多个端口，用于连接计算机、打印机等设备。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;放大信号&lt;/strong&gt;（部分型号）：用于延长网络传输距离（称为&lt;strong&gt;中继器集线器&lt;/strong&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分组交换技术&#34;&gt;分组交换技术
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;分组交换（Packet Switching）&lt;/strong&gt; 是一种将数据&lt;strong&gt;拆分成多个小数据包&lt;/strong&gt;，并&lt;strong&gt;独立&lt;/strong&gt;传输到目标地址的通信方式。它不需要建立固定的通信路径，而是&lt;strong&gt;根据网络的实时状态&lt;/strong&gt;选择最优路径，从而提高资源利用率和网络可靠性。&lt;/p&gt;
&lt;h3 id=&#34;存储转发机制&#34;&gt;存储转发机制
&lt;/h3&gt;&lt;p&gt;交换机或路由器开始向链路传输该分组的第一个比特之前必须接受整个分组&lt;/p&gt;
&lt;h3 id=&#34;工作流程&#34;&gt;工作流程
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据拆分&lt;/strong&gt;：将大数据拆分为多个小的数据包（Packet）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据打包&lt;/strong&gt;：每个数据包包含&lt;strong&gt;源地址、目标地址和序列号&lt;/strong&gt;，确保数据按顺序重组。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态路由&lt;/strong&gt;：每个数据包&lt;strong&gt;独立选择路径&lt;/strong&gt;，可能走不同的路。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据包重组&lt;/strong&gt;：接收端根据序列号&lt;strong&gt;重新组装数据&lt;/strong&gt;，恢复原始信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优缺点&#34;&gt;优缺点
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无建立时延&lt;/strong&gt; ：通信前无须建立间接，用户可以随时发送分组&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线路利用率高&lt;/strong&gt; ：分组在哪段链路上传送时才占用这段链路的通信资源。相比采用电路交换传送突发式的计算机数据，分组交换的通信线路利用率大大提高。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简化了存储管理（相对于报文交换）&lt;/strong&gt;：因为分组的长度固定，相应缓冲区的大小也固定，在交换结点中存储器的管理通常被简化为对缓冲区的管理，相对比较容易。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加速传输&lt;/strong&gt; ：分组是逐个传输的，可以使后一个分组的存储操作与前一个分组的转发操作并行，这种流水线方式减少了报文的传输时间。此外，传输一个分组比传输一次报文所需的缓冲区小得多，这样，因缓冲区不足而等待发送的概率及时间必然也少得多。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;减小了出错概率和重发数据量&lt;/strong&gt; ：因为分组较短，其出错概率必然减小，所以每次重发的数据量也就大大减少，这样不仅提高了可靠性，而且减小了传输时延。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;存在存储转发时延&lt;/strong&gt; ：尽管分组交换比报文交换的传输时延小，但相对于电路交换仍存在存储转发时延，且其结点交换机必须具有更强的处理能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;需要传输额外的信息量&lt;/strong&gt; ：每个小数据段都要加上控制信息以构成分组，这使得传送的信息量增大，进而使得控制复杂，降低了通信效率，增大了处理的时延。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;当分组交换网采用数据报服务时，可能出现失序、丢失或重复分组的情况&lt;/strong&gt; ：分组到达目的结点时，要对分组按编号进行排序等工作，&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;应用场景&#34;&gt;应用场景
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;互联网通信&lt;/strong&gt;（如网页浏览、电子邮件、社交网络）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VoIP（网络电话）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;视频流&lt;/strong&gt;（如YouTube、Netflix）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无线通信（4G/5G）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;电路交换技术&#34;&gt;电路交换技术
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;电路交换（Circuit Switching）&lt;/strong&gt; 是指在通信开始前，&lt;strong&gt;必须建立一个固定的端到端通信路径（电路）&lt;/strong&gt;，预留好了通信所需资源，并在整个通信过程中保持该路径。&lt;/p&gt;
&lt;h3 id=&#34;复用技术&#34;&gt;复用技术
&lt;/h3&gt;&lt;p&gt;在电路交换中，复用指的是将多个用户或通信流的信号&lt;strong&gt;合并&lt;/strong&gt;到一个物理路径上，并根据需要将其分开进行通信。在通信过程中，虽然多个通信流共享同一条物理线路，但每个用户都能获得一个独占的&lt;strong&gt;虚拟通道&lt;/strong&gt;，在会话期间保持通道的占用。&lt;/p&gt;
&lt;p&gt;常见的复用技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;时分复用（TDM, Time Division Multiplexing）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;时分复用技术将一个物理信道&lt;strong&gt;按时间划分为多个时隙&lt;/strong&gt;，每个通信会话在不同的时隙内传输数据。这样，多个用户或信号可以&lt;strong&gt;交替使用同一通道&lt;/strong&gt;，但每个用户在其专有的时间段内使用该通道。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;频分复用（FDM, Frequency Division Multiplexing）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;频分复用技术将可用的传输带宽&lt;strong&gt;划分为多个频带&lt;/strong&gt;，每个通信会话被分配到一个独立的频带上进行传输。每个频带相当于一个&lt;strong&gt;独立的虚拟信道&lt;/strong&gt;，每个用户在自己分配的频带内进行通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;工作流程-1&#34;&gt;工作流程
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;建立连接&lt;/strong&gt;（拨号和呼叫建立阶段）：系统为通信双方&lt;strong&gt;预留一条专用电路&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据传输&lt;/strong&gt;（通信阶段）：数据沿固定路径传输，保证稳定性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;释放连接&lt;/strong&gt;（挂断阶段）：通话结束后，释放电路资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优缺点-1&#34;&gt;优缺点
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通信质量稳定&lt;/strong&gt;：由于通话期间通道被&lt;strong&gt;独占&lt;/strong&gt;，不会有其他用户占用带宽。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;延迟低&lt;/strong&gt;：不需要数据包排序或重组，数据按固定路径流动，时延较小。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用于实时通信&lt;/strong&gt;：如传统电话、专线通信等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;资源利用率低&lt;/strong&gt;，即使通话双方没有发送数据，通信通道仍然被占用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;通信时延&#34;&gt;通信时延
&lt;/h2&gt;&lt;p&gt;节点总时延=节点处理时延+排队时延+传输时延+传播时延&lt;/p&gt;
&lt;h3 id=&#34;节点处理时延&#34;&gt;节点处理时延
&lt;/h3&gt;&lt;p&gt;检查分组首部以及决定分组导向何处所需时间&lt;/p&gt;
&lt;h3 id=&#34;排队时延&#34;&gt;排队时延
&lt;/h3&gt;&lt;p&gt;分组在链路上等待传输所需的时间&lt;/p&gt;
&lt;h3 id=&#34;传输时延&#34;&gt;传输时延
&lt;/h3&gt;&lt;p&gt;将所有分组推向链路的时延&lt;/p&gt;
&lt;h3 id=&#34;传播时延&#34;&gt;传播时延
&lt;/h3&gt;&lt;p&gt;从链路的起点到交换机所需的时间&lt;/p&gt;
&lt;h2 id=&#34;osi七层协议模型&#34;&gt;OSI七层协议模型
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;协议&lt;/strong&gt;：定义了在两个或多个通信实体之间交换的报文格式和顺序，以及报文发送或接受报文或其他事件所采取的动作&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B2.png&#34;
	width=&#34;1852&#34;
	height=&#34;1384&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;osi七层模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;321px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;计算机网络的协议采用分层架构。每一层都依赖于&lt;strong&gt;上层提供的服务&lt;/strong&gt;并向&lt;strong&gt;下层提供服务&lt;/strong&gt;。（通常以物理层为第一层，作为最下层）&lt;/p&gt;
&lt;p&gt;当数据从设备发出时，数据从应用层逐层向下传递，每一层会对数据进行&lt;strong&gt;封装&lt;/strong&gt;，增加自己的头部信息，以便下一层能够正确地识别、处理和传输数据。&lt;/p&gt;
&lt;p&gt;当数据到达目标设备时，数据从物理层逐层向上传递，每一层会进行 &lt;strong&gt;解封装&lt;/strong&gt;，提取出属于该层的数据部分，并将其传递给上一层，直到最终到达应用层。&lt;/p&gt;
&lt;p&gt;每一层分工明确&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用层&lt;/strong&gt; ：为计算机用户提供服务，给应用程序提供统一的接口&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表示层&lt;/strong&gt; ：数据处理(编解码、加密解密、压缩解压缩)，使得通信的应用程序能够解释交换数据的含义&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;会话层&lt;/strong&gt; ：管理（建立、维护、重连）表示层实体之间的会话&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传输层&lt;/strong&gt; ：负责端到端的数据传输，为两台主机进程之间的通信提供通用的数据传输服务&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络层&lt;/strong&gt; ：负责数据的路由、转发、分片，决定数据在网络的游走路径&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据链路层&lt;/strong&gt; ：负责数据的封帧和差错检测，以及 MAC 寻址&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;物理层&lt;/strong&gt; ：负责在物理网络中传输数据帧，透明地传送比特流传输&lt;/li&gt;
&lt;/ul&gt;
&lt;style type=&#34;text/css&#34;&gt;
   
  .notice {
    --title-color: #fff;
    --title-background-color: #6be;
    --content-color: #444;
    --content-background-color: #e7f2fa;
  }

  .notice.info {
    --title-background-color: #fb7;
    --content-background-color: #fec;
  }

  .notice.tip {
    --title-background-color: #5a5;
    --content-background-color: #efe;
  }

  .notice.warning {
    --title-background-color: #c33;
    --content-background-color: #fee;
  }

   
  @media (prefers-color-scheme: dark) {
    .notice {
      --title-color: #fff;
      --title-background-color: #069;
      --content-color: #ddd;
      --content-background-color: #023;
    }

    .notice.info {
      --title-background-color: #a50;
      --content-background-color: #420;
    }

    .notice.tip {
      --title-background-color: #363;
      --content-background-color: #121;
    }

    .notice.warning {
      --title-background-color: #800;
      --content-background-color: #400;
    }
  }

  body.dark .notice {
    --title-color: #fff;
    --title-background-color: #069;
    --content-color: #ddd;
    --content-background-color: #023;
  }

  body.dark .notice.info {
    --title-background-color: #a50;
    --content-background-color: #420;
  }

  body.dark .notice.tip {
    --title-background-color: #363;
    --content-background-color: #121;
  }

  body.dark .notice.warning {
    --title-background-color: #800;
    --content-background-color: #400;
  }

   
  .notice {
    width: 100%;  
    max-width: 600px;  
    padding: 18px;
    line-height: 24px;
    margin-bottom: 24px;
    border-radius: 4px;
    color: var(--content-color);
    background: var(--content-background-color);
  }

  .notice p:last-child {
    margin-bottom: 0;
  }

   
  .notice-title {
    margin: -18px -18px 12px;
    padding: 4px 18px;
    border-radius: 4px 4px 0 0;
    font-weight: 700;
    color: var(--title-color);
    background: var(--title-background-color);
  }

   
  .icon-notice {
    display: inline-flex;
    align-self: center;
    margin-right: 8px;
  }

  .icon-notice img,
  .icon-notice svg {
    height: 1em;
    width: 1em;
    fill: currentColor;
  }

  .icon-notice img,
  .icon-notice.baseline svg {
    top: 0.125em;
    position: relative;
  }
&lt;/style&gt;&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;网络模型为什么要采用分层模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;各层之间相互独立&lt;/strong&gt;：各层之间相互独立，各层之间不需要关心其他层是如何实现的，只需要知道自己如何调用下层提供好的功能就可以了（可以简单理解为接口调用）&lt;strong&gt;。这个和我们对开发时系统进行分层是一个道理。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高了灵活性和可替换性&lt;/strong&gt;：每一层都可以使用最适合的技术来实现，你只需要保证你提供的功能以及暴露的接口的规则没有改变就行了。并且，每一层都可以根据需要进行修改或替换，而不会影响到整个网络的结构。&lt;strong&gt;这个和我们平时开发系统的时候要求的高内聚、低耦合的原则也是可以对应上的。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;问题分解&lt;/strong&gt;：分层可以将复杂的网络问题分解为许多比较小的、界线比较清晰简单的小问题来处理和解决。这样使得复杂的计算机网络系统变得易于设计，实现和标准化。 &lt;strong&gt;这个和平时开发的时候，一般会将系统功能分解，然后将复杂的问题分解为容易理解的更小的问题是相对应的，这些较小的问题具有更好的边界（目标和接口）定义&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;h3 id=&#34;应用层&#34;&gt;应用层
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;应用层&lt;/strong&gt; 是OSI模型的最高层，它为用户提供直接的&lt;strong&gt;网络服务&lt;/strong&gt;。它是应用程序与网络之间的接口，&lt;strong&gt;它定义了信息交换的格式，消息会交给下一层传输层来传输&lt;/strong&gt;，是应用程序以及应用层协议存在的地方，负责用户与计算机的交互。&lt;/p&gt;
&lt;p&gt;应用层是不用去关心数据是如何传输的，而且应用层是工作在操作系统中的用户态，传输层及以下则工作在内核态。&lt;/p&gt;
&lt;p&gt;应用层的信息分组称为 &lt;strong&gt;报文&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;常用协议&#34;&gt;常用协议
&lt;/h4&gt;&lt;p&gt;常见的应用层协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTTP（Hypertext Transfer Protocol，超文本传输协议）&lt;/strong&gt;：基于 TCP 协议，是一种用于传输超文本和多媒体内容的协议，主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SMTP（Simple Mail Transfer Protocol，简单邮件发送协议）&lt;/strong&gt;：基于 TCP 协议，是一种用于发送电子邮件的协议。注意 ⚠️：SMTP 协议只负责邮件的发送，而不是接收。要从邮件服务器接收邮件，需要使用 POP3 或 IMAP 协议。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FTP（File Transfer Protocol，文件传输协议）&lt;/strong&gt;：基于 TCP 协议，是一种用于在计算机之间传输文件的协议，可以屏蔽操作系统和文件存储方式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSH（Secure Shell Protocol，安全的网络传输协议）&lt;/strong&gt;：基于 TCP 协议，通过加密和认证机制实现安全的访问和文件传输等业务&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DNS（Domain Name System，域名管理系统）&lt;/strong&gt;: 基于 UDP 协议，用于解决域名和 IP 地址的映射问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;表示层&#34;&gt;表示层
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;表示层&lt;/strong&gt; 负责&lt;strong&gt;数据格式的转换&lt;/strong&gt;，确保不同系统之间的数据能够互相理解。它通常包括数据的&lt;strong&gt;编码、加密、解密&lt;/strong&gt;和&lt;strong&gt;压缩&lt;/strong&gt;功能。&lt;/p&gt;
&lt;p&gt;例如：&lt;strong&gt;Linux&lt;/strong&gt; 给 &lt;strong&gt;WIndows&lt;/strong&gt; 发包，不同系统语法不一致，如 &lt;strong&gt;exe&lt;/strong&gt; 不能在 &lt;strong&gt;Linux&lt;/strong&gt; 下执行，&lt;strong&gt;shell&lt;/strong&gt; 不能在 &lt;strong&gt;Windows&lt;/strong&gt; 不能直接运行。因此需要表示层。解决&lt;strong&gt;不同系统之间通信语法问题&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;会话层&#34;&gt;会话层
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;会话层&lt;/strong&gt; 负责&lt;strong&gt;建立、管理和终止会话&lt;/strong&gt;，它提供了在应用程序之间的&lt;strong&gt;会话管理功能&lt;/strong&gt;，保证数据的同步、恢复以及多次通信的管理。它确保数据传输的&lt;strong&gt;秩序性&lt;/strong&gt;，如恢复中断的连接。&lt;/p&gt;
&lt;p&gt;常见的协议有 &lt;code&gt;ADSP、RPC&lt;/code&gt; 等&lt;/p&gt;
&lt;h3 id=&#34;传输层&#34;&gt;传输层
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;传输层&lt;/strong&gt; 负责在通信的两端提供 &lt;strong&gt;端到端的可靠性（不同主机上不同进程的通信）&lt;/strong&gt; ，它确保数据的&lt;strong&gt;可靠传输&lt;/strong&gt;和&lt;strong&gt;流量控制&lt;/strong&gt;。它将数据从应用层交给网络层，然后将接收到的数据传递给应用层。传输层还负责错误检测与修正。&lt;/p&gt;
&lt;h4 id=&#34;报文段&#34;&gt;报文段
&lt;/h4&gt;&lt;p&gt;传输层的数据分组称为 &lt;strong&gt;报文段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/TCP%E6%AE%B5.png&#34;
	width=&#34;581&#34;
	height=&#34;392&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;报文切分&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;148&#34;
		data-flex-basis=&#34;355px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;常用协议-1&#34;&gt;常用协议
&lt;/h4&gt;&lt;p&gt;在传输层会有两个传输协议，分别是 &lt;strong&gt;TCP&lt;/strong&gt; 和 &lt;strong&gt;UDP&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;TCP 的全称叫传输控制协议（&lt;em&gt;Transmission Control Protocol&lt;/em&gt;），具有以下功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流量控制&lt;/li&gt;
&lt;li&gt;超时重传&lt;/li&gt;
&lt;li&gt;拥塞控制等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过提供面向连接的服务保证报文段可靠地传输给对方&lt;/p&gt;
&lt;p&gt;UDP 相对来说就很简单，提供无连接服务，只负责发送数据包，不保证数据包是否能抵达对方，但它实时性相对更好，传输效率也高。&lt;/p&gt;
&lt;p&gt;当设备作为接收方时，传输层则要负责把报文段传给应用进程，但是一台设备上可能会有很多应用进程在接收或者传输数据，因此需要用一个 &lt;strong&gt;端口号&lt;/strong&gt; 将应用进程区分开来。&lt;/p&gt;
&lt;h3 id=&#34;网络层&#34;&gt;网络层
&lt;/h3&gt;&lt;p&gt;随着网络节点的不断增加，点对点通讯需要通过多个节点，如何找到目标节点，如何选择最佳路径成为首要需求。&lt;/p&gt;
&lt;p&gt;网络层主要功能是将 &lt;strong&gt;网络地址转化为对应的物理地址（寻址）&lt;/strong&gt; ，并 &lt;strong&gt;决定如何将数据从发送方路由到接收方（路由选择）&lt;/strong&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;数据报&#34;&gt;数据报
&lt;/h4&gt;&lt;p&gt;位于网络层的数据分组称为 &lt;strong&gt;数据报&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网络层最常使用的是 IP 协议（&lt;em&gt;Internet Protocol&lt;/em&gt;），IP 协议会将传输层的报文作为数据部分，再加上 IP 包头组装成 IP 报文，如果 IP 报文大小超过 MTU（以太网中一般为 1500 字节）就会&lt;strong&gt;再次进行分片&lt;/strong&gt;，得到一个即将发送到网络的 IP 报文。&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/12.jpg&#34;
	width=&#34;1142&#34;
	height=&#34;702&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;报文段切片&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;162&#34;
		data-flex-basis=&#34;390px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;ip地址&#34;&gt;IP地址
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;IP地址&lt;/strong&gt; 用于区分不同的物理设备&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络号&lt;/strong&gt;：负责标识该 IP 地址是属于哪个「子网」的；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主机号&lt;/strong&gt;：负责标识同一「子网」下的不同主机；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;子网掩码&lt;/strong&gt; ：用于计算网络号和主机号&lt;/p&gt;
&lt;p&gt;将 &lt;strong&gt;子网掩码&lt;/strong&gt; 和 &lt;strong&gt;IP地址&lt;/strong&gt; 进行按位与操作即可计算出网络号&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/16.jpg&#34;
	width=&#34;521&#34;
	height=&#34;481&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;网络号的计算过程&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;108&#34;
		data-flex-basis=&#34;259px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;将 &lt;strong&gt;子网掩码&lt;/strong&gt; 取反后与 &lt;strong&gt;IP地址&lt;/strong&gt; 进行进行&lt;strong&gt;按位与运算&lt;/strong&gt;，就可以得到主机号&lt;/p&gt;
&lt;h4 id=&#34;常见协议&#34;&gt;常见协议
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IP（Internet Protocol，网际协议）&lt;/strong&gt;：TCP/IP 协议中最重要的协议之一，属于网络层的协议，主要作用是定义数据包的格式、对数据包进行路由和寻址，以便它们可以跨网络传播并到达正确的目的地。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ARP（Address Resolution Protocol，地址解析协议）&lt;/strong&gt;：ARP 协议解决的是网络层地址和链路层地址之间的转换问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ICMP（Internet Control Message Protocol，互联网控制报文协议）&lt;/strong&gt;：一种用于传输网络状态和错误消息的协议，常用于网络诊断和故障排除&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NAT（Network Address Translation，网络地址转换协议）&lt;/strong&gt;：NAT 协议的应用场景如同它的名称——网络地址转换，应用于内部网到外部网的地址转换过程中。具体地说，在一个小的子网（局域网，LAN）内，各主机使用的是同一个 LAN 下的 IP 地址，但在该 LAN 以外，在广域网（WAN）中，需要一个统一的 IP 地址来标识该 LAN 在整个 Internet 上的位置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RIP(Routing Information Protocol，路由信息协议）&lt;/strong&gt;：一种内部网关协议（Interior Gateway Protocol，IGP），也是一种动态路由协议，基于距离向量算法，使用固定的跳数作为度量标准，选择跳数最少的路径作为最佳路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;数据链路层&lt;/strong&gt; 在物理连接中提供可靠的传输（ &lt;strong&gt;点到点的传输&lt;/strong&gt; ），负责建立和维护两个相邻节点间的链路。包括&lt;strong&gt;数据帧的封装与解封装&lt;/strong&gt;，以及&lt;strong&gt;错误检测与校正&lt;/strong&gt;。它还负责处理&lt;strong&gt;物理地址&lt;/strong&gt;（MAC地址），管理局域网的访问控制。&lt;/p&gt;
&lt;p&gt;链路层中的数据分组为 &lt;strong&gt;帧&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;物理层&#34;&gt;物理层
&lt;/h3&gt;&lt;p&gt;物理层是OSI模型的最底层，负责将数据以&lt;strong&gt;电气信号、光信号或无线信号&lt;/strong&gt;的形式传输到物理媒介上。它定义了硬件设备的接口、传输媒介的电气特性、连接器的标准等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网卡工作在这层&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;tcpip模型&#34;&gt;TCP/IP模型
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;TCP/IP 四层模型&lt;/strong&gt; 是目前被广泛采用的一种模型,可以将 &lt;strong&gt;TCP / IP&lt;/strong&gt; 模型看作是 OSI 七层模型的精简版本，由以下 4 层组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用层&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传输层&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络层&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络接口层&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/tcp-ip-4-model.png&#34;
	width=&#34;818&#34;
	height=&#34;469&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;TCP/IP 四层模型与OSI七层模型的简单对应&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;418px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;网络接口层&#34;&gt;网络接口层
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;网络接口层（Network Access Layer）&lt;/strong&gt;：可以把网络接口层看作是数据链路层和物理层的合体。负责将数字信号在物理通道（网线）中准确传输，定义了如何在单一网络链路上传输数据，如何处理数据帧的发送和接收，包括物理地址（MAC 地址）的解析。&lt;/p&gt;
&lt;h3 id=&#34;mac地址&#34;&gt;MAC地址
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Mac地址&lt;/strong&gt; 是一个全球唯一的物理地址，由设备制造商在生产时烧录到网卡的固件中。MAC 地址用于局域网（LAN）中的设备识别和通信。&lt;/p&gt;
&lt;p&gt;IP 网络使用 &lt;strong&gt;IP 地址&lt;/strong&gt; 进行通信，但在局域网内，设备最终依靠 &lt;strong&gt;MAC 地址&lt;/strong&gt; 进行数据传输。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ARP（Address Resolution Protocol）&lt;/strong&gt; 负责将 IP 地址转换为 MAC 地址。&lt;/p&gt;
&lt;h3 id=&#34;数据封装过程&#34;&gt;数据封装过程
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/%E5%B0%81%E8%A3%85.png&#34;
	width=&#34;905&#34;
	height=&#34;501&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;数据封装过程&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;180&#34;
		data-flex-basis=&#34;433px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;网页显示过程&#34;&gt;网页显示过程
&lt;/h2&gt;&lt;h3 id=&#34;工作流程-2&#34;&gt;工作流程
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;浏览器解析 &lt;strong&gt;URL&lt;/strong&gt;：浏览器会解析 &lt;strong&gt;URL&lt;/strong&gt; 并根据解析结果和缓存分析获得传输协议和资源路径，并试图从缓存获得IP地址
&lt;ul&gt;
&lt;li&gt;浏览器分析 URL 所需要使用的传输协议和请求的资源路径。
&lt;ul&gt;
&lt;li&gt;如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。&lt;/li&gt;
&lt;li&gt;如果没有问题，浏览器会检查 URL 中是否出现了非法字符，则对非法字符进行转义后在进行下一过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里且没有失效，那么就直接使用，否则向服务器发起新的请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浏览器通过  &lt;strong&gt;DNS&lt;/strong&gt;   做域名解析从而获取域名对应的IP地址：请求需要知晓服务器域名对应的 IP 地址才能通信，浏览器会检查本地缓存、操作系统缓存，甚至路由器缓存。如果未命中缓存，浏览器向配置的 &lt;strong&gt;DNS&lt;/strong&gt; 服务器发送查询请求，&lt;strong&gt;DNS 服务器递归查询&lt;/strong&gt; 最终返回 &lt;strong&gt;IP&lt;/strong&gt; 地址。&lt;/li&gt;
&lt;li&gt;通过 &lt;strong&gt;DNS&lt;/strong&gt; 获取到 &lt;strong&gt;IP&lt;/strong&gt; 后，就可以把 HTTP 的传输工作交给操作系统中的&lt;strong&gt;协议栈&lt;/strong&gt;。&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/7.jpg&#34;
	width=&#34;903&#34;
	height=&#34;917&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;协议栈&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;98&#34;
		data-flex-basis=&#34;236px&#34;
	
&gt;
&lt;ul&gt;
&lt;li&gt;浏览器会调用 Socket 库委托协议栈工作，并得到了封装了 &lt;strong&gt;HTTP&lt;/strong&gt; 数据的 &lt;strong&gt;TCP&lt;/strong&gt; 数据包, &lt;strong&gt;TCP&lt;/strong&gt;协议指定了指定源端口号和目的端口号，然后下发给网络层&lt;/li&gt;
&lt;li&gt;在 TCP 数据包的基础上，再封装源地址 &lt;strong&gt;IP&lt;/strong&gt; 和前面 &lt;strong&gt;DNS&lt;/strong&gt; 解析出来目标地址 &lt;strong&gt;IP&lt;/strong&gt; 等信息，得到网络包。并多个网络节点中确定数据包的传输路径，最终能找到目标服务器。然后将下发给数据链路层&lt;/li&gt;
&lt;li&gt;数据链路层的发送需要封装通信双方的 MAC 地址。
&lt;ul&gt;
&lt;li&gt;本机的 MAC 地址作为源 MAC 地址。&lt;/li&gt;
&lt;li&gt;接收方目标 MAC 地址的获取方式是通过将 IP 地址与本机的子网掩码相结合，可以判断是否与请求主机在同一个子网里
&lt;ul&gt;
&lt;li&gt;如果在同一个子网里，可以使用 ARP 协议获取到目的主机的 MAC 地址&lt;/li&gt;
&lt;li&gt;如果不在一个子网里，那么请求应该转发给网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网卡驱动获取网络包之后，会将其&lt;strong&gt;复制&lt;/strong&gt;到网卡内的缓存区中。网卡会将包转为电信号，通过网线发送出去&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建立TCP连接：主机将使用目标 IP地址和目标MAC地址发送一个TCP SYN包，请求建立一个TCP连接，然后交给路由器或者交换机
&lt;ul&gt;
&lt;li&gt;交换机：它会根据数据包中的 MAC 头来查找MAC表来找到另一个设备连接在交换机的哪个端口，然后传输。&lt;/li&gt;
&lt;li&gt;路由器：路由器进行跨子网的转发，通过查找路由表中IP地址和端口的映射关系来决定从路由器的哪个端口发出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;发送HTTP请求：连接建立后，浏览器会向服务器发送HTTP请求。请求中包含了用户需要获取的资源的信息，例如网页的URL、请求方法（GET、POST等）等。&lt;/li&gt;
&lt;li&gt;服务器处理请求并返回响应：服务器收到请求后，会根据请求的内容进行相应的处理。例如，如果是请求网页，服务器会读取相应的网页文件，并生成HTTP响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据封装过程-1&#34;&gt;数据封装过程
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/1720420602148-199136a3-681d-4f87-9bcf-42ef227e6b95.webp&#34;
	width=&#34;936&#34;
	height=&#34;953&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;数据包封装过程&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;98&#34;
		data-flex-basis=&#34;235px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;数据包传递过程&#34;&gt;数据包传递过程
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B/640.webp&#34;
	width=&#34;861&#34;
	height=&#34;747&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;示例网络拓扑&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;115&#34;
		data-flex-basis=&#34;276px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;路由器1的路由表&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;目的地址&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;下一跳&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;端口&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;192.168.0.0/24&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;192.168.0.254/32&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;192.168.1.0/24&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;192.168.1.254/32&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;192.168.2.0/24&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;192.168.100.5&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;192.168.100.0/24&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;192.168.100.4/32&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以主机A发送给主机F数据包为例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;（192.168.0.1）&lt;/strong&gt; 通过子网掩码 &lt;strong&gt;（255.255.255.0）&lt;/strong&gt; 计算出自己与 F &lt;strong&gt;（192.168.2.2）&lt;/strong&gt; 并不在同一个子网内，于是决定发送给默认网关 &lt;strong&gt;（192.168.0.254）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;A 通过 ARP 找到 默认网关 &lt;strong&gt;192.168.0.254&lt;/strong&gt; 的 MAC 地址 &lt;strong&gt;（ABAB）&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;A 封装数据包
&lt;ul&gt;
&lt;li&gt;数据链路层头部
&lt;ul&gt;
&lt;li&gt;源 MAC 地址设置为A的MAC地址 &lt;strong&gt;（AAAA）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;目标MAC地址为网关 MAC 地址 &lt;strong&gt;（ABAB）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网络层头部
&lt;ul&gt;
&lt;li&gt;源 IP 地址设置为A的IP地址 &lt;strong&gt;（192.168.0.1）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;目的 IP 地址设置为F的IP地址 &lt;strong&gt;（192.168.2.2）&lt;/strong&gt;（从始至终这个数据包的两个 IP 地址都是不变的，只有 MAC 地址在不断变化）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;交换机 1 收到数据包后，查询MAC地址表，目标 MAC 地址是 &lt;strong&gt;ABAB&lt;/strong&gt; ，从MAC地址表的指定端口转发给路由器1&lt;/li&gt;
&lt;li&gt;数据包来到了路由器 1，发现其目标 IP 地址是 &lt;strong&gt;192.168.2.2&lt;/strong&gt; ，查看其路由表，发现了下一跳的地址是 &lt;strong&gt;192.168.100.5&lt;/strong&gt; ，从映射端口发出数据包到路由器2
&lt;ul&gt;
&lt;li&gt;源MAC设置为路由器1的映射端口的MAC地址 &lt;strong&gt;（D1D1）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;目标MAC设置为下一跳的MAC地址 &lt;strong&gt;（D2D2）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;此时路由器 2 收到了数据包，看到其目标IP地址是 &lt;strong&gt;192.168.2.2&lt;/strong&gt; ，查询其路由表，准备从映射端口把数据包送出去。&lt;/li&gt;
&lt;li&gt;但此时路由器 2 需要知道 &lt;strong&gt;192.168.2.2&lt;/strong&gt; 的 MAC 地址了，于是查看其 arp 缓存，找到其 MAC 地址为 &lt;strong&gt;FFFF&lt;/strong&gt; ，将其封装在数据链路层头部，并从映射端口把包发出去。
&lt;ul&gt;
&lt;li&gt;源MAC设置为路由器2的映射端口的MAC地址 &lt;strong&gt;（EFEF）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;目标MAC设置为F的MAC地址 &lt;strong&gt;（FFFF）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;交换机 3 收到了数据包，发现目的 MAC 地址为 &lt;strong&gt;FFFF&lt;/strong&gt; ，查询其 MAC 地址表，从映射端口把数据包发出去。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;F 最终收到了数据包&lt;/strong&gt;并且发现目的 MAC 地址就是自己，于是收下了这个包&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
