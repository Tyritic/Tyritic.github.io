<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>技术前沿 on Tyritic</title>
        <link>https://Tyritic.github.io/categories/%E6%8A%80%E6%9C%AF%E5%89%8D%E6%B2%BF/</link>
        <description>Recent content in 技术前沿 on Tyritic</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Tyritic</copyright><atom:link href="https://Tyritic.github.io/categories/%E6%8A%80%E6%9C%AF%E5%89%8D%E6%B2%BF/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>模型上下文协议（MCP）</title>
        <link>https://Tyritic.github.io/p/%E6%A8%A1%E5%9E%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8D%8F%E8%AE%AEmcp/</link>
        <pubDate>Thu, 27 Mar 2025 10:00:39 +0800</pubDate>
        
        <guid>https://Tyritic.github.io/p/%E6%A8%A1%E5%9E%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8D%8F%E8%AE%AEmcp/</guid>
        <description>&lt;h2 id=&#34;llm的一些缺陷&#34;&gt;LLM的一些缺陷
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;市面上的LLM大部分是基于网络上通用知识训练得来的，缺乏对垂直领域相关的知识，类似一个盲目自信的人对于不了解不理解的问题也会编造一些内容（ &lt;strong&gt;幻觉&lt;/strong&gt; 问题）&lt;/li&gt;
&lt;li&gt;LLM的知识不具备实时性，例如向LLM询问今天的天气时LLM无法给出正确答案&lt;/li&gt;
&lt;li&gt;LLM无法主动从网络等各种来源主动获取知识，即LLM目前只能作为 &lt;strong&gt;规划者&lt;/strong&gt; 而无法成为 &lt;strong&gt;执行者&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;传统解决方案函数调用&#34;&gt;传统解决方案——函数调用
&lt;/h2&gt;&lt;p&gt;Function-Call于2023年由OpenAI提出。在此之前，LLM 主要通过自然语言回答问题，无法直接执行 API 调用或插件交互。这一机制的核心在于  &lt;strong&gt;模型能够以结构化的 JSON 格式输出函数参数&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;工作流程如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模型识别用户输入的意图判断是否需要使用Function-Call&lt;/li&gt;
&lt;li&gt;模型生成一个结构化的JSON对象来包装函数的相关参数并转发到应用程序的对应函数中&lt;/li&gt;
&lt;li&gt;应用程序执行函数并将结果返回给模型&lt;/li&gt;
&lt;li&gt;模型将应用程序返回的结果进行整理并以自然语言整理出最终回答、&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是 function call 也有其局限性，重点在于function call 平台依赖性强，不同 LLM 平台的 function call API 实现差异较大。例如，OpenAI 的函数调用方式与 Google 的不兼容，开发者在切换模型时需要重写代码，增加了适配成本。&lt;/p&gt;
&lt;h2 id=&#34;mcp协议是什么&#34;&gt;MCP协议是什么
&lt;/h2&gt;&lt;p&gt;MCP全称模型上下文协议，是由Claude公司推出的标准化LLM与外部数据源与工具的交互形式。跳转&lt;a class=&#34;link&#34; href=&#34;https://modelcontextprotocol.io/introduction&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;引用Claude对此的描述&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MCP is an open protocol that standardizes how applications provide context to LLMs. Think of MCP like a USB-C port for AI applications. Just as USB-C provides a standardized way to connect your devices to various peripherals and accessories, MCP provides a standardized way to connect AI models to different data sources and tools.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;MCP（模型上下文协议）是一种开放协议，它对应用程序向大语言模型（LLM）提供上下文的方式进行了标准化。可以把 MCP 想象成人工智能应用程序的 USB-C 接口。就像 USB-C 接口为将设备连接到各种外围设备和配件提供了一种标准化的方式一样，MCP 也为将人工智能模型连接到不同的数据源和工具提供了一种标准化的方式。&lt;/p&gt;
&lt;p&gt;可以从以下角度理解MCP协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MCP协议类似于一个人工智能应用程序的拓展坞，通过拓展坞可以以标准化的形式将LLM连接到各种外部工具和数据源&lt;/li&gt;
&lt;li&gt;同时也可以将MCP协议理解为Function-Call的标准化和优化，MCP协议依然是建立在Function-Call的基础上的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mcp协议相较于function-call的改进&#34;&gt;MCP协议相较于Function-Call的改进
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tool&lt;/strong&gt; ：基于Function-Call实现对外部工具的调用，使得模型可以进行具体的操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Resource&lt;/strong&gt; ：AI可以读取的数据，比如文件内容、数据库查询结果或API的响应&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prompt&lt;/strong&gt; ：服务器提供给AI的预写消息或模板，帮助AI理解如何使用资源和工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mcp的相关概念&#34;&gt;MCP的相关概念
&lt;/h2&gt;&lt;h3 id=&#34;核心架构&#34;&gt;核心架构
&lt;/h3&gt;&lt;p&gt;MCP 遵循客户端-服务器架构，所有传输都使用 &lt;a class=&#34;link&#34; href=&#34;https://www.jsonrpc.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JSON-RPC&lt;/a&gt; 2.0 来交换消息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%A8%A1%E5%9E%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8D%8F%E8%AE%AEmcp/77afbba7a4543387ddb1f1827dac0b71.png&#34;
	width=&#34;1512&#34;
	height=&#34;1040&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;核心架构&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;145&#34;
		data-flex-basis=&#34;348px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主机&lt;/strong&gt; ：启动连接的 LLM 应用程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端&lt;/strong&gt; ：嵌入在主机内，在主机应用程序内与服务器保持一比一连接&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器&lt;/strong&gt; ：连接到具体的数据源或工具，向客户端提供资源、工具和提示
&lt;ul&gt;
&lt;li&gt;资源（Resources）：类似文件的数据，可以被客户端读取，如 API 响应或文件内容。&lt;/li&gt;
&lt;li&gt;工具（Tools）：可以被 LLM 调用的函数（需要用户批准）。&lt;/li&gt;
&lt;li&gt;提示（Prompts）：预先编写的模板，帮助用户完成特定任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源&lt;/strong&gt; ：服务器可以访问到的资源
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;本地资源&lt;/strong&gt; : MCP 服务器可以安全访问的计算机资源（数据库、文件、服务）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;远程职业&lt;/strong&gt; : MCP 服务器可以连接到的互联网上可用的资源（API）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;工作流程&#34;&gt;工作流程
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/%E6%A8%A1%E5%9E%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%8D%8F%E8%AE%AEmcp/image-20250327140914648.png&#34;
	width=&#34;1186&#34;
	height=&#34;326&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;工作流程&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;363&#34;
		data-flex-basis=&#34;873px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化：主机应用程序启动并初始化客户端，每个客户端与一个服务器建立连接。&lt;/li&gt;
&lt;li&gt;功能协商：客户端和服务器之间进行功能协商，确定它们可以相互提供哪些功能和服务。&lt;/li&gt;
&lt;li&gt;请求处理：客户端根据用户请求或AI模型的需要，向服务器发送请求。服务器处理这些请求，并可能与本地或远程资源进行交互。
&lt;ul&gt;
&lt;li&gt;将用户的查询连同工具描述通过 function calling一起发送给 LLM。&lt;/li&gt;
&lt;li&gt;LLM 决定是否需要使用工具以及使用哪些工具。&lt;/li&gt;
&lt;li&gt;如果需要使用工具，MCP client 会通过 MCP server 执行相应的工具调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;响应返回：服务器将处理结果返回给客户端，客户端再将信息传递回主机应用程序。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
