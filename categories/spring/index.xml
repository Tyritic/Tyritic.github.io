<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Spring框架 on Tyritic</title>
        <link>https://Tyritic.github.io/categories/spring/</link>
        <description>Recent content in Spring框架 on Tyritic</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Tyritic</copyright><atom:link href="https://Tyritic.github.io/categories/spring/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Spring框架的基础认识</title>
        <link>https://Tyritic.github.io/p/spring%E6%A1%86%E6%9E%B6%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%86/</link>
        <pubDate>Tue, 17 Dec 2024 14:58:53 +0800</pubDate>
        
        <guid>https://Tyritic.github.io/p/spring%E6%A1%86%E6%9E%B6%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%86/</guid>
        <description>&lt;h2 id=&#34;spring框架的基本认识&#34;&gt;Spring框架的基本认识
&lt;/h2&gt;&lt;p&gt;Spring 是一款开源的轻量级 Java 开发框架，旨在提高开发人员的开发效率以及系统的可维护性。&lt;/p&gt;
&lt;p&gt;Spring 框架指的都是 Spring Framework，它是很多模块的集合，使用这些模块可以很方便地协助我们进行开发&lt;/p&gt;
&lt;h2 id=&#34;spring框架的基本特性&#34;&gt;Spring框架的基本特性
&lt;/h2&gt;&lt;h3 id=&#34;控制反转ioc和依赖注入di&#34;&gt;控制反转IOC和依赖注入DI
&lt;/h3&gt;&lt;p&gt;Spring通过控制反转实现了对象的创建和对象间的依赖关系管理。开发者只需要定义好Bean及其依赖关系，Spring容器负责创建和组装这些对象。实现了通过配置文件或注解来管理对象之间的依赖关系,降低了耦合度，提高了代码的可维护性和可测试性。&lt;/p&gt;
&lt;p&gt;而依赖注入则是控制反转的实现方式&lt;/p&gt;
&lt;h3 id=&#34;面向切面编程aop&#34;&gt;面向切面编程AOP
&lt;/h3&gt;&lt;p&gt;面向切面编程，允许开发者定义横切关注点，例如事务管理、安全控制等，独立于业务逻辑的代码。将那些与核心业务逻辑无关，但是对多个对象产生影响的公共行为封装起来，如日志记录、性能统计、事务等。通过AOP，可以将这些关注点模块化，提高代码的可维护性和可重用性。&lt;/p&gt;
&lt;h3 id=&#34;事务管理&#34;&gt;事务管理
&lt;/h3&gt;&lt;p&gt;Spring提供了一致的事务管理接口，支持声明式和编程式事务。开发者可以轻松地进行事务管理，而无需关心具体的事务API。&lt;/p&gt;
&lt;h2 id=&#34;spring框架的模块架构&#34;&gt;Spring框架的模块架构
&lt;/h2&gt;&lt;p&gt;Spring 框架是分模块存在，除了最核心的 &lt;strong&gt;&lt;code&gt;Spring Core Container&lt;/code&gt;&lt;/strong&gt; 是必要模块之外，其他模块都是可选的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Tyritic.github.io/p/spring%E6%A1%86%E6%9E%B6%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%86/spring-bb7c13ea-3174-4b32-84b8-821849ddc377.png&#34;
	width=&#34;694&#34;
	height=&#34;508&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Spring模块划分&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;136&#34;
		data-flex-basis=&#34;327px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;核心模块-core-container&#34;&gt;核心模块 &lt;strong&gt;&lt;code&gt;Core Container&lt;/code&gt;&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Spring Core&lt;/strong&gt;：提供了依赖注入（Dependency Injection, DI）和控制反转（Inversion of Control, IoC）的实现，所有其他Spring模块的基础，别的模块都会依赖此模块。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Beans&lt;/strong&gt;：负责管理Bean的定义和生命周期。通过IoC容器完成Bean的创建、依赖注入、初始化、销毁等操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Context&lt;/strong&gt;：基于Core和Beans的高级容器，提供了类似JNDI的上下文功能，还包含了国际化、事件传播、资源访问等功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Expression Language（SpEL）&lt;/strong&gt;：一个强大的表达式语言，用于在运行时查询和操作对象的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面向切面编程模块-aop&#34;&gt;面向切面编程模块 &lt;strong&gt;&lt;code&gt;AOP&lt;/code&gt;&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Spring AOP&lt;/strong&gt;：提供面向切面编程的功能，可以在方法执行前后或抛出异常时动态插入额外的逻辑，比如日志记录、权限验证、事务管理等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;spring-aspects&lt;/strong&gt;：该模块为与 AspectJ 的集成提供支持。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;spring-instrument&lt;/strong&gt;：提供了为 JVM 添加代理（agent）的功能。 具体来讲，它为 Tomcat 提供了一个织入代理，能够为 Tomcat 传递类文件，就像这些文件是被类加载器加载的一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据访问集成模块&#34;&gt;数据访问/集成模块
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Spring JDBC&lt;/strong&gt;：简化了原生JDBC的操作，提供模板方法来管理连接、资源的释放和异常处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring ORM&lt;/strong&gt;：支持与主流ORM框架（如Hibernate、JPA、MyBatis等）集成，简化持久层开发。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Transaction（事务管理）&lt;/strong&gt;：提供声明式和编程式的事务管理机制，与数据库操作密切结合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;web模块&#34;&gt;Web模块
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Spring Web&lt;/strong&gt;：提供基础的Web开发支持，包括Servlet API的集成，适用于构建MVC架构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring MVC&lt;/strong&gt;：实现了Model-View-Controller（MVC）模式的框架，用于构建基于HTTP请求的Web应用。它是一个常用的模块，支持注解驱动的Web开发。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring WebFlux&lt;/strong&gt;：提供基于Reactive Streams的响应式编程模型，专为高并发的异步非阻塞请求设计。&lt;/li&gt;
&lt;/ul&gt;
&lt;style type=&#34;text/css&#34;&gt;
   
  .notice {
    --title-color: #fff;
    --title-background-color: #6be;
    --content-color: #444;
    --content-background-color: #e7f2fa;
  }

  .notice.info {
    --title-background-color: #fb7;
    --content-background-color: #fec;
  }

  .notice.tip {
    --title-background-color: #5a5;
    --content-background-color: #efe;
  }

  .notice.warning {
    --title-background-color: #c33;
    --content-background-color: #fee;
  }

   
  @media (prefers-color-scheme: dark) {
    .notice {
      --title-color: #fff;
      --title-background-color: #069;
      --content-color: #ddd;
      --content-background-color: #023;
    }

    .notice.info {
      --title-background-color: #a50;
      --content-background-color: #420;
    }

    .notice.tip {
      --title-background-color: #363;
      --content-background-color: #121;
    }

    .notice.warning {
      --title-background-color: #800;
      --content-background-color: #400;
    }
  }

  body.dark .notice {
    --title-color: #fff;
    --title-background-color: #069;
    --content-color: #ddd;
    --content-background-color: #023;
  }

  body.dark .notice.info {
    --title-background-color: #a50;
    --content-background-color: #420;
  }

  body.dark .notice.tip {
    --title-background-color: #363;
    --content-background-color: #121;
  }

  body.dark .notice.warning {
    --title-background-color: #800;
    --content-background-color: #400;
  }

   
  .notice {
    width: 100%;  
    max-width: 600px;  
    padding: 18px;
    line-height: 24px;
    margin-bottom: 24px;
    border-radius: 4px;
    color: var(--content-color);
    background: var(--content-background-color);
  }

  .notice p:last-child {
    margin-bottom: 0;
  }

   
  .notice-title {
    margin: -18px -18px 12px;
    padding: 4px 18px;
    border-radius: 4px 4px 0 0;
    font-weight: 700;
    color: var(--title-color);
    background: var(--title-background-color);
  }

   
  .icon-notice {
    display: inline-flex;
    align-self: center;
    margin-right: 8px;
  }

  .icon-notice img,
  .icon-notice svg {
    height: 1em;
    width: 1em;
    fill: currentColor;
  }

  .icon-notice img,
  .icon-notice.baseline svg {
    top: 0.125em;
    position: relative;
  }
&lt;/style&gt;&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;Spring，SpringBoot，SpringMVC的关系和区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Spring&lt;/strong&gt; 是基础框架，用来管理Bean对象，提供核心功能，如 IOC、AOP、事务管理等，同时方便整合各种框架。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring MVC&lt;/strong&gt; 是 &lt;strong&gt;Spring&lt;/strong&gt; 的 Web 组件，是spring对web框架的解决方案，主要用于构建基于 MVC 模式的 Web 应用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spring Boot&lt;/strong&gt; 进一步简化了 Spring 和 Spring MVC 的使用，提供自动配置、嵌入式服务器、简化依赖管理，适用于快速开发 Web 和微服务应用。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;h2 id=&#34;spring的常用注解&#34;&gt;Spring的常用注解
&lt;/h2&gt;&lt;h3 id=&#34;web开发&#34;&gt;Web开发
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Controller&lt;/code&gt;：用于标注控制层组件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@RestController&lt;/code&gt;：是&lt;code&gt;@Controller&lt;/code&gt; 和 &lt;code&gt;@ResponseBody&lt;/code&gt; 的结合体，返回 JSON 数据时使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@RequestMapping&lt;/code&gt;：用于映射请求 URL 到具体的方法上，还可以细分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@GetMapping&lt;/code&gt;：只能用于处理 GET 请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@PostMapping&lt;/code&gt;：只能用于处理 POST 请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@DeleteMapping&lt;/code&gt;：只能用于处理 DELETE 请求&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@ResponseBody&lt;/code&gt;：直接将返回的数据放入 HTTP 响应正文中，一般用于返回 JSON 数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@RequestBody&lt;/code&gt;：表示一个方法参数应该绑定到 Web 请求体。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@PathVariable&lt;/code&gt;：用于接收路径参数，比如 &lt;code&gt;@RequestMapping(“/hello/{name}”)&lt;/code&gt;，这里的 name 就是路径参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@RequestParam&lt;/code&gt;：用于接收请求参数。比如 &lt;code&gt;@RequestParam(name = &amp;quot;key&amp;quot;) String key&lt;/code&gt;，这里的 key 就是请求参数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;容器类&#34;&gt;容器类
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Component&lt;/code&gt;：标识一个类为 Spring 组件，使其能够被 Spring 容器自动扫描和管理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Service&lt;/code&gt;：标识一个业务逻辑组件（服务层）。比如 &lt;code&gt;@Service(&amp;quot;userService&amp;quot;)&lt;/code&gt;，这里的 userService 就是 Bean 的名称。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Repository&lt;/code&gt;：标识一个数据访问组件（持久层）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Autowired&lt;/code&gt;：按类型自动注入依赖。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Configuration&lt;/code&gt;：用于定义配置类，可替换 XML 配置文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Value&lt;/code&gt;：用于将 Spring Boot 中 application.properties 配置的属性值赋值给变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aop&#34;&gt;AOP
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Aspect&lt;/code&gt; 用于声明一个切面，可以配合其他注解一起使用，比如：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@After&lt;/code&gt;：在方法执行之后执行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Before&lt;/code&gt;：在方法执行之前执行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Around&lt;/code&gt;：方法前后均执行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@PointCut&lt;/code&gt;：定义切点，指定需要拦截的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring中的设计模式&#34;&gt;Spring中的设计模式
&lt;/h2&gt;&lt;h3 id=&#34;工厂模式&#34;&gt;工厂模式
&lt;/h3&gt;&lt;p&gt;Spring 使用工厂模式可以通过 &lt;code&gt;BeanFactory&lt;/code&gt; 或 &lt;code&gt;ApplicationContext&lt;/code&gt; 创建 bean 对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BeanFactory&lt;/code&gt;：延迟注入（使用到某个 bean 的时候才会注入），相比于&lt;code&gt;ApplicationContext&lt;/code&gt; 来说会占用更少的内存，程序启动速度更快。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ApplicationContext&lt;/code&gt;：容器启动的时候，一次性创建所有 bean 。&lt;code&gt;BeanFactory&lt;/code&gt; 仅提供了最基本的依赖注入支持，&lt;code&gt;ApplicationContext&lt;/code&gt; 扩展了 &lt;code&gt;BeanFactory&lt;/code&gt; ,除了有&lt;code&gt;BeanFactory&lt;/code&gt;的功能还有额外更多功能，所以一般开发人员使用&lt;code&gt;ApplicationContext&lt;/code&gt;会更多。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ApplicationContext&lt;/code&gt; 的三个实现类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ClassPathXmlApplication&lt;/code&gt;：把上下文文件当成类路径资源。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FileSystemXmlApplication&lt;/code&gt;：从文件系统中的 XML 文件载入上下文定义信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;XmlWebApplicationContext&lt;/code&gt;：从 Web 系统中的 XML 文件载入上下文定义信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ApplicationContext&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ClassPathXmlApplicationContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;applicationContext.xml&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyBean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myBean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getBean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyBean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;单例模式&#34;&gt;单例模式
&lt;/h3&gt;&lt;p&gt;在Bean对象的创建中使用了单例模式。&lt;strong&gt;Spring 中 bean 的默认作用域就是 singleton(单例)的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spring中实现单例模式的核心代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 通过 ConcurrentHashMap（线程安全） 实现单例注册表&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;singletonObjects&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ConcurrentHashMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;getSingleton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beanName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ObjectFactory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;singletonFactory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;notNull&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beanName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#39;beanName&amp;#39; must not be null&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;synchronized&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;singletonObjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 检查缓存中是否存在实例&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;singletonObject&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;singletonObjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beanName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;singletonObject&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//...省略了很多代码&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;singletonObject&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;singletonFactory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//...省略了很多代码&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 如果实例对象在不存在，我们注册到单例注册表中。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addSingleton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beanName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;singletonObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;singletonObject&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NULL_OBJECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;singletonObject&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//将对象添加到单例注册表&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;addSingleton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beanName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;singletonObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;synchronized&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;singletonObjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;singletonObjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beanName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;singletonObject&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;singletonObject&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NULL_OBJECT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Spring中的单例模式属于 &lt;strong&gt;&amp;ldquo;注册式单例&amp;rdquo;&lt;/strong&gt; ，广泛用于 &lt;strong&gt;Spring 容器的单例 Bean 管理&lt;/strong&gt;。它的优势是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;线程安全&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持懒加载&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持多个单例对象的管理&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;代理模式&#34;&gt;代理模式
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Spring AOP 就是基于动态代理的&lt;/strong&gt;，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 &lt;strong&gt;JDK Proxy&lt;/strong&gt; 去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 &lt;strong&gt;Cglib&lt;/strong&gt; 生成一个被代理对象的子类来作为代理&lt;/p&gt;
&lt;h3 id=&#34;适配器模式&#34;&gt;适配器模式
&lt;/h3&gt;&lt;p&gt;在 Spring MVC 中，&lt;code&gt;DispatcherServlet&lt;/code&gt; 根据请求信息调用 &lt;code&gt;HandlerMapping&lt;/code&gt;，解析请求对应的 &lt;code&gt;Handler&lt;/code&gt;。解析到对应的 &lt;code&gt;Handler&lt;/code&gt;（也就是 &lt;code&gt;Controller&lt;/code&gt; 控制器）后，开始由&lt;code&gt;HandlerAdapter&lt;/code&gt; 适配器处理。&lt;code&gt;HandlerAdapter&lt;/code&gt; 作为期望接口，具体的适配器实现类用于对目标类进行适配，&lt;code&gt;Controller&lt;/code&gt; 作为需要适配的类。&lt;/p&gt;
&lt;h2 id=&#34;spring中的基本概念&#34;&gt;Spring中的基本概念
&lt;/h2&gt;&lt;h3 id=&#34;bean对象&#34;&gt;Bean对象
&lt;/h3&gt;&lt;h4 id=&#34;定义&#34;&gt;定义
&lt;/h4&gt;&lt;p&gt;任何通过 Spring 容器实例化、组装和管理的 Java 对象都是 &lt;strong&gt;Bean对象&lt;/strong&gt; 。Bean 可以在 Spring 容器中被定义并且通过依赖注入来与其他 Bean 进行互相依赖。&lt;/p&gt;
&lt;h4 id=&#34;生命周期&#34;&gt;生命周期
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;实例化&lt;/strong&gt;：当 Spring 容器启动时，根据配置文件或注解，Spring 会首先实例化 Bean。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖注入&lt;/strong&gt;：在实例化之后，Spring 容器会通过构造器、setter 方法或注解将其他 Bean 的依赖注入进来。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;初始化&lt;/strong&gt;：如果 Bean 实现了 &lt;code&gt;InitializingBean&lt;/code&gt; 接口或者使用了 &lt;code&gt;@PostConstruct&lt;/code&gt; 注解，Spring 会在依赖注入完成后调用相应的初始化方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;销毁&lt;/strong&gt;：如果 Bean 实现了 &lt;code&gt;DisposableBean&lt;/code&gt; 接口或使用了 &lt;code&gt;@PreDestroy&lt;/code&gt; 注解，Spring 会在容器关闭时调用销毁方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ioc容器&#34;&gt;IOC容器
&lt;/h3&gt;&lt;h4 id=&#34;定义-1&#34;&gt;定义
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;IOC（Inversion of Control，控制反转）&lt;/strong&gt; 容器是 &lt;strong&gt;Spring 框架的核心&lt;/strong&gt;，用于&lt;strong&gt;管理 Java 对象（Bean）的创建、初始化、配置、依赖注入和生命周期管理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;IOC 容器是 &lt;strong&gt;Spring 提供的一个工厂，专门负责创建和管理对象（Bean）&lt;/strong&gt;，并自动将它们的依赖关系组装起来。开发者无需手动创建对象，而是由 Spring 容器&lt;strong&gt;自动注入&lt;/strong&gt;所需的对象。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>控制反转（IOC)</title>
        <link>https://Tyritic.github.io/p/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%ACioc/</link>
        <pubDate>Sun, 03 Nov 2024 15:06:44 +0800</pubDate>
        
        <guid>https://Tyritic.github.io/p/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%ACioc/</guid>
        <description>&lt;h2 id=&#34;ioc容器&#34;&gt;IOC容器
&lt;/h2&gt;&lt;h3 id=&#34;概念定义&#34;&gt;概念定义
&lt;/h3&gt;&lt;p&gt;IOC 容器是 Spring 框架的核心部分，负责管理应用程序中的对象生命周期和依赖注入。&lt;/p&gt;
&lt;h3 id=&#34;容器接口&#34;&gt;容器接口
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;BeanFactory&lt;/code&gt;&lt;/strong&gt; 接口是 &lt;strong&gt;IOC 的底层容器&lt;/strong&gt; 。负责管理和配置应用中的 Bean。主要负责配置、创建和管理 bean，为 Spring 提供了基本的依赖注入（DI）支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ApplicationContext&lt;/code&gt;&lt;/strong&gt; 是 &lt;strong&gt;&lt;code&gt;BeanFactory&lt;/code&gt;&lt;/strong&gt; 的子接口，在 &lt;strong&gt;&lt;code&gt;BeanFactory&lt;/code&gt;&lt;/strong&gt; 的基础上添加了企业级的功能支持。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心容器 &lt;strong&gt;&lt;code&gt;BeanFactory&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;国际化 &lt;strong&gt;&lt;code&gt;MessageSource&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;资源获取 &lt;strong&gt;&lt;code&gt;ResourceLoader&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;环境信息 &lt;strong&gt;&lt;code&gt;EnvironmentCapable&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;事件发布 &lt;strong&gt;&lt;code&gt;ApplicationEventPublisher&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中 &lt;strong&gt;&lt;code&gt;ApplicationContext&lt;/code&gt;&lt;/strong&gt; 具有以下实现类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;ClassPathXmlApplicationContext&lt;/code&gt;&lt;/strong&gt; ：通过读取类路径（resources）下的 XML格式的配置文件创建IOC容器对象&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;FileSystemXmlApplicationContext&lt;/code&gt;&lt;/strong&gt; ：通过文件系统路径读取 XML 格式的配置文件创建IOC 容器对象&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;AnnotationConfigApplicationContext&lt;/code&gt;&lt;/strong&gt; ：通过读取 Java 配置类创建 IOC 容腊对象&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;WebApplicationContext&lt;/code&gt;&lt;/strong&gt; ：专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 城中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器获取&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据name获取bean: &lt;strong&gt;&lt;code&gt;Object getBean(String name)&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;根据类型获取bean：&lt;strong&gt;&lt;code&gt;&amp;lt;T&amp;gt;T getBean(class&amp;lt;T&amp;gt; requiredType)&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;根据name获取bean(带类型转换)：&lt;strong&gt;&lt;code&gt;&amp;lt;T&amp;gt;T getBean(String name,Class&amp;lt;T&amp;gt;requiredType)&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bean对象&#34;&gt;Bean对象
&lt;/h2&gt;&lt;h3 id=&#34;概念定义-1&#34;&gt;概念定义
&lt;/h3&gt;&lt;p&gt;任何通过 Spring 容器实例化、组装和管理的 Java 对象都可以被称为 Spring Bean。Bean 可以在 Spring 容器中被定义并且通过依赖注入来与其他 Bean 进行互相依赖。&lt;/p&gt;
&lt;p&gt;即 Bean 可以看作是 Spring 应用中的一个对象，它的生命周期（创建、初始化、使用、销毁等过程）完全由 Spring 容器管理。&lt;/p&gt;
&lt;h3 id=&#34;生命周期&#34;&gt;生命周期
&lt;/h3&gt;&lt;h4 id=&#34;过程定义&#34;&gt;过程定义
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实例化&lt;/strong&gt;：当 Spring 容器启动时，根据配置文件或注解，Spring 会首先实例化 Bean。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring 容器根据 Bean 的定义创建 Bean 的实例，相当于执行构造方法，也就是 new 一个对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;依赖注入&lt;/strong&gt;：在实例化之后，Spring 容器会通过构造器、setter 方法或注解将其他 Bean 的依赖注入进来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相当于执行 setter 方法为字段赋值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;初始化&lt;/strong&gt;：如果 Bean 实现了 &lt;strong&gt;&lt;code&gt;InitializingBean&lt;/code&gt;&lt;/strong&gt; 接口或者使用了 &lt;strong&gt;&lt;code&gt;@PostConstruct&lt;/code&gt;&lt;/strong&gt; 注解，Spring 会在依赖注入完成后调用相应的初始化方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化阶段允许执行自定义的逻辑，比如设置某些必要的属性值、开启资源、执行预加载操作等，以确保 Bean 在使用之前是完全配置好的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;销毁&lt;/strong&gt;：如果 Bean 实现了 &lt;strong&gt;&lt;code&gt;DisposableBean&lt;/code&gt;&lt;/strong&gt; 接口或使用了 &lt;strong&gt;&lt;code&gt;@PreDestroy&lt;/code&gt;&lt;/strong&gt; 注解，Spring 会在容器关闭时调用销毁方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相当于执行 &lt;code&gt;= null&lt;/code&gt;，释放资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;生命周期的拓展&#34;&gt;生命周期的拓展
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;@PostConstruct&lt;/code&gt;&lt;/strong&gt; 注解用于标识某个方法是 Bean 初始化后的回调方法。当 Spring 完成对 Bean 的依赖注入之后，它会自动调用带有 &lt;strong&gt;&lt;code&gt;@PostConstruct&lt;/code&gt;&lt;/strong&gt; 注解的方法。
&lt;ul&gt;
&lt;li&gt;使用场景
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;依赖注入后做额外的初始化工作&lt;/strong&gt;：例如，某个服务需要在依赖注入后连接外部系统。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进行状态检查&lt;/strong&gt;：在 Bean 初始化后验证某些关键属性是否正确配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;执行时机
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;@PostConstruct&lt;/code&gt;&lt;/strong&gt; 方法在依赖注入完成后立即执行，但在 Bean 可以被其他对象使用之前调用（即在 Bean 完成初始化前调用，Bean 处于准备状态）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;@PreDestroy&lt;/code&gt;&lt;/strong&gt; 注解用于标识当 Bean 被销毁时应该调用的方法。这个方法通常用于释放资源、关闭连接或者其他清理操作。Spring 容器在关闭时，会自动调用这些方法来进行资源的释放。
&lt;ul&gt;
&lt;li&gt;使用场景
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;资源清理&lt;/strong&gt;：例如关闭数据库连接、文件句柄、线程池等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;会话管理&lt;/strong&gt;：例如在 Web 应用中，清理用户会话或缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;执行时机：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;@PreDestroy&lt;/code&gt;&lt;/strong&gt; 方法在 Bean 即将被销毁时调用，一般是在 Spring 容器关闭时执行。对于单例（&lt;code&gt;singleton&lt;/code&gt;）作用域的 Bean，会在容器关闭时调用；对于原型（&lt;code&gt;prototype&lt;/code&gt;）作用域的 Bean，不会调用销毁方法，因为容器不管理其生命周期。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BeanPostProcessor接口&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;通过实现 &lt;strong&gt;&lt;code&gt;BeanPostProcessor&lt;/code&gt;&lt;/strong&gt; 接口，开发者可以在 Bean 初始化前后添加自定义逻辑，如动态代理、AOP 增强等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BeanFactoryPostProcessor接口&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;BeanFactoryPostProcessor&lt;/code&gt;&lt;/strong&gt; 允许开发者在 Bean 实例化之前，修改 Bean 的定义信息（如属性值），它在所有 Bean 实例化之前执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aware 接口&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;Spring 提供了多个 &lt;strong&gt;&lt;code&gt;Aware&lt;/code&gt;&lt;/strong&gt; 接口，如 &lt;strong&gt;&lt;code&gt;BeanNameAware&lt;/code&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;BeanFactoryAware&lt;/code&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;ApplicationContextAware&lt;/code&gt;&lt;/strong&gt; 等，允许 Bean 获取 Spring 容器的相关信息，进一步定制生命周期。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;定义方式&#34;&gt;定义方式
&lt;/h3&gt;&lt;h4 id=&#34;基于xml配置文件&#34;&gt;基于xml配置文件
&lt;/h4&gt;&lt;p&gt;早期的 Spring 应用通常通过 XML 文件定义 Bean，使用 &lt;code&gt;&amp;lt;bean&amp;gt;&lt;/code&gt; 标签来指定类、构造器参数和依赖关系。&lt;/p&gt;
&lt;p&gt;具体实现步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写配置文件（元数据）&lt;/li&gt;
&lt;li&gt;示例化IOC容器&lt;/li&gt;
&lt;li&gt;获取Bean对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;基于注解定义bean对象&#34;&gt;基于注解定义Bean对象
&lt;/h4&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;注解&lt;/th&gt;
          &lt;th&gt;说明&lt;/th&gt;
          &lt;th&gt;位置&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;@Component&lt;/td&gt;
          &lt;td&gt;声明Bean对象的基本注解&lt;/td&gt;
          &lt;td&gt;不属于以下三类时使用该注解&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;@Service&lt;/td&gt;
          &lt;td&gt;@Component的衍生注解，用于标识业务逻辑层的类。它具有明确的语义，表明该类承担业务操作&lt;/td&gt;
          &lt;td&gt;标注在ServiceImpl类上&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;@Controller&lt;/td&gt;
          &lt;td&gt;@Component的衍生注解，用于处理 HTTP 请求，并将结果返回给客户端。&lt;/td&gt;
          &lt;td&gt;标注在Controller类上&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;@Repository&lt;/td&gt;
          &lt;td&gt;@Component的衍生注解，用于数据访问层（DAO）的类，与数据库交互。&lt;/td&gt;
          &lt;td&gt;标注在数据访问类上（现在有mybatis，使用频率少）&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Component&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UserService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写&lt;/li&gt;
&lt;li&gt;使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用 &lt;strong&gt;&lt;code&gt;@Controller&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体实现步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在组件中添加对应注解&lt;/li&gt;
&lt;li&gt;指定组件扫描范围
&lt;ul&gt;
&lt;li&gt;Spring：修改xml配置文件&lt;/li&gt;
&lt;li&gt;SpringBoot：默认扫描的范围是启动类所在包及其子包。&lt;strong&gt;&lt;code&gt;@ComponentScan&lt;/code&gt;&lt;/strong&gt; 注解虽然没有显式配置，但是实际上已经包含在了启动类声明注解 &lt;strong&gt;&lt;code&gt;@SpringBootApplication&lt;/code&gt;&lt;/strong&gt; 中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从IOC容器中获取容器&lt;/li&gt;
&lt;/ul&gt;
&lt;style type=&#34;text/css&#34;&gt;
   
  .notice {
    --title-color: #fff;
    --title-background-color: #6be;
    --content-color: #444;
    --content-background-color: #e7f2fa;
  }

  .notice.info {
    --title-background-color: #fb7;
    --content-background-color: #fec;
  }

  .notice.tip {
    --title-background-color: #5a5;
    --content-background-color: #efe;
  }

  .notice.warning {
    --title-background-color: #c33;
    --content-background-color: #fee;
  }

   
  @media (prefers-color-scheme: dark) {
    .notice {
      --title-color: #fff;
      --title-background-color: #069;
      --content-color: #ddd;
      --content-background-color: #023;
    }

    .notice.info {
      --title-background-color: #a50;
      --content-background-color: #420;
    }

    .notice.tip {
      --title-background-color: #363;
      --content-background-color: #121;
    }

    .notice.warning {
      --title-background-color: #800;
      --content-background-color: #400;
    }
  }

  body.dark .notice {
    --title-color: #fff;
    --title-background-color: #069;
    --content-color: #ddd;
    --content-background-color: #023;
  }

  body.dark .notice.info {
    --title-background-color: #a50;
    --content-background-color: #420;
  }

  body.dark .notice.tip {
    --title-background-color: #363;
    --content-background-color: #121;
  }

  body.dark .notice.warning {
    --title-background-color: #800;
    --content-background-color: #400;
  }

   
  .notice {
    width: 100%;  
    max-width: 600px;  
    padding: 18px;
    line-height: 24px;
    margin-bottom: 24px;
    border-radius: 4px;
    color: var(--content-color);
    background: var(--content-background-color);
  }

  .notice p:last-child {
    margin-bottom: 0;
  }

   
  .notice-title {
    margin: -18px -18px 12px;
    padding: 4px 18px;
    border-radius: 4px 4px 0 0;
    font-weight: 700;
    color: var(--title-color);
    background: var(--title-background-color);
  }

   
  .icon-notice {
    display: inline-flex;
    align-self: center;
    margin-right: 8px;
  }

  .icon-notice img,
  .icon-notice svg {
    height: 1em;
    width: 1em;
    fill: currentColor;
  }

  .icon-notice img,
  .icon-notice.baseline svg {
    top: 0.125em;
    position: relative;
  }
&lt;/style&gt;&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;@Bean&lt;/code&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/strong&gt; 的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;@Bean&lt;/code&gt;&lt;/strong&gt; 注解通常用于 Java 配置类的方法上，以声明一个 Bean 并将其添加到 Spring 容器中，&lt;strong&gt;用于显示声明&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;使用场景：用于配置第三方库或复杂对象&lt;/li&gt;
&lt;li&gt;控制权限：&lt;strong&gt;&lt;code&gt;@Bean&lt;/code&gt;&lt;/strong&gt; 注解允许开发人员手动控制Bean的创建和配置过程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/strong&gt; 注解用于类级别，将该类标记为 Spring 容器中的一个组件，自动检测并注册为 Bean（需要扫对应的包），用于&lt;strong&gt;自动扫描和注入&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;使用场景：用于自动发现并注册自定义类&lt;/li&gt;
&lt;li&gt;控制权限：&lt;strong&gt;&lt;code&gt;@Component&lt;/code&gt;&lt;/strong&gt; 注解修饰的类是出Spring框架来创建和初始化的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;h4 id=&#34;基于配置类定义bean对象&#34;&gt;基于配置类定义Bean对象
&lt;/h4&gt;&lt;p&gt;可以使用Java配置类来代替xml文件对Bean对象进行配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/strong&gt; 用于修饰一个类，指示某个Java类是配置类&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;@Bean&lt;/strong&gt; 用于修饰一个方法，标识该方法的返回值是一个Bean对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建Bean类&lt;/li&gt;
&lt;li&gt;创建对应的Java配置类，并使用 &lt;strong&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/strong&gt; 进行修饰，并在配置类中定义一个返回值为Bean对象的方法，这个方法用**&lt;code&gt;@Bean&lt;/code&gt;**&lt;/li&gt;
&lt;li&gt;从IOC容器中获取Bean对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;示例代码&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Configuration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;commonconfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Bean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//将方法返回值交给I0C容器管理,成为IOC容器的bean对象&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SAXReader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;saxReader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SAXReader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;通过 &lt;strong&gt;&lt;code&gt;@Bean&lt;/code&gt;&lt;/strong&gt; 注解的name或value属性可以声明bean的名称，如果不指定，默认bean的名称就是方法名&lt;/li&gt;
&lt;li&gt;如果第三方bean需要依赖其它bean对象，直接在bean定义方法中设置形参即可，容器会根据类型自动装配。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;h3 id=&#34;作用域&#34;&gt;作用域
&lt;/h3&gt;&lt;h4 id=&#34;五大作用域&#34;&gt;五大作用域
&lt;/h4&gt;&lt;p&gt;Spring支持五种作用域，后三种在web环境才生效&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;作用域&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;singleton&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;容器内同名称 的 bean 只有一个实例(单例)(默认)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;prototype&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;每次使用该 bean 时会创建新的实例(非单例)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;request&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;每个请求范围内会创建新的实例(web环境中，了解)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;session&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;每个会话范围内会创建新的实例(web环境中，了解)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;application&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;每个应用范围内会创建新的实例(web环境中，了解)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;使用 &lt;strong&gt;&lt;code&gt;@Scope&lt;/code&gt;&lt;/strong&gt; 注解来指定作用域&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Scope&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;prototype&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@RestController&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/depts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DeptController&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div
  class=&#34;notice warning&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;126 76.5 300 300&#34;&gt;
  &lt;path d=&#34;M297.431 324.397v-34.255c0-3.245-2.344-5.95-5.358-5.95h-32.146c-3.014 0-5.358 2.705-5.358 5.95v34.255c0 3.245 2.344 5.95 5.358 5.95h32.146c3.014 0 5.358-2.705 5.358-5.95Zm-.335-67.428 3.014-82.753c0-1.081-.502-2.524-1.674-3.425-1.005-.902-2.512-1.983-4.019-1.983h-36.834c-1.507 0-3.014 1.081-4.019 1.983-1.172.901-1.674 2.704-1.674 3.786l2.846 82.392c0 2.344 2.512 4.146 5.693 4.146h30.975c3.013 0 5.525-1.803 5.692-4.146Zm-2.344-168.39L423.34 342.425c3.683 7.032 3.516 15.686-.335 22.717-3.85 7.031-10.883 11.358-18.417 11.358H147.413c-7.534 0-14.566-4.327-18.417-11.358-3.85-7.031-4.018-15.685-.335-22.716L257.248 88.578C260.93 81.188 268.13 76.5 276 76.5c7.87 0 15.069 4.688 18.752 12.08Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;警告&lt;/p&gt;&lt;p&gt;注意事项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;singleton&lt;/code&gt;&lt;/strong&gt; 的bean，在容器启动时被创建，可以使用 &lt;strong&gt;&lt;code&gt;@Lazy&lt;/code&gt;&lt;/strong&gt; 注解来延迟初始化(延迟到第一次使用时)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;prototype&lt;/code&gt;&lt;/strong&gt; 的bean，每一次使用该bean的时候都会创建一个新的实例。&lt;/li&gt;
&lt;li&gt;实际开发当中，绝大部分的Bean是单例的，也就是说绝大部分Bean不需要配置scope属性。&lt;/li&gt;
&lt;li&gt;Spring 中的 Bean 默认都是单例的。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;h4 id=&#34;作用域对生命周期的影响&#34;&gt;作用域对生命周期的影响
&lt;/h4&gt;&lt;p&gt;Spring 只帮我们管理单例模式 Bean 的完整生命周期，对于 &lt;strong&gt;&lt;code&gt;prototype&lt;/code&gt;&lt;/strong&gt; 的 Bean，Spring 在创建好交给使用者之后，则不会再管理后续的生命周期。&lt;/p&gt;
&lt;h3 id=&#34;区分要素&#34;&gt;区分要素
&lt;/h3&gt;&lt;p&gt;在 &lt;strong&gt;Spring&lt;/strong&gt; 中，&lt;code&gt;id&lt;/code&gt; 和 &lt;code&gt;name&lt;/code&gt; 用于唯一标识 &lt;strong&gt;Bean&lt;/strong&gt;，确保在 &lt;strong&gt;IOC 容器&lt;/strong&gt; 中可以正确获取 Bean。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;属性&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;作用&lt;/th&gt;
          &lt;th&gt;定义方式&lt;/th&gt;
          &lt;th&gt;唯一性&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;id&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Bean 的唯一标识符&lt;/td&gt;
          &lt;td&gt;只能是 &lt;strong&gt;一个&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;必须唯一&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Bean 的别名，可有多个&lt;/td&gt;
          &lt;td&gt;允许 &lt;strong&gt;多个别名&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;可以重复&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Spring &lt;strong&gt;默认以类名（首字母小写）&lt;/strong&gt;  作为Bean的 &lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，&lt;strong&gt;&lt;code&gt;id&lt;/code&gt;&lt;/strong&gt; 属性和 &lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt; 属性的值是相同的。如果只配置了 &lt;strong&gt;&lt;code&gt;id&lt;/code&gt;&lt;/strong&gt; 属性而没有配置 &lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt; 属性，则 &lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt; 属性默认与 &lt;strong&gt;&lt;code&gt;id&lt;/code&gt;&lt;/strong&gt; 属性相同。&lt;/p&gt;
&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;使用xml文件配置时，同一个xml配置文件中不允许存在多个相同的id，在多个xml配置文件中允许存在多个相关id，但是&lt;/p&gt;
&lt;p&gt;在同一个配置类文件中，如果存在多个 &lt;strong&gt;&lt;code&gt;id&lt;/code&gt;&lt;/strong&gt; 相同的Bean对象，容器内只会注册第一个Bean对象&lt;/p&gt;&lt;/div&gt;

&lt;h2 id=&#34;什么是控制反转ioc&#34;&gt;什么是控制反转（IOC)
&lt;/h2&gt;&lt;p&gt;IOC意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。以右图为例&lt;img src=&#34;https://Tyritic.github.io/p/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%ACioc/73d67b2030772821a4bd2e6b746ecd38.png&#34;
	width=&#34;384&#34;
	height=&#34;209&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;183&#34;
		data-flex-basis=&#34;440px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;IOC容器作为中间位置“第三方”，也就是，使得A、B、C、D这四个对象没有了耦合关系，齿轮之间的传动全部依靠IOC容器，全部对象的控制权上交给IOC容器，所以IOC容器成了整个系统的关键核心，它起到一个“粘合剂”的作用，把系统中所有对象粘合在一起发挥作用。&lt;/p&gt;
&lt;h2 id=&#34;ioc的关键点&#34;&gt;IOC的关键点
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;谁控制谁&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；&lt;/li&gt;
&lt;li&gt;而IOC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制了什么&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;那就是主要控制了外部资源获取（不只是对象包括比如文件等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;什么是反转&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；&lt;/li&gt;
&lt;li&gt;而反转则是由容器来帮忙创建及注入依赖对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;为什么是反转&lt;/strong&gt;：因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;哪些方面反转了&lt;/strong&gt;：依赖对象的获取被反转了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ioc的过程&#34;&gt;IOC的过程
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;所有的类都会在Spring容器中登记，告诉spring你是个什么东西，你需要什么东西，&lt;/li&gt;
&lt;li&gt;然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。&lt;/li&gt;
&lt;li&gt;所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。&lt;/li&gt;
&lt;li&gt;对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
