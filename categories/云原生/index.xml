<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>云原生 on Tyritic</title>
        <link>https://Tyritic.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/</link>
        <description>Recent content in 云原生 on Tyritic</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Tyritic</copyright><atom:link href="https://Tyritic.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Docker与容器化</title>
        <link>https://Tyritic.github.io/p/docker%E4%B8%8E%E5%AE%B9%E5%99%A8%E5%8C%96/</link>
        <pubDate>Tue, 25 Feb 2025 20:36:53 +0800</pubDate>
        
        <guid>https://Tyritic.github.io/p/docker%E4%B8%8E%E5%AE%B9%E5%99%A8%E5%8C%96/</guid>
        <description>&lt;h2 id=&#34;docker的定义&#34;&gt;Docker的定义
&lt;/h2&gt;&lt;p&gt;Docker 本质上就是一个将 &lt;strong&gt;程序和环境打包并运行&lt;/strong&gt; 的工具软件。具体点来说就是，它通过 Dockerfile 描述环境和应用程序的依赖关系， docker build 构建镜像， docker pull/push 跟 Docker Registry 交互实现存储和分发镜像，docker run 命令基于镜像启动容器，基于容器技术运行程序和它对应的环境，从而解决环境依赖导致的各种问题。&lt;/p&gt;
&lt;style type=&#34;text/css&#34;&gt;
   
  .notice {
    --title-color: #fff;
    --title-background-color: #6be;
    --content-color: #444;
    --content-background-color: #e7f2fa;
  }

  .notice.info {
    --title-background-color: #fb7;
    --content-background-color: #fec;
  }

  .notice.tip {
    --title-background-color: #5a5;
    --content-background-color: #efe;
  }

  .notice.warning {
    --title-background-color: #c33;
    --content-background-color: #fee;
  }

   
  @media (prefers-color-scheme: dark) {
    .notice {
      --title-color: #fff;
      --title-background-color: #069;
      --content-color: #ddd;
      --content-background-color: #023;
    }

    .notice.info {
      --title-background-color: #a50;
      --content-background-color: #420;
    }

    .notice.tip {
      --title-background-color: #363;
      --content-background-color: #121;
    }

    .notice.warning {
      --title-background-color: #800;
      --content-background-color: #400;
    }
  }

  body.dark .notice {
    --title-color: #fff;
    --title-background-color: #069;
    --content-color: #ddd;
    --content-background-color: #023;
  }

  body.dark .notice.info {
    --title-background-color: #a50;
    --content-background-color: #420;
  }

  body.dark .notice.tip {
    --title-background-color: #363;
    --content-background-color: #121;
  }

  body.dark .notice.warning {
    --title-background-color: #800;
    --content-background-color: #400;
  }

   
  .notice {
    width: 100%;  
    max-width: 600px;  
    padding: 18px;
    line-height: 24px;
    margin-bottom: 24px;
    border-radius: 4px;
    color: var(--content-color);
    background: var(--content-background-color);
  }

  .notice p:last-child {
    margin-bottom: 0;
  }

   
  .notice-title {
    margin: -18px -18px 12px;
    padding: 4px 18px;
    border-radius: 4px 4px 0 0;
    font-weight: 700;
    color: var(--title-color);
    background: var(--title-background-color);
  }

   
  .icon-notice {
    display: inline-flex;
    align-self: center;
    margin-right: 8px;
  }

  .icon-notice img,
  .icon-notice svg {
    height: 1em;
    width: 1em;
    fill: currentColor;
  }

  .icon-notice img,
  .icon-notice.baseline svg {
    top: 0.125em;
    position: relative;
  }
&lt;/style&gt;&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;程序和环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序是在操作系统上运行的&lt;/li&gt;
&lt;li&gt;环境是操作系统上装了各种不同版本的依赖库和配置，这些被程序所依赖的信息&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;h2 id=&#34;docker的基本概念&#34;&gt;Docker的基本概念
&lt;/h2&gt;&lt;h3 id=&#34;基础镜像&#34;&gt;基础镜像
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;基础镜像&lt;/strong&gt; (Base Image)包括以下部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选中一个基础操作系统和语言后，将对应的文件系统&lt;/li&gt;
&lt;li&gt;依赖库&lt;/li&gt;
&lt;li&gt;配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将以上部分放一起打包成一个类似压缩包的文件，这就是所谓的 &lt;strong&gt;基础镜像&lt;/strong&gt; (Base Image)。&lt;/p&gt;
&lt;h3 id=&#34;dockerfile&#34;&gt;Dockerfile
&lt;/h3&gt;&lt;p&gt;Dockerfile相当于一个 &lt;strong&gt;todo list&lt;/strong&gt; 。有了基础镜像之后还需要安装一些依赖，比如 &lt;code&gt;yum install gcc&lt;/code&gt;，甚至还要创建一些文件夹。最后才是运行我们的目标 &lt;strong&gt;应用程序&lt;/strong&gt;。创建自定义镜像的文件。通过编写 Dockerfile，你可以定义镜像中应该包含哪些内容以及如何配置。&lt;/p&gt;
&lt;h3 id=&#34;容器镜像&#34;&gt;容器镜像
&lt;/h3&gt;&lt;p&gt;当我们用命令行执行 &lt;strong&gt;docker build&lt;/strong&gt; 的时候，Docker 软件就会按着 Dockerfile 的说明，一行行构建环境+应用程序。最终将这个环境+程序，打包成一个类似&amp;quot;压缩包&amp;quot;的东西，就是 &lt;strong&gt;容器镜像&lt;/strong&gt; (container image)。只要将容器镜像传到任意一台服务器上，对这个&amp;quot;压缩包&amp;quot;执行&amp;quot;解压缩&amp;quot;，就能同时运行环境和程序。总而言之，Docker 镜像是 Docker 容器的源代码，是镜像是一个只读的模板。，Docker 镜像用于创建容器。使用build 命令创建镜像。&lt;/p&gt;
&lt;h3 id=&#34;容器&#34;&gt;容器
&lt;/h3&gt;&lt;p&gt;在目的服务器上，执行 &lt;strong&gt;&lt;code&gt;docker pull&lt;/code&gt;&lt;/strong&gt; 拿到容器镜像。然后执行 &lt;strong&gt;&lt;code&gt;docker run&lt;/code&gt;&lt;/strong&gt; 命令，将这个类似&amp;quot;压缩包&amp;quot;的容器镜像给&amp;quot;解压缩&amp;quot;，获得一个 &lt;strong&gt;独立的环境和应用程序&lt;/strong&gt; 并运行起来。这样一个独立的环境和应用程序，就是所谓的&lt;strong&gt;容器&lt;/strong&gt;(container)。我们可以在一个操作系统上同时跑多个容器。且这些容器之间都是互相独立，互相隔离的。&lt;/p&gt;
&lt;p&gt;总而言之，Docker 容器包括应用程序及其所有依赖项，作为操作系统的独立进程运行。容器是动态的、可变的，可以启动、停止、移动和删除。在运行时，它拥有独立的文件系统、网络和进程空间，但与物理主机共享操作系统内核。&lt;/p&gt;
&lt;h3 id=&#34;镜像仓库&#34;&gt;镜像仓库
&lt;/h3&gt;&lt;p&gt;Docker 可以组建 &lt;strong&gt;镜像仓库&lt;/strong&gt; ，通过 &lt;strong&gt;docker push&lt;/strong&gt; 将镜像推到仓库，有需要的时候再通过 &lt;strong&gt;docker pull&lt;/strong&gt; 将镜像拉到机器上。这个负责管理镜像仓库推拉能力的服务，就叫 &lt;strong&gt;Docker Registry&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;docker的构建过程&#34;&gt;Docker的构建过程
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;编写 Dockerfile：Dockerfile 是一个文本文件，其中包含了一系列的指令，描述了如何构建一个 Docker 镜像。&lt;/li&gt;
&lt;li&gt;构建镜像：使用 &lt;code&gt;docker build&lt;/code&gt; 命令，通过读取 Dockerfile 的内容，逐步执行其中的指令，最终生成一个 Docker 镜像。&lt;/li&gt;
&lt;li&gt;保存镜像：构建完成的镜像会被保存到本地的 Docker 镜像库中，可以使用 &lt;code&gt;docker images&lt;/code&gt; 命令查看。&lt;/li&gt;
&lt;li&gt;发布镜像：如果需要共享镜像，可以将其推送到 Docker Hub 或其他镜像仓库，使用 &lt;code&gt;docker push&lt;/code&gt; 命令完成发布。&lt;/li&gt;
&lt;li&gt;使用镜像：最终用户可以使用 &lt;code&gt;docker run&lt;/code&gt; 命令来启动基于该镜像的容器，完成应用的部署和运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker的底层原理&#34;&gt;Docker的底层原理
&lt;/h2&gt;&lt;p&gt;Docker是经典的 Client/Server 架构。Client 对应 Docker-cli， Server 对应 Docker daemon。&lt;/p&gt;
&lt;h3 id=&#34;架构原理&#34;&gt;架构原理
&lt;/h3&gt;&lt;p&gt;Docker-cli 会解析我们输入的 cmd 命令，然后调用 Docker daemon 守护进程提供的 RESTful API，守护进程收到命令后，会根据指令创建和管理各个容器。&lt;/p&gt;
&lt;p&gt;Docker Daemon 内部分为 Docker Server、Engine 两层。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker Server 本质上就是个 HTTP 服务，负责对外提供操作容器和镜像的 api 接口，接收到 API 请求后，会分发任务给 Engine 层&lt;/li&gt;
&lt;li&gt;Engine 层负责创建 Job，由 Job 实际执行各种工作。这是 Docker 的核心，它是一个轻量级的运行时和工具集，用于管理容器。Docker引擎包括服务器端的守护进程（daemon）、API，以及CLI工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;容器化技术&#34;&gt;容器化技术
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Namespace 和 Cgroups&lt;/strong&gt;：这两个是 Docker 能够实现隔离的核心 Linux 技术。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Namespace 提供了进程、网络、挂载等资源的隔离，&lt;/li&gt;
&lt;li&gt;Cgroups 则负责限制和优先级分配，限制它能使用的计算资源，确保容器不会耗尽主机资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个容器运行在它自己的命名空间中，但是，确实与其它运行中的容器共用相同的系统内核。隔离的产生是由于系统内核清楚地知道命名空间及其中的进程，且这些进程调用系统 API 时，内核保证进程只能访问属于其命名空间中的资源。&lt;/p&gt;
&lt;div
  class=&#34;notice tip&#34;
  
&gt;
  &lt;p class=&#34;notice-title&#34;&gt;
    &lt;span class=&#34;icon-notice baseline&#34;&gt;
      &lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;300.5 134 300 300&#34;&gt;
  &lt;path d=&#34;M551.281 252.36c0-3.32-1.172-6.641-3.515-8.985l-17.774-17.578c-2.344-2.344-5.469-3.711-8.789-3.711-3.32 0-6.445 1.367-8.789 3.71l-79.687 79.493-44.141-44.14c-2.344-2.344-5.469-3.712-8.79-3.712-3.32 0-6.444 1.368-8.788 3.711l-17.774 17.579c-2.343 2.343-3.515 5.664-3.515 8.984 0 3.32 1.172 6.445 3.515 8.789l70.704 70.703c2.343 2.344 5.664 3.711 8.789 3.711 3.32 0 6.64-1.367 8.984-3.71l106.055-106.056c2.343-2.343 3.515-5.468 3.515-8.789ZM600.5 284c0 82.813-67.188 150-150 150-82.813 0-150-67.188-150-150 0-82.813 67.188-150 150-150 82.813 0 150 67.188 150 150Z&#34;/&gt;
&lt;/svg&gt;

    &lt;/span&gt;提示&lt;/p&gt;&lt;p&gt;Docker和虚拟机的关系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传统虚拟机自带一个完整操作系统&lt;/li&gt;
&lt;li&gt;容器本身不带完整操作系统，容器的基础镜像实际上只包含了操作系统的核心依赖库和配置文件等必要组件。容器本质上只是个自带独立运行环境的 &lt;strong&gt;特殊进程&lt;/strong&gt; ，底层用的其实是 &lt;strong&gt;宿主机的操作系统内核&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;h2 id=&#34;vps和ecs&#34;&gt;VPS和ECS
&lt;/h2&gt;&lt;p&gt;云厂商一般会 &lt;strong&gt;将一台物理服务器分割成多个虚拟机&lt;/strong&gt; 。每个虚拟机都拥有独立的操作系统、资源（比如 CPU、内存、存储空间）和公网 IP 地址。然后对外出售，这样的虚拟机就是所谓的 &lt;strong&gt;VPS&lt;/strong&gt;（Virtual Private Server，虚拟专用服务器）。&lt;/p&gt;
&lt;p&gt;但传统 VPS 有个缺点，不支持用户&lt;strong&gt;自主升降级&lt;/strong&gt;，它的资源是预先分配的，不易动态调整。&lt;/p&gt;
&lt;p&gt;而支持VPS自主升降级的功能就成了 &lt;strong&gt;ECS&lt;/strong&gt;（Elastic Compute Service，弹性计算服务）。用户可以根据需要随时调整 CPU、内存、磁盘和带宽，主打一个&amp;quot;&lt;strong&gt;弹性&lt;/strong&gt;&amp;quot;。&lt;/p&gt;
&lt;p&gt;而通常 &lt;strong&gt;物理服务器上跑 ecs，ecs 跑 Docker 容器。多个 Docker 容器共享一个 ecs 实例 操作系统内核&lt;/strong&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;容器服务编排&#34;&gt;容器服务编排
&lt;/h2&gt;&lt;p&gt;使用场景：一次部署在同一个物理服务器 &lt;strong&gt;多个&lt;/strong&gt; 容器组成的一套服务，且对这些容器的顺序有一定要求呢&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker Compose&lt;/strong&gt; 是用于定义和运行多容器 Docker 应用程序的工具。Compose 使用 YAML 文件定义服务、网络和卷，通过一条简单的命令 &lt;code&gt;docker-compose up&lt;/code&gt; 就可以启动并运行整个配置的应用环境。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;3.8&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;some-image-for-a&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;limits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cpus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;0.50&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 限制 CPU 使用率为 50%&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;256M&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 限制内存使用量为 256MB&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;some-image-for-b&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;depends_on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;some-image-for-c&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;depends_on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
