<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Redis on Tyritic</title>
        <link>https://Tyritic.github.io/categories/redis/</link>
        <description>Recent content in Redis on Tyritic</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Tyritic</copyright><atom:link href="https://Tyritic.github.io/categories/redis/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Redis的读写效率</title>
        <link>https://Tyritic.github.io/p/redis%E7%9A%84%E8%AF%BB%E5%86%99%E6%95%88%E7%8E%87/</link>
        <pubDate>Mon, 24 Feb 2025 17:30:12 +0800</pubDate>
        
        <guid>https://Tyritic.github.io/p/redis%E7%9A%84%E8%AF%BB%E5%86%99%E6%95%88%E7%8E%87/</guid>
        <description>&lt;h2 id=&#34;redis性能强大的原因&#34;&gt;Redis性能强大的原因
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基于内存的数据存储&lt;/strong&gt; ：Redis 将数据存储在内存中，提供快速的读写速度，使得数据的读写操作避开了磁盘 I/O。而内存的访问速度远超硬盘。相比于传统的磁盘数据库，内存访问速度快得多。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单线程模型&lt;/strong&gt; ：Redis 使用单线程事件驱动模型，避免了多线程上下文切换和竞争条件，提高了并发处理效率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高效的数据结构&lt;/strong&gt; ：Redis 提供多种高效的数据结构（如字符串、哈希、列表、集合等），这些结构经过优化，能够快速完成各种操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IO多路复用&lt;/strong&gt; ：基于 Linux 的 select/epoll 机制。该机制允许内核中同时存在多个监听套接字和已连接套接字，内核会一直监听这些套接字上的连接请求或者数据请求，一旦有请求到达，就会交给 Redis 处理，就实现了所谓的 Redis 单个线程处理多个 IO 读写的请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;单线程模型&#34;&gt;单线程模型
&lt;/h2&gt;&lt;h3 id=&#34;使用原因&#34;&gt;使用原因
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Redis 的大部分操作&lt;strong&gt;都在内存中完成&lt;/strong&gt;，并且采用了高效的数据结构，因此 Redis 瓶颈可能是机器的内存或者网络带宽，而并非 CPU，既然 CPU 不是瓶颈，那么自然就采用单线程的解决方案了。&lt;/li&gt;
&lt;li&gt;Redis 采用单线程模型可以&lt;strong&gt;避免了多线程之间的竞争&lt;/strong&gt;，省去了多线程切换带来的时间和性能上的开销，而且也不会导致死锁问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;io多路复用机制&#34;&gt;IO多路复用机制
&lt;/h3&gt;&lt;p&gt;IO 多路复用机制是指一个线程处理多个 IO 流，就是 select/epoll 机制。简单来说，在 Redis 只运行单线程的情况下，该机制允许内核中，同时存在多个监听 Socket 和已连接 Socket。内核会一直监听这些 Socket 上的连接请求或数据请求。一旦有请求到达，就会交给 Redis 线程处理，这就实现了一个 Redis 线程处理多个 IO 流的效果。&lt;/p&gt;
&lt;h3 id=&#34;多线程的引入&#34;&gt;多线程的引入
&lt;/h3&gt;&lt;p&gt;随着数据规模的增长、请求量的增多，Redis 的执行瓶颈主要在于⽹络 I/O。引入多线程处理可以提高网络 I/O处理速度。在 Redis 6.0 中，多线程主要用来处理网络 IO 操作，命令解析和执行仍然是单线程完成，这样既可以发挥多核 CPU 的优势，又能避免锁和上下文切换带来的性能损耗。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Redis基础</title>
        <link>https://Tyritic.github.io/p/redis%E5%9F%BA%E7%A1%80/</link>
        <pubDate>Mon, 24 Feb 2025 15:10:42 +0800</pubDate>
        
        <guid>https://Tyritic.github.io/p/redis%E5%9F%BA%E7%A1%80/</guid>
        <description>&lt;h2 id=&#34;nosql型数据库&#34;&gt;NoSQL型数据库
&lt;/h2&gt;&lt;p&gt;NoSQL（Not Only SQL）是指一类不使用传统关系型数据库结构的数据库。NoSQL数据库通常用于大规模数据存储、处理和快速访问的场景。与关系型数据库不同，NoSQL数据库不要求数据必须存储为表格形式，也不需要固定的模式（schema）。它们通常具有更高的扩展性、灵活性和适应性。&lt;/p&gt;
&lt;h3 id=&#34;四大分类&#34;&gt;四大分类
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;键值存储（Key-Value Stores）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;数据以键值对的形式存储。&lt;/li&gt;
&lt;li&gt;适合快速访问单个值。&lt;/li&gt;
&lt;li&gt;例如：Redis、Amazon DynamoDB。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列族存储（Column Family Stores）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;数据按列而非行来存储。&lt;/li&gt;
&lt;li&gt;高效地存储和查询大规模的、非结构化的数据。&lt;/li&gt;
&lt;li&gt;例如：Apache Cassandra、HBase。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文档存储（Document Stores）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;存储类似JSON、BSON或XML的文档数据，文档中可以包含嵌套的数据。&lt;/li&gt;
&lt;li&gt;适合存储和查询灵活的、层次化的数据。&lt;/li&gt;
&lt;li&gt;例如：MongoDB、CouchDB。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图数据库（Graph Databases）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;以图形结构（节点、边和属性）存储数据，用于表示实体之间的关系。&lt;/li&gt;
&lt;li&gt;适合复杂的关系型数据查询。&lt;/li&gt;
&lt;li&gt;例如：Neo4j、ArangoDB。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;与sql数据库的对比&#34;&gt;与SQL数据库的对比
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;SQL&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;NoSQL&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;strong&gt;数据结构&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;结构化&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;非结构化&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;strong&gt;数据关联&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;不同数据之间具有关联性&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;无关联性&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;strong&gt;查询方式&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;SQL标准&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;无标准&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;strong&gt;事务特性&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;ACID&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;BASE&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;strong&gt;存储方式&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;磁盘&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;内盘&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;strong&gt;拓展性&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;垂直&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;水平&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;strong&gt;使用场景&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;数据结构固定&lt;br&gt;相关业务对数据安全性，一致性要求较高&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;数据结构不固定&lt;br/&gt;对一致性、安全性要求不高2)&lt;br/&gt;对性能要求&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;redis缓存中间件&#34;&gt;Redis缓存中间件
&lt;/h2&gt;&lt;p&gt;Redis（Remote Dictionary Server）是一个开源的内存数据库，遵守 BSD 协议，它提供了一个高性能的键值（key-value）存储系统，常用于缓存、消息队列、会话存储等应用场景。&lt;/p&gt;
&lt;h3 id=&#34;基本特点&#34;&gt;基本特点
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能极高：&lt;/strong&gt; Redis 以其极高的性能而著称，能够支持每秒数十万次的读写操作24。这使得Redis成为处理高并发请求的理想选择，尤其是在需要快速响应的场景中，如缓存、会话管理、排行榜等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;丰富的数据类型：&lt;/strong&gt; Redis 不仅支持基本的键值存储，还提供了丰富的数据类型，包括字符串、列表、集合、哈希表、有序集合等。这些数据类型为开发者提供了灵活的数据操作能力，使得Redis可以适应各种不同的应用场景。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原子性操作：&lt;/strong&gt; Redis 的所有操作都是原子性的，这意味着操作要么完全执行，要么完全不执行。这种特性对于确保数据的一致性和完整性至关重要，尤其是在高并发环境下处理事务时。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持久化：&lt;/strong&gt; Redis 支持数据的持久化，可以将内存中的数据保存到磁盘中，以便在系统重启后恢复数据。这为 Redis 提供了数据安全性，确保数据不会因为系统故障而丢失。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持发布/订阅模式：&lt;/strong&gt; Redis 内置了发布/订阅模式（Pub/Sub），允许客户端之间通过消息传递进行通信。这使得 Redis 可以作为消息队列和实时数据传输的平台。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单线程模型：&lt;/strong&gt; 尽管 Redis 是单线程的，但它通过高效的事件驱动模型来处理并发请求，确保了高性能和低延迟。单线程模型也简化了并发控制的复杂性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主从复制：&lt;/strong&gt; Redis 支持主从复制，可以通过从节点来备份数据或分担读请求，提高数据的可用性和系统的伸缩性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用场景&#34;&gt;使用场景
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;缓存&lt;/strong&gt; ：Redis 最常用的场景是作为缓存层，以减少数据库的负载，提高数据读取速度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为 Redis 是基于内存的，其读写速度比 MySQL 基于磁盘的方式要快很多，所以其作为热点数据的缓存是非常合适的。使用 Redis 缓存可以极大地提高应用的响应速度和吞吐量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实时系统&lt;/strong&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis 支持快速的数据写入和读取，非常适合用于实时分析，如网站点击统计、实时排行榜等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;消息队列&lt;/strong&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用 Redis 的 List 和 Pub/Sub 功能，可以实现轻量级的消息队列，适用于任务处理和异步消息传递。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分布式锁&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis 可以用作分布式锁的实现，确保在分布式系统中资源的安全访问，避免竞态条件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;计数器&lt;/strong&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis 的原子性操作非常适合用作计数器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis的服务端命令&#34;&gt;Redis的服务端命令
&lt;/h2&gt;&lt;p&gt;进入redis的安装根目录的命令行可以启动redis服务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动临时redis服务（不会在window Service列表出现Redis服务名称和状态，此窗口关闭，服务会自动关闭。）：&lt;strong&gt;&lt;code&gt;redis-server.exe redis.windows.conf&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;注册redis服务：&lt;strong&gt;&lt;code&gt;redis-server.exe --service-install redis.windows.conf --service-name redisserver1 --loglevel verbose&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;启动服务：&lt;strong&gt;&lt;code&gt;redis-server.exe  --service-start --service-name redisserver1&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;停止服务：&lt;strong&gt;&lt;code&gt;redis-server.exe  --service-stop --service-name redisserver1&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;卸载服务：&lt;strong&gt;&lt;code&gt;redis-server.exe  --service-uninstall--service-name redisserver1&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以在主机中配置多个端口的redis服务，参见&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/yqwang75457/article/details/83412614&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;博客&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;redis的客户端命令&#34;&gt;Redis的客户端命令
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;redis&lt;/code&gt;&lt;/strong&gt; 在安装后就自带命令行客户端 &lt;strong&gt;&lt;code&gt;redis-cli&lt;/code&gt;&lt;/strong&gt; ，客户端的通用命令格式为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;redis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cli&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;option&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;commands&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;常见的option如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-h ip_address&lt;/code&gt;&lt;/strong&gt; ：指定要连接的redis节点的IP地址，默认是127.0.0.1（回环地址，表示访问本机）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-p port&lt;/code&gt;&lt;/strong&gt;：指定要连接的redis节点的端口，默认是6379&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-a password&lt;/code&gt;&lt;/strong&gt; ：指定redis的访问密码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;commands是redis的操作命令&lt;/p&gt;
&lt;h2 id=&#34;redis的基本数据结构&#34;&gt;Redis的基本数据结构
&lt;/h2&gt;&lt;p&gt;Redis 提供了丰富的数据类型。&lt;/p&gt;
&lt;p&gt;基本的有五种数据类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;String（字符串）&lt;/strong&gt; ：Redis中最基本的数据类型，可以存储任何类型的数据，包括文本、数字和二进制数据。它的最大长度为512MB。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;缓存&lt;/strong&gt;：存储临时数据，如用户会话、页面缓存。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计数器&lt;/strong&gt;：用于统计访问量、点赞数等，通过原子操作增加或减少。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hash（哈希）&lt;/strong&gt; ：哈希是一个键值对集合，适合存储对象的属性。Redis内部使用哈希表实现，适合小规模数据。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;商品详情&lt;/strong&gt;：存储商品的各个属性，方便快速检索。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;List（列表）&lt;/strong&gt; ：列表是有序的字符串集合，支持从两端推入和弹出元素，底层实现为双向链表。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;消息队列&lt;/strong&gt;：用于简单任务调度、消息传递等场景，通过&lt;code&gt;LPUSH&lt;/code&gt;和&lt;code&gt;RPOP&lt;/code&gt;操作实现生产者消费者模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;历史记录&lt;/strong&gt;：存储用户操作的历史记录，便于快速访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Set（集合）&lt;/strong&gt; ：集合是无序且不重复的字符串集合，使用哈希表实现，支持快速查找和去重操作。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;标签系统&lt;/strong&gt;：存储用户的兴趣标签，避免重复。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;唯一用户集合&lt;/strong&gt;：记录访问过某个页面的唯一用户，方便进行分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zset（有序集合）&lt;/strong&gt; ：有序集合类似于集合，但每个元素都有一个分数（score），用于排序。底层使用跳表实现，支持快速的范围查询。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;排行榜&lt;/strong&gt;：存储用户分数，实现实时排行榜。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;任务调度&lt;/strong&gt;：根据任务的优先级进行排序，方便调度执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后面又支持了四种数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BitMap&lt;/strong&gt; ：BitMap 是一种以位为单位存储数据的高效方式，适合用来表示布尔值（如存在性、状态等）。每个 bit 可以表示一个状态（0 或 1），使用空间少且操作快速。
&lt;ul&gt;
&lt;li&gt;统计每天用户的在线状态，可以用 Bitmap 记录每个用户是否在线：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HyperLogLog&lt;/strong&gt; ：HyperLogLog 是一种概率性数据结构，主要用于估算基数（不同元素的数量），内存占用固定，适合处理大规模数据的去重和计数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GEO&lt;/strong&gt; ：GEO 是 Redis 提供的一种用于存储地理位置信息的数据结构，可以存储经纬度信息并支持空间查询，例如计算距离和获取范围内的坐标。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stream&lt;/strong&gt; ：Stream 是 Redis 提供的一种日志数据结构，适合于存储时间序列数据或消息流。支持高效的消息生产和消费模式，具有持久性和序列化特性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis的通用命令&#34;&gt;Redis的通用命令
&lt;/h2&gt;&lt;h3 id=&#34;keys命令&#34;&gt;Keys命令
&lt;/h3&gt;&lt;p&gt;Redis 键命令用于管理 redis 的键。&lt;/p&gt;
&lt;h4 id=&#34;基本格式&#34;&gt;基本格式
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;redis 127.0.0.1:6379&amp;gt; COMMAND KEY_NAME
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;常见操作&#34;&gt;常见操作
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;删除键
&lt;ul&gt;
&lt;li&gt;删除已存在的键：&lt;strong&gt;&lt;code&gt;DEL KEY_NAME&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;返回值：被删除 key 的数量。&lt;/li&gt;
&lt;li&gt;不存在的 key 会被忽略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查找键
&lt;ul&gt;
&lt;li&gt;检查键是否存在：&lt;strong&gt;&lt;code&gt;EXISTS KEY_NAME&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;返回值：若 key 存在返回 1 ，否则返回 0 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查找符合格式的键：&lt;strong&gt;&lt;code&gt;KEYS PATTERN&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;返回值：符合给定模式的 key 列表 (Array)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查看键的过期时间：&lt;strong&gt;&lt;code&gt;TTL KEY_NAME&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;返回值：当 key 不存在时，返回 -2 。 当 key 存在但没有设置剩余生存时间时，返回 -1 。 否则，以秒为单位，返回 key 的剩余生存时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设置键
&lt;ul&gt;
&lt;li&gt;设置键的过期时间：&lt;strong&gt;&lt;code&gt;Expire KEY_NAME TIME_IN_SECONDS&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;返回值：设置成功返回 1 。 当 key 不存在返回 0 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移除键的过期时间：&lt;strong&gt;&lt;code&gt;PERSIST KEY_NAME&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;返回值：当过期时间移除成功时，返回 1 。 如果 key 不存在或 key 没有设置过期时间，返回 0 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将当前数据库的 key 移动到给定的数据库 db 当中：&lt;strong&gt;&lt;code&gt;MOVE KEY_NAME DESTINATION_DATABASE&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;返回值：移动成功返回 1 ，失败则返回 0 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将键重新命名：&lt;strong&gt;&lt;code&gt;RENAME OLD_KEY_NAME NEW_KEY_NAME&lt;/code&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;返回值
&lt;ul&gt;
&lt;li&gt;改名成功时提示 OK&lt;/li&gt;
&lt;li&gt;失败时候返回一个错误。当 OLD_KEY_NAME 和 NEW_KEY_NAME 相同，或者 OLD_KEY_NAME 不存在时，返回一个错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据库命令&#34;&gt;数据库命令
&lt;/h3&gt;&lt;p&gt;Redis默认有16个数据库，默认使用编号为0的数据库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切换数据库：&lt;strong&gt;&lt;code&gt;select db_num&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;查看当前数据库key的数量：&lt;strong&gt;&lt;code&gt;DBSIZE&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;清除当前数据库：&lt;strong&gt;&lt;code&gt;flushdb&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;清除所有数据库：&lt;strong&gt;&lt;code&gt;flushall&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
